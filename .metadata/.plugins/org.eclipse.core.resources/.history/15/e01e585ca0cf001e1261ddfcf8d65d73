#include "main.h"
#include "adc.h"
#include "eth.h"
#include "spi.h"
#include "usart.h"
#include "usb_otg.h"
#include "gpio.h"
#include "Max31865.h"

uint8_t message[99];
uint16_t data_size;
uint8_t ms;

Max31865_t  pt100;
bool        pt100isOK;
float       pt100Temp;

void SystemClock_Config(void);
// Podłącznie się przez putty żeby odczytywać komunikaty, baud_rate = 115200
int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_ETH_Init();
  MX_USART3_UART_Init();
  MX_USB_OTG_FS_PCD_Init();
  MX_ADC3_Init();
  MX_SPI1_Init();
  MX_ADC1_Init();
  MX_USART2_UART_Init();

  Max31865_init(&pt100,&hspi1,GPIOD,GPIO_PIN_14,3,50);

  while (1)
  {
  	HAL_Delay(5000);	// Delay 5000ms
  	float t;
	pt100isOK = Max31865_readTempC(&pt100,&t);
	pt100Temp = Max31865_Filter(t,pt100Temp,0.1);

	// W razie gdyby wystąpiły jakieś problemy z konwersją wypróbować różne konwersje, uint_16 może nie działać gdyż
	// argument sprintf może być chyba maksymalnie 8 bitowy a resztę obcina

	//int uintVar = (int)pt100Temp;
	uint8_t uintVar = (uint8_t)pt100Temp; // Obcina część dziesiętną
	//uint8_t uintVar = (uint8_t)(pt100Temp + 0.5f); // Zaokrągla do najbliższej liczby całkowitej
	//uint16_t uintVar = (uint16_t)pt100Temp;

  	data_size = sprintf(message, "Temperature: %.2d\n", uintVar);
  	HAL_UART_Transmit_IT(&huart2, message, data_size);
  }

}
// Kolejne naciśniecia przycisku w lewym dolnym rogu powodują wykonanie przedstawionwych akcji
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == B1_Pin){
		++ms;
		if(ms == 1){
			HAL_GPIO_WritePin(MOS1_GPIO_Port, MOS1_Pin, GPIO_PIN_SET);	// Open valve 1
			data_size = sprintf(message, "Valve 1 opened");
			HAL_UART_Transmit_IT(&huart2, message, data_size);
		}
		else if (ms == 2) {
			HAL_GPIO_WritePin(MOS1_GPIO_Port, MOS1_Pin, GPIO_PIN_RESET);	// Close valve 1
			data_size = sprintf(message, "Valve 1 closed");
			HAL_UART_Transmit_IT(&huart2, message, data_size);
		}
		else if (ms == 3) {
			HAL_GPIO_WritePin(MOS2_GPIO_Port, MOS2_Pin, GPIO_PIN_SET);	// Open valve 2
			data_size = sprintf(message, "Valve 2 opened");
			HAL_UART_Transmit_IT(&huart2, message, data_size);
		}
		else if (ms == 4) {
			HAL_GPIO_WritePin(MOS2_GPIO_Port, MOS2_Pin, GPIO_PIN_RESET);	// Close valve 2
			data_size = sprintf(message, "Valve 2 closed");
			HAL_UART_Transmit_IT(&huart2, message, data_size);
		}
		else if (ms == 5) {
			HAL_GPIO_WritePin(MOS3_GPIO_Port, MOS3_Pin, GPIO_PIN_SET);	// Open valve 3
			data_size = sprintf(message, "Valve 3 opened");
			HAL_UART_Transmit_IT(&huart2, message, data_size);
		}
		else if (ms == 6) {
			HAL_GPIO_WritePin(MOS3_GPIO_Port, MOS3_Pin, GPIO_PIN_RESET);	// Close valve 3
			data_size = sprintf(message, "Valve 3 closed");
			HAL_UART_Transmit_IT(&huart2, message, data_size);
			ms = 0;
		}
	}
}
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

void Error_Handler(void)
{
  __disable_irq();
  while (1)
  {
  }
}

#ifdef  USE_FULL_ASSERT

void assert_failed(uint8_t *file, uint32_t line)
{

}
#endif /* USE_FULL_ASSERT */
