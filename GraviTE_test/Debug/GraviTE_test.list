
GraviTE_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000692c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006adc  08006adc  00016adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b9c  08006b9c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006b9c  08006b9c  00016b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ba4  08006ba4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ba4  08006ba4  00016ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ba8  08006ba8  00016ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000a98  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000af4  20000af4  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014bca  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000033ef  00000000  00000000  00034c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001090  00000000  00000000  00038088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000cb2  00000000  00000000  00039118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027285  00000000  00000000  00039dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016220  00000000  00000000  0006104f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e954d  00000000  00000000  0007726f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004a98  00000000  00000000  001607bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  00165254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006ac4 	.word	0x08006ac4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08006ac4 	.word	0x08006ac4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2f>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000864:	bf24      	itt	cs
 8000866:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800086a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800086e:	d90d      	bls.n	800088c <__aeabi_d2f+0x30>
 8000870:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000874:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000878:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800087c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000880:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000884:	bf08      	it	eq
 8000886:	f020 0001 	biceq.w	r0, r0, #1
 800088a:	4770      	bx	lr
 800088c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000890:	d121      	bne.n	80008d6 <__aeabi_d2f+0x7a>
 8000892:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000896:	bfbc      	itt	lt
 8000898:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800089c:	4770      	bxlt	lr
 800089e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008a6:	f1c2 0218 	rsb	r2, r2, #24
 80008aa:	f1c2 0c20 	rsb	ip, r2, #32
 80008ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80008b2:	fa20 f002 	lsr.w	r0, r0, r2
 80008b6:	bf18      	it	ne
 80008b8:	f040 0001 	orrne.w	r0, r0, #1
 80008bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008c8:	ea40 000c 	orr.w	r0, r0, ip
 80008cc:	fa23 f302 	lsr.w	r3, r3, r2
 80008d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d4:	e7cc      	b.n	8000870 <__aeabi_d2f+0x14>
 80008d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008da:	d107      	bne.n	80008ec <__aeabi_d2f+0x90>
 80008dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e0:	bf1e      	ittt	ne
 80008e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008ea:	4770      	bxne	lr
 80008ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop

080008fc <__aeabi_uldivmod>:
 80008fc:	b953      	cbnz	r3, 8000914 <__aeabi_uldivmod+0x18>
 80008fe:	b94a      	cbnz	r2, 8000914 <__aeabi_uldivmod+0x18>
 8000900:	2900      	cmp	r1, #0
 8000902:	bf08      	it	eq
 8000904:	2800      	cmpeq	r0, #0
 8000906:	bf1c      	itt	ne
 8000908:	f04f 31ff 	movne.w	r1, #4294967295
 800090c:	f04f 30ff 	movne.w	r0, #4294967295
 8000910:	f000 b970 	b.w	8000bf4 <__aeabi_idiv0>
 8000914:	f1ad 0c08 	sub.w	ip, sp, #8
 8000918:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800091c:	f000 f806 	bl	800092c <__udivmoddi4>
 8000920:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000924:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000928:	b004      	add	sp, #16
 800092a:	4770      	bx	lr

0800092c <__udivmoddi4>:
 800092c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000930:	9e08      	ldr	r6, [sp, #32]
 8000932:	460d      	mov	r5, r1
 8000934:	4604      	mov	r4, r0
 8000936:	460f      	mov	r7, r1
 8000938:	2b00      	cmp	r3, #0
 800093a:	d14a      	bne.n	80009d2 <__udivmoddi4+0xa6>
 800093c:	428a      	cmp	r2, r1
 800093e:	4694      	mov	ip, r2
 8000940:	d965      	bls.n	8000a0e <__udivmoddi4+0xe2>
 8000942:	fab2 f382 	clz	r3, r2
 8000946:	b143      	cbz	r3, 800095a <__udivmoddi4+0x2e>
 8000948:	fa02 fc03 	lsl.w	ip, r2, r3
 800094c:	f1c3 0220 	rsb	r2, r3, #32
 8000950:	409f      	lsls	r7, r3
 8000952:	fa20 f202 	lsr.w	r2, r0, r2
 8000956:	4317      	orrs	r7, r2
 8000958:	409c      	lsls	r4, r3
 800095a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800095e:	fa1f f58c 	uxth.w	r5, ip
 8000962:	fbb7 f1fe 	udiv	r1, r7, lr
 8000966:	0c22      	lsrs	r2, r4, #16
 8000968:	fb0e 7711 	mls	r7, lr, r1, r7
 800096c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000970:	fb01 f005 	mul.w	r0, r1, r5
 8000974:	4290      	cmp	r0, r2
 8000976:	d90a      	bls.n	800098e <__udivmoddi4+0x62>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000980:	f080 811c 	bcs.w	8000bbc <__udivmoddi4+0x290>
 8000984:	4290      	cmp	r0, r2
 8000986:	f240 8119 	bls.w	8000bbc <__udivmoddi4+0x290>
 800098a:	3902      	subs	r1, #2
 800098c:	4462      	add	r2, ip
 800098e:	1a12      	subs	r2, r2, r0
 8000990:	b2a4      	uxth	r4, r4
 8000992:	fbb2 f0fe 	udiv	r0, r2, lr
 8000996:	fb0e 2210 	mls	r2, lr, r0, r2
 800099a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800099e:	fb00 f505 	mul.w	r5, r0, r5
 80009a2:	42a5      	cmp	r5, r4
 80009a4:	d90a      	bls.n	80009bc <__udivmoddi4+0x90>
 80009a6:	eb1c 0404 	adds.w	r4, ip, r4
 80009aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80009ae:	f080 8107 	bcs.w	8000bc0 <__udivmoddi4+0x294>
 80009b2:	42a5      	cmp	r5, r4
 80009b4:	f240 8104 	bls.w	8000bc0 <__udivmoddi4+0x294>
 80009b8:	4464      	add	r4, ip
 80009ba:	3802      	subs	r0, #2
 80009bc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009c0:	1b64      	subs	r4, r4, r5
 80009c2:	2100      	movs	r1, #0
 80009c4:	b11e      	cbz	r6, 80009ce <__udivmoddi4+0xa2>
 80009c6:	40dc      	lsrs	r4, r3
 80009c8:	2300      	movs	r3, #0
 80009ca:	e9c6 4300 	strd	r4, r3, [r6]
 80009ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0xbc>
 80009d6:	2e00      	cmp	r6, #0
 80009d8:	f000 80ed 	beq.w	8000bb6 <__udivmoddi4+0x28a>
 80009dc:	2100      	movs	r1, #0
 80009de:	e9c6 0500 	strd	r0, r5, [r6]
 80009e2:	4608      	mov	r0, r1
 80009e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e8:	fab3 f183 	clz	r1, r3
 80009ec:	2900      	cmp	r1, #0
 80009ee:	d149      	bne.n	8000a84 <__udivmoddi4+0x158>
 80009f0:	42ab      	cmp	r3, r5
 80009f2:	d302      	bcc.n	80009fa <__udivmoddi4+0xce>
 80009f4:	4282      	cmp	r2, r0
 80009f6:	f200 80f8 	bhi.w	8000bea <__udivmoddi4+0x2be>
 80009fa:	1a84      	subs	r4, r0, r2
 80009fc:	eb65 0203 	sbc.w	r2, r5, r3
 8000a00:	2001      	movs	r0, #1
 8000a02:	4617      	mov	r7, r2
 8000a04:	2e00      	cmp	r6, #0
 8000a06:	d0e2      	beq.n	80009ce <__udivmoddi4+0xa2>
 8000a08:	e9c6 4700 	strd	r4, r7, [r6]
 8000a0c:	e7df      	b.n	80009ce <__udivmoddi4+0xa2>
 8000a0e:	b902      	cbnz	r2, 8000a12 <__udivmoddi4+0xe6>
 8000a10:	deff      	udf	#255	; 0xff
 8000a12:	fab2 f382 	clz	r3, r2
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f040 8090 	bne.w	8000b3c <__udivmoddi4+0x210>
 8000a1c:	1a8a      	subs	r2, r1, r2
 8000a1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a22:	fa1f fe8c 	uxth.w	lr, ip
 8000a26:	2101      	movs	r1, #1
 8000a28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a30:	0c22      	lsrs	r2, r4, #16
 8000a32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a36:	fb0e f005 	mul.w	r0, lr, r5
 8000a3a:	4290      	cmp	r0, r2
 8000a3c:	d908      	bls.n	8000a50 <__udivmoddi4+0x124>
 8000a3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a42:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a46:	d202      	bcs.n	8000a4e <__udivmoddi4+0x122>
 8000a48:	4290      	cmp	r0, r2
 8000a4a:	f200 80cb 	bhi.w	8000be4 <__udivmoddi4+0x2b8>
 8000a4e:	4645      	mov	r5, r8
 8000a50:	1a12      	subs	r2, r2, r0
 8000a52:	b2a4      	uxth	r4, r4
 8000a54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a58:	fb07 2210 	mls	r2, r7, r0, r2
 8000a5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a60:	fb0e fe00 	mul.w	lr, lr, r0
 8000a64:	45a6      	cmp	lr, r4
 8000a66:	d908      	bls.n	8000a7a <__udivmoddi4+0x14e>
 8000a68:	eb1c 0404 	adds.w	r4, ip, r4
 8000a6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a70:	d202      	bcs.n	8000a78 <__udivmoddi4+0x14c>
 8000a72:	45a6      	cmp	lr, r4
 8000a74:	f200 80bb 	bhi.w	8000bee <__udivmoddi4+0x2c2>
 8000a78:	4610      	mov	r0, r2
 8000a7a:	eba4 040e 	sub.w	r4, r4, lr
 8000a7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a82:	e79f      	b.n	80009c4 <__udivmoddi4+0x98>
 8000a84:	f1c1 0720 	rsb	r7, r1, #32
 8000a88:	408b      	lsls	r3, r1
 8000a8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a92:	fa05 f401 	lsl.w	r4, r5, r1
 8000a96:	fa20 f307 	lsr.w	r3, r0, r7
 8000a9a:	40fd      	lsrs	r5, r7
 8000a9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aa0:	4323      	orrs	r3, r4
 8000aa2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000aa6:	fa1f fe8c 	uxth.w	lr, ip
 8000aaa:	fb09 5518 	mls	r5, r9, r8, r5
 8000aae:	0c1c      	lsrs	r4, r3, #16
 8000ab0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ab4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ab8:	42a5      	cmp	r5, r4
 8000aba:	fa02 f201 	lsl.w	r2, r2, r1
 8000abe:	fa00 f001 	lsl.w	r0, r0, r1
 8000ac2:	d90b      	bls.n	8000adc <__udivmoddi4+0x1b0>
 8000ac4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000acc:	f080 8088 	bcs.w	8000be0 <__udivmoddi4+0x2b4>
 8000ad0:	42a5      	cmp	r5, r4
 8000ad2:	f240 8085 	bls.w	8000be0 <__udivmoddi4+0x2b4>
 8000ad6:	f1a8 0802 	sub.w	r8, r8, #2
 8000ada:	4464      	add	r4, ip
 8000adc:	1b64      	subs	r4, r4, r5
 8000ade:	b29d      	uxth	r5, r3
 8000ae0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ae4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ae8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000aec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000af0:	45a6      	cmp	lr, r4
 8000af2:	d908      	bls.n	8000b06 <__udivmoddi4+0x1da>
 8000af4:	eb1c 0404 	adds.w	r4, ip, r4
 8000af8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000afc:	d26c      	bcs.n	8000bd8 <__udivmoddi4+0x2ac>
 8000afe:	45a6      	cmp	lr, r4
 8000b00:	d96a      	bls.n	8000bd8 <__udivmoddi4+0x2ac>
 8000b02:	3b02      	subs	r3, #2
 8000b04:	4464      	add	r4, ip
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b0e:	eba4 040e 	sub.w	r4, r4, lr
 8000b12:	42ac      	cmp	r4, r5
 8000b14:	46c8      	mov	r8, r9
 8000b16:	46ae      	mov	lr, r5
 8000b18:	d356      	bcc.n	8000bc8 <__udivmoddi4+0x29c>
 8000b1a:	d053      	beq.n	8000bc4 <__udivmoddi4+0x298>
 8000b1c:	b156      	cbz	r6, 8000b34 <__udivmoddi4+0x208>
 8000b1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b22:	eb64 040e 	sbc.w	r4, r4, lr
 8000b26:	fa04 f707 	lsl.w	r7, r4, r7
 8000b2a:	40ca      	lsrs	r2, r1
 8000b2c:	40cc      	lsrs	r4, r1
 8000b2e:	4317      	orrs	r7, r2
 8000b30:	e9c6 7400 	strd	r7, r4, [r6]
 8000b34:	4618      	mov	r0, r3
 8000b36:	2100      	movs	r1, #0
 8000b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3c:	f1c3 0120 	rsb	r1, r3, #32
 8000b40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b44:	fa20 f201 	lsr.w	r2, r0, r1
 8000b48:	fa25 f101 	lsr.w	r1, r5, r1
 8000b4c:	409d      	lsls	r5, r3
 8000b4e:	432a      	orrs	r2, r5
 8000b50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b54:	fa1f fe8c 	uxth.w	lr, ip
 8000b58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b60:	0c11      	lsrs	r1, r2, #16
 8000b62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b66:	fb00 f50e 	mul.w	r5, r0, lr
 8000b6a:	428d      	cmp	r5, r1
 8000b6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x258>
 8000b72:	eb1c 0101 	adds.w	r1, ip, r1
 8000b76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b7a:	d22f      	bcs.n	8000bdc <__udivmoddi4+0x2b0>
 8000b7c:	428d      	cmp	r5, r1
 8000b7e:	d92d      	bls.n	8000bdc <__udivmoddi4+0x2b0>
 8000b80:	3802      	subs	r0, #2
 8000b82:	4461      	add	r1, ip
 8000b84:	1b49      	subs	r1, r1, r5
 8000b86:	b292      	uxth	r2, r2
 8000b88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b94:	fb05 f10e 	mul.w	r1, r5, lr
 8000b98:	4291      	cmp	r1, r2
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x282>
 8000b9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba4:	d216      	bcs.n	8000bd4 <__udivmoddi4+0x2a8>
 8000ba6:	4291      	cmp	r1, r2
 8000ba8:	d914      	bls.n	8000bd4 <__udivmoddi4+0x2a8>
 8000baa:	3d02      	subs	r5, #2
 8000bac:	4462      	add	r2, ip
 8000bae:	1a52      	subs	r2, r2, r1
 8000bb0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bb4:	e738      	b.n	8000a28 <__udivmoddi4+0xfc>
 8000bb6:	4631      	mov	r1, r6
 8000bb8:	4630      	mov	r0, r6
 8000bba:	e708      	b.n	80009ce <__udivmoddi4+0xa2>
 8000bbc:	4639      	mov	r1, r7
 8000bbe:	e6e6      	b.n	800098e <__udivmoddi4+0x62>
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	e6fb      	b.n	80009bc <__udivmoddi4+0x90>
 8000bc4:	4548      	cmp	r0, r9
 8000bc6:	d2a9      	bcs.n	8000b1c <__udivmoddi4+0x1f0>
 8000bc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bcc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bd0:	3b01      	subs	r3, #1
 8000bd2:	e7a3      	b.n	8000b1c <__udivmoddi4+0x1f0>
 8000bd4:	4645      	mov	r5, r8
 8000bd6:	e7ea      	b.n	8000bae <__udivmoddi4+0x282>
 8000bd8:	462b      	mov	r3, r5
 8000bda:	e794      	b.n	8000b06 <__udivmoddi4+0x1da>
 8000bdc:	4640      	mov	r0, r8
 8000bde:	e7d1      	b.n	8000b84 <__udivmoddi4+0x258>
 8000be0:	46d0      	mov	r8, sl
 8000be2:	e77b      	b.n	8000adc <__udivmoddi4+0x1b0>
 8000be4:	3d02      	subs	r5, #2
 8000be6:	4462      	add	r2, ip
 8000be8:	e732      	b.n	8000a50 <__udivmoddi4+0x124>
 8000bea:	4608      	mov	r0, r1
 8000bec:	e70a      	b.n	8000a04 <__udivmoddi4+0xd8>
 8000bee:	4464      	add	r4, ip
 8000bf0:	3802      	subs	r0, #2
 8000bf2:	e742      	b.n	8000a7a <__udivmoddi4+0x14e>

08000bf4 <__aeabi_idiv0>:
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c0a:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c0c:	4a21      	ldr	r2, [pc, #132]	; (8000c94 <MX_ADC1_Init+0x9c>)
 8000c0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c10:	4b1f      	ldr	r3, [pc, #124]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c18:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c1e:	4b1c      	ldr	r3, [pc, #112]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c24:	4b1a      	ldr	r3, [pc, #104]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c32:	4b17      	ldr	r3, [pc, #92]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c38:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c3a:	4a17      	ldr	r2, [pc, #92]	; (8000c98 <MX_ADC1_Init+0xa0>)
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c58:	480d      	ldr	r0, [pc, #52]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c5a:	f001 fbd7 	bl	800240c <HAL_ADC_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c64:	f000 fcea 	bl	800163c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_ADC1_Init+0xa4>)
 8000c6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c74:	463b      	mov	r3, r7
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_ADC1_Init+0x98>)
 8000c7a:	f001 fd39 	bl	80026f0 <HAL_ADC_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c84:	f000 fcda 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	20000078 	.word	0x20000078
 8000c94:	40012000 	.word	0x40012000
 8000c98:	0f000001 	.word	0x0f000001
 8000c9c:	10000012 	.word	0x10000012

08000ca0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cb4:	4a21      	ldr	r2, [pc, #132]	; (8000d3c <MX_ADC3_Init+0x9c>)
 8000cb6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cbe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <MX_ADC3_Init+0xa0>)
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000d02:	f001 fb83 	bl	800240c <HAL_ADC_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000d0c:	f000 fc96 	bl	800163c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000d10:	230e      	movs	r3, #14
 8000d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <MX_ADC3_Init+0x98>)
 8000d22:	f001 fce5 	bl	80026f0 <HAL_ADC_ConfigChannel>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000d2c:	f000 fc86 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d30:	bf00      	nop
 8000d32:	3710      	adds	r7, #16
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200000c0 	.word	0x200000c0
 8000d3c:	40012200 	.word	0x40012200
 8000d40:	0f000001 	.word	0x0f000001

08000d44 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a29      	ldr	r2, [pc, #164]	; (8000e08 <HAL_ADC_MspInit+0xc4>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d116      	bne.n	8000d94 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <HAL_ADC_MspInit+0xc8>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	4a27      	ldr	r2, [pc, #156]	; (8000e0c <HAL_ADC_MspInit+0xc8>)
 8000d70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d74:	6453      	str	r3, [r2, #68]	; 0x44
 8000d76:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <HAL_ADC_MspInit+0xc8>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	2012      	movs	r0, #18
 8000d88:	f001 ffc5 	bl	8002d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000d8c:	2012      	movs	r0, #18
 8000d8e:	f001 ffde 	bl	8002d4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000d92:	e034      	b.n	8000dfe <HAL_ADC_MspInit+0xba>
  else if(adcHandle->Instance==ADC3)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a1d      	ldr	r2, [pc, #116]	; (8000e10 <HAL_ADC_MspInit+0xcc>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d12f      	bne.n	8000dfe <HAL_ADC_MspInit+0xba>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b1a      	ldr	r3, [pc, #104]	; (8000e0c <HAL_ADC_MspInit+0xc8>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a19      	ldr	r2, [pc, #100]	; (8000e0c <HAL_ADC_MspInit+0xc8>)
 8000da8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b17      	ldr	r3, [pc, #92]	; (8000e0c <HAL_ADC_MspInit+0xc8>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <HAL_ADC_MspInit+0xc8>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a12      	ldr	r2, [pc, #72]	; (8000e0c <HAL_ADC_MspInit+0xc8>)
 8000dc4:	f043 0320 	orr.w	r3, r3, #32
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <HAL_ADC_MspInit+0xc8>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0320 	and.w	r3, r3, #32
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dd6:	2310      	movs	r3, #16
 8000dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000de2:	f107 0314 	add.w	r3, r7, #20
 8000de6:	4619      	mov	r1, r3
 8000de8:	480a      	ldr	r0, [pc, #40]	; (8000e14 <HAL_ADC_MspInit+0xd0>)
 8000dea:	f002 fb85 	bl	80034f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2100      	movs	r1, #0
 8000df2:	2012      	movs	r0, #18
 8000df4:	f001 ff8f 	bl	8002d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000df8:	2012      	movs	r0, #18
 8000dfa:	f001 ffa8 	bl	8002d4e <HAL_NVIC_EnableIRQ>
}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	; 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40012000 	.word	0x40012000
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40012200 	.word	0x40012200
 8000e14:	40021400 	.word	0x40021400

08000e18 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e1c:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <MX_ETH_Init+0x84>)
 8000e1e:	4a20      	ldr	r2, [pc, #128]	; (8000ea0 <MX_ETH_Init+0x88>)
 8000e20:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <MX_ETH_Init+0x8c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <MX_ETH_Init+0x8c>)
 8000e2a:	2280      	movs	r2, #128	; 0x80
 8000e2c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_ETH_Init+0x8c>)
 8000e30:	22e1      	movs	r2, #225	; 0xe1
 8000e32:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <MX_ETH_Init+0x8c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_ETH_Init+0x8c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_ETH_Init+0x8c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <MX_ETH_Init+0x84>)
 8000e48:	4a16      	ldr	r2, [pc, #88]	; (8000ea4 <MX_ETH_Init+0x8c>)
 8000e4a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <MX_ETH_Init+0x84>)
 8000e4e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e52:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_ETH_Init+0x84>)
 8000e56:	4a14      	ldr	r2, [pc, #80]	; (8000ea8 <MX_ETH_Init+0x90>)
 8000e58:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <MX_ETH_Init+0x84>)
 8000e5c:	4a13      	ldr	r2, [pc, #76]	; (8000eac <MX_ETH_Init+0x94>)
 8000e5e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e60:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_ETH_Init+0x84>)
 8000e62:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e66:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <MX_ETH_Init+0x84>)
 8000e6a:	f002 f81d 	bl	8002ea8 <HAL_ETH_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000e74:	f000 fbe2 	bl	800163c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e78:	2238      	movs	r2, #56	; 0x38
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <MX_ETH_Init+0x98>)
 8000e7e:	f005 f97b 	bl	8006178 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_ETH_Init+0x98>)
 8000e84:	2221      	movs	r2, #33	; 0x21
 8000e86:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_ETH_Init+0x98>)
 8000e8a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000e8e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e90:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <MX_ETH_Init+0x98>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000280 	.word	0x20000280
 8000ea0:	40028000 	.word	0x40028000
 8000ea4:	20000330 	.word	0x20000330
 8000ea8:	200001a8 	.word	0x200001a8
 8000eac:	20000108 	.word	0x20000108
 8000eb0:	20000248 	.word	0x20000248

08000eb4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08e      	sub	sp, #56	; 0x38
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a55      	ldr	r2, [pc, #340]	; (8001028 <HAL_ETH_MspInit+0x174>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	f040 80a4 	bne.w	8001020 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
 8000edc:	4b53      	ldr	r3, [pc, #332]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee0:	4a52      	ldr	r2, [pc, #328]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000ee2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee8:	4b50      	ldr	r3, [pc, #320]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ef0:	623b      	str	r3, [r7, #32]
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
 8000ef8:	4b4c      	ldr	r3, [pc, #304]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	4a4b      	ldr	r2, [pc, #300]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000efe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f02:	6313      	str	r3, [r2, #48]	; 0x30
 8000f04:	4b49      	ldr	r3, [pc, #292]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f0c:	61fb      	str	r3, [r7, #28]
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
 8000f14:	4b45      	ldr	r3, [pc, #276]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	4a44      	ldr	r2, [pc, #272]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000f1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f20:	4b42      	ldr	r3, [pc, #264]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f28:	61bb      	str	r3, [r7, #24]
 8000f2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	4b3e      	ldr	r3, [pc, #248]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f34:	4a3d      	ldr	r2, [pc, #244]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000f36:	f043 0304 	orr.w	r3, r3, #4
 8000f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3c:	4b3b      	ldr	r3, [pc, #236]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	2300      	movs	r3, #0
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	4b37      	ldr	r3, [pc, #220]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f50:	4a36      	ldr	r2, [pc, #216]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6313      	str	r3, [r2, #48]	; 0x30
 8000f58:	4b34      	ldr	r3, [pc, #208]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	613b      	str	r3, [r7, #16]
 8000f62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	4b30      	ldr	r3, [pc, #192]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6c:	4a2f      	ldr	r2, [pc, #188]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000f6e:	f043 0302 	orr.w	r3, r3, #2
 8000f72:	6313      	str	r3, [r2, #48]	; 0x30
 8000f74:	4b2d      	ldr	r3, [pc, #180]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	4b29      	ldr	r3, [pc, #164]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f88:	4a28      	ldr	r2, [pc, #160]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f90:	4b26      	ldr	r3, [pc, #152]	; (800102c <HAL_ETH_MspInit+0x178>)
 8000f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f9c:	2332      	movs	r3, #50	; 0x32
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fac:	230b      	movs	r3, #11
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	481e      	ldr	r0, [pc, #120]	; (8001030 <HAL_ETH_MspInit+0x17c>)
 8000fb8:	f002 fa9e 	bl	80034f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fbc:	2386      	movs	r3, #134	; 0x86
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fcc:	230b      	movs	r3, #11
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4817      	ldr	r0, [pc, #92]	; (8001034 <HAL_ETH_MspInit+0x180>)
 8000fd8:	f002 fa8e 	bl	80034f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fee:	230b      	movs	r3, #11
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	480f      	ldr	r0, [pc, #60]	; (8001038 <HAL_ETH_MspInit+0x184>)
 8000ffa:	f002 fa7d 	bl	80034f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ffe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001010:	230b      	movs	r3, #11
 8001012:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001018:	4619      	mov	r1, r3
 800101a:	4808      	ldr	r0, [pc, #32]	; (800103c <HAL_ETH_MspInit+0x188>)
 800101c:	f002 fa6c 	bl	80034f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001020:	bf00      	nop
 8001022:	3738      	adds	r7, #56	; 0x38
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40028000 	.word	0x40028000
 800102c:	40023800 	.word	0x40023800
 8001030:	40020800 	.word	0x40020800
 8001034:	40020000 	.word	0x40020000
 8001038:	40020400 	.word	0x40020400
 800103c:	40021800 	.word	0x40021800

08001040 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08e      	sub	sp, #56	; 0x38
 8001044:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
 800105a:	4ba0      	ldr	r3, [pc, #640]	; (80012dc <MX_GPIO_Init+0x29c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a9f      	ldr	r2, [pc, #636]	; (80012dc <MX_GPIO_Init+0x29c>)
 8001060:	f043 0310 	orr.w	r3, r3, #16
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b9d      	ldr	r3, [pc, #628]	; (80012dc <MX_GPIO_Init+0x29c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0310 	and.w	r3, r3, #16
 800106e:	623b      	str	r3, [r7, #32]
 8001070:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
 8001076:	4b99      	ldr	r3, [pc, #612]	; (80012dc <MX_GPIO_Init+0x29c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a98      	ldr	r2, [pc, #608]	; (80012dc <MX_GPIO_Init+0x29c>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b96      	ldr	r3, [pc, #600]	; (80012dc <MX_GPIO_Init+0x29c>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	4b92      	ldr	r3, [pc, #584]	; (80012dc <MX_GPIO_Init+0x29c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a91      	ldr	r2, [pc, #580]	; (80012dc <MX_GPIO_Init+0x29c>)
 8001098:	f043 0320 	orr.w	r3, r3, #32
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b8f      	ldr	r3, [pc, #572]	; (80012dc <MX_GPIO_Init+0x29c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f003 0320 	and.w	r3, r3, #32
 80010a6:	61bb      	str	r3, [r7, #24]
 80010a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	4b8b      	ldr	r3, [pc, #556]	; (80012dc <MX_GPIO_Init+0x29c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a8a      	ldr	r2, [pc, #552]	; (80012dc <MX_GPIO_Init+0x29c>)
 80010b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b88      	ldr	r3, [pc, #544]	; (80012dc <MX_GPIO_Init+0x29c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b84      	ldr	r3, [pc, #528]	; (80012dc <MX_GPIO_Init+0x29c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a83      	ldr	r2, [pc, #524]	; (80012dc <MX_GPIO_Init+0x29c>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b81      	ldr	r3, [pc, #516]	; (80012dc <MX_GPIO_Init+0x29c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b7d      	ldr	r3, [pc, #500]	; (80012dc <MX_GPIO_Init+0x29c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a7c      	ldr	r2, [pc, #496]	; (80012dc <MX_GPIO_Init+0x29c>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b7a      	ldr	r3, [pc, #488]	; (80012dc <MX_GPIO_Init+0x29c>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	4b76      	ldr	r3, [pc, #472]	; (80012dc <MX_GPIO_Init+0x29c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a75      	ldr	r2, [pc, #468]	; (80012dc <MX_GPIO_Init+0x29c>)
 8001108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b73      	ldr	r3, [pc, #460]	; (80012dc <MX_GPIO_Init+0x29c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b6f      	ldr	r3, [pc, #444]	; (80012dc <MX_GPIO_Init+0x29c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a6e      	ldr	r2, [pc, #440]	; (80012dc <MX_GPIO_Init+0x29c>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b6c      	ldr	r3, [pc, #432]	; (80012dc <MX_GPIO_Init+0x29c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f244 0181 	movw	r1, #16513	; 0x4081
 800113c:	4868      	ldr	r0, [pc, #416]	; (80012e0 <MX_GPIO_Init+0x2a0>)
 800113e:	f002 fb87 	bl	8003850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOS3_Pin|MOS2_Pin|MOS1_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001148:	4866      	ldr	r0, [pc, #408]	; (80012e4 <MX_GPIO_Init+0x2a4>)
 800114a:	f002 fb81 	bl	8003850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001154:	4863      	ldr	r0, [pc, #396]	; (80012e4 <MX_GPIO_Init+0x2a4>)
 8001156:	f002 fb7b 	bl	8003850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2140      	movs	r1, #64	; 0x40
 800115e:	4862      	ldr	r0, [pc, #392]	; (80012e8 <MX_GPIO_Init+0x2a8>)
 8001160:	f002 fb76 	bl	8003850 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001164:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116a:	2303      	movs	r3, #3
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001172:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001176:	4619      	mov	r1, r3
 8001178:	485c      	ldr	r0, [pc, #368]	; (80012ec <MX_GPIO_Init+0x2ac>)
 800117a:	f002 f9bd 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800117e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001184:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118a:	2301      	movs	r3, #1
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	4619      	mov	r1, r3
 8001194:	4856      	ldr	r0, [pc, #344]	; (80012f0 <MX_GPIO_Init+0x2b0>)
 8001196:	f002 f9af 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF5 PF6 PF7 PF8
                           PF9 PF10 PF11 PF12
                           PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800119a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800119e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a0:	2303      	movs	r3, #3
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	4851      	ldr	r0, [pc, #324]	; (80012f4 <MX_GPIO_Init+0x2b4>)
 80011b0:	f002 f9a2 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 80011b4:	f641 73cd 	movw	r3, #8141	; 0x1fcd
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ba:	2303      	movs	r3, #3
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	4619      	mov	r1, r3
 80011c8:	4849      	ldr	r0, [pc, #292]	; (80012f0 <MX_GPIO_Init+0x2b0>)
 80011ca:	f002 f995 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_15;
 80011ce:	f248 0311 	movw	r3, #32785	; 0x8011
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d4:	2303      	movs	r3, #3
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e0:	4619      	mov	r1, r3
 80011e2:	4845      	ldr	r0, [pc, #276]	; (80012f8 <MX_GPIO_Init+0x2b8>)
 80011e4:	f002 f988 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011e8:	f244 0381 	movw	r3, #16513	; 0x4081
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011fe:	4619      	mov	r1, r3
 8001200:	4837      	ldr	r0, [pc, #220]	; (80012e0 <MX_GPIO_Init+0x2a0>)
 8001202:	f002 f979 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11
                           PB12 PB15 PB3 PB4
                           PB6 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11
 8001206:	f649 735e 	movw	r3, #40798	; 0x9f5e
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120c:	2303      	movs	r3, #3
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001218:	4619      	mov	r1, r3
 800121a:	4831      	ldr	r0, [pc, #196]	; (80012e0 <MX_GPIO_Init+0x2a0>)
 800121c:	f002 f96c 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG8 PG9
                           PG10 PG12 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001220:	f24d 733f 	movw	r3, #55103	; 0xd73f
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001226:	2303      	movs	r3, #3
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800122e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001232:	4619      	mov	r1, r3
 8001234:	482c      	ldr	r0, [pc, #176]	; (80012e8 <MX_GPIO_Init+0x2a8>)
 8001236:	f002 f95f 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD15 PD0 PD1
                           PD2 PD3 PD4 PD6
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800123a:	f248 43df 	movw	r3, #34015	; 0x84df
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001240:	2303      	movs	r3, #3
 8001242:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	4619      	mov	r1, r3
 800124e:	4825      	ldr	r0, [pc, #148]	; (80012e4 <MX_GPIO_Init+0x2a4>)
 8001250:	f002 f952 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = MOS3_Pin|MOS2_Pin|MOS1_Pin;
 8001254:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126a:	4619      	mov	r1, r3
 800126c:	481d      	ldr	r0, [pc, #116]	; (80012e4 <MX_GPIO_Init+0x2a4>)
 800126e:	f002 f943 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001272:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001278:	2301      	movs	r3, #1
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001280:	2302      	movs	r3, #2
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	4619      	mov	r1, r3
 800128a:	4816      	ldr	r0, [pc, #88]	; (80012e4 <MX_GPIO_Init+0x2a4>)
 800128c:	f002 f934 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001290:	2340      	movs	r3, #64	; 0x40
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a4:	4619      	mov	r1, r3
 80012a6:	4810      	ldr	r0, [pc, #64]	; (80012e8 <MX_GPIO_Init+0x2a8>)
 80012a8:	f002 f926 	bl	80034f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012bc:	4619      	mov	r1, r3
 80012be:	480a      	ldr	r0, [pc, #40]	; (80012e8 <MX_GPIO_Init+0x2a8>)
 80012c0:	f002 f91a 	bl	80034f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2100      	movs	r1, #0
 80012c8:	2028      	movs	r0, #40	; 0x28
 80012ca:	f001 fd24 	bl	8002d16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012ce:	2028      	movs	r0, #40	; 0x28
 80012d0:	f001 fd3d 	bl	8002d4e <HAL_NVIC_EnableIRQ>

}
 80012d4:	bf00      	nop
 80012d6:	3738      	adds	r7, #56	; 0x38
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020400 	.word	0x40020400
 80012e4:	40020c00 	.word	0x40020c00
 80012e8:	40021800 	.word	0x40021800
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40020800 	.word	0x40020800
 80012f4:	40021400 	.word	0x40021400
 80012f8:	40020000 	.word	0x40020000

080012fc <main>:
bool        pt100isOK;
float       pt100Temp;

void SystemClock_Config(void);
int main(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af02      	add	r7, sp, #8
  HAL_Init();
 8001302:	f000 ffed 	bl	80022e0 <HAL_Init>
  SystemClock_Config();
 8001306:	f000 f92f 	bl	8001568 <SystemClock_Config>
  MX_GPIO_Init();
 800130a:	f7ff fe99 	bl	8001040 <MX_GPIO_Init>
  MX_ETH_Init();
 800130e:	f7ff fd83 	bl	8000e18 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001312:	f000 fe65 	bl	8001fe0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001316:	f000 ff31 	bl	800217c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC3_Init();
 800131a:	f7ff fcc1 	bl	8000ca0 <MX_ADC3_Init>
  MX_SPI1_Init();
 800131e:	f000 fcdd 	bl	8001cdc <MX_SPI1_Init>
  MX_ADC1_Init();
 8001322:	f7ff fc69 	bl	8000bf8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001326:	f000 fe31 	bl	8001f8c <MX_USART2_UART_Init>

  Max31865_init(&pt100,&hspi1,GPIOD,GPIO_PIN_14,3,50);
 800132a:	2332      	movs	r3, #50	; 0x32
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	2303      	movs	r3, #3
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001336:	4a1e      	ldr	r2, [pc, #120]	; (80013b0 <main+0xb4>)
 8001338:	491e      	ldr	r1, [pc, #120]	; (80013b4 <main+0xb8>)
 800133a:	481f      	ldr	r0, [pc, #124]	; (80013b8 <main+0xbc>)
 800133c:	f000 fb0e 	bl	800195c <Max31865_init>

  while (1)
  {
  	HAL_Delay(5000);	// Delay 5000ms
 8001340:	f241 3088 	movw	r0, #5000	; 0x1388
 8001344:	f001 f83e 	bl	80023c4 <HAL_Delay>
  	float t;
	pt100isOK = Max31865_readTempC(&pt100,&t);
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	481a      	ldr	r0, [pc, #104]	; (80013b8 <main+0xbc>)
 800134e:	f000 fb43 	bl	80019d8 <Max31865_readTempC>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <main+0xc0>)
 8001358:	701a      	strb	r2, [r3, #0]
	pt100Temp = Max31865_Filter(t,pt100Temp,0.1);
 800135a:	edd7 7a00 	vldr	s15, [r7]
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <main+0xc4>)
 8001360:	ed93 7a00 	vldr	s14, [r3]
 8001364:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80013c4 <main+0xc8>
 8001368:	eef0 0a47 	vmov.f32	s1, s14
 800136c:	eeb0 0a67 	vmov.f32	s0, s15
 8001370:	f000 fc92 	bl	8001c98 <Max31865_Filter>
 8001374:	eef0 7a40 	vmov.f32	s15, s0
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <main+0xc4>)
 800137a:	edc3 7a00 	vstr	s15, [r3]
	int temper = (int) pt100Temp;
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <main+0xc4>)
 8001380:	edd3 7a00 	vldr	s15, [r3]
 8001384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001388:	ee17 3a90 	vmov	r3, s15
 800138c:	607b      	str	r3, [r7, #4]
  	data_size = sprintf(message, "Temperature: %.2d\n", temper);
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	490d      	ldr	r1, [pc, #52]	; (80013c8 <main+0xcc>)
 8001392:	480e      	ldr	r0, [pc, #56]	; (80013cc <main+0xd0>)
 8001394:	f004 fed0 	bl	8006138 <siprintf>
 8001398:	4603      	mov	r3, r0
 800139a:	b29a      	uxth	r2, r3
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <main+0xd4>)
 800139e:	801a      	strh	r2, [r3, #0]
  	HAL_UART_Transmit_IT(&huart2, message, data_size);
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <main+0xd4>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4909      	ldr	r1, [pc, #36]	; (80013cc <main+0xd0>)
 80013a8:	480a      	ldr	r0, [pc, #40]	; (80013d4 <main+0xd8>)
 80013aa:	f003 fcb8 	bl	8004d1e <HAL_UART_Transmit_IT>
  {
 80013ae:	e7c7      	b.n	8001340 <main+0x44>
 80013b0:	40020c00 	.word	0x40020c00
 80013b4:	200003b8 	.word	0x200003b8
 80013b8:	200003a0 	.word	0x200003a0
 80013bc:	200003b0 	.word	0x200003b0
 80013c0:	200003b4 	.word	0x200003b4
 80013c4:	3dcccccd 	.word	0x3dcccccd
 80013c8:	08006adc 	.word	0x08006adc
 80013cc:	20000338 	.word	0x20000338
 80013d0:	2000039c 	.word	0x2000039c
 80013d4:	20000414 	.word	0x20000414

080013d8 <HAL_GPIO_EXTI_Callback>:
  }

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin){
 80013e2:	88fb      	ldrh	r3, [r7, #6]
 80013e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013e8:	f040 80a4 	bne.w	8001534 <HAL_GPIO_EXTI_Callback+0x15c>
		++ms;
 80013ec:	4b53      	ldr	r3, [pc, #332]	; (800153c <HAL_GPIO_EXTI_Callback+0x164>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	3301      	adds	r3, #1
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b51      	ldr	r3, [pc, #324]	; (800153c <HAL_GPIO_EXTI_Callback+0x164>)
 80013f6:	701a      	strb	r2, [r3, #0]
		if(ms == 1){
 80013f8:	4b50      	ldr	r3, [pc, #320]	; (800153c <HAL_GPIO_EXTI_Callback+0x164>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d115      	bne.n	800142c <HAL_GPIO_EXTI_Callback+0x54>
			HAL_GPIO_WritePin(MOS1_GPIO_Port, MOS1_Pin, GPIO_PIN_SET);	// Open valve 1
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001406:	484e      	ldr	r0, [pc, #312]	; (8001540 <HAL_GPIO_EXTI_Callback+0x168>)
 8001408:	f002 fa22 	bl	8003850 <HAL_GPIO_WritePin>
			data_size = sprintf(message, "Valve 1 opened");
 800140c:	494d      	ldr	r1, [pc, #308]	; (8001544 <HAL_GPIO_EXTI_Callback+0x16c>)
 800140e:	484e      	ldr	r0, [pc, #312]	; (8001548 <HAL_GPIO_EXTI_Callback+0x170>)
 8001410:	f004 fe92 	bl	8006138 <siprintf>
 8001414:	4603      	mov	r3, r0
 8001416:	b29a      	uxth	r2, r3
 8001418:	4b4c      	ldr	r3, [pc, #304]	; (800154c <HAL_GPIO_EXTI_Callback+0x174>)
 800141a:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, message, data_size);
 800141c:	4b4b      	ldr	r3, [pc, #300]	; (800154c <HAL_GPIO_EXTI_Callback+0x174>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	4949      	ldr	r1, [pc, #292]	; (8001548 <HAL_GPIO_EXTI_Callback+0x170>)
 8001424:	484a      	ldr	r0, [pc, #296]	; (8001550 <HAL_GPIO_EXTI_Callback+0x178>)
 8001426:	f003 fc7a 	bl	8004d1e <HAL_UART_Transmit_IT>
			data_size = sprintf(message, "Valve 3 closed");
			HAL_UART_Transmit_IT(&huart2, message, data_size);
			ms = 0;
		}
	}
}
 800142a:	e083      	b.n	8001534 <HAL_GPIO_EXTI_Callback+0x15c>
		else if (ms == 2) {
 800142c:	4b43      	ldr	r3, [pc, #268]	; (800153c <HAL_GPIO_EXTI_Callback+0x164>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d115      	bne.n	8001460 <HAL_GPIO_EXTI_Callback+0x88>
			HAL_GPIO_WritePin(MOS1_GPIO_Port, MOS1_Pin, GPIO_PIN_RESET);	// Close valve 1
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143a:	4841      	ldr	r0, [pc, #260]	; (8001540 <HAL_GPIO_EXTI_Callback+0x168>)
 800143c:	f002 fa08 	bl	8003850 <HAL_GPIO_WritePin>
			data_size = sprintf(message, "Valve 1 closed");
 8001440:	4944      	ldr	r1, [pc, #272]	; (8001554 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001442:	4841      	ldr	r0, [pc, #260]	; (8001548 <HAL_GPIO_EXTI_Callback+0x170>)
 8001444:	f004 fe78 	bl	8006138 <siprintf>
 8001448:	4603      	mov	r3, r0
 800144a:	b29a      	uxth	r2, r3
 800144c:	4b3f      	ldr	r3, [pc, #252]	; (800154c <HAL_GPIO_EXTI_Callback+0x174>)
 800144e:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, message, data_size);
 8001450:	4b3e      	ldr	r3, [pc, #248]	; (800154c <HAL_GPIO_EXTI_Callback+0x174>)
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	493c      	ldr	r1, [pc, #240]	; (8001548 <HAL_GPIO_EXTI_Callback+0x170>)
 8001458:	483d      	ldr	r0, [pc, #244]	; (8001550 <HAL_GPIO_EXTI_Callback+0x178>)
 800145a:	f003 fc60 	bl	8004d1e <HAL_UART_Transmit_IT>
}
 800145e:	e069      	b.n	8001534 <HAL_GPIO_EXTI_Callback+0x15c>
		else if (ms == 3) {
 8001460:	4b36      	ldr	r3, [pc, #216]	; (800153c <HAL_GPIO_EXTI_Callback+0x164>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b03      	cmp	r3, #3
 8001466:	d115      	bne.n	8001494 <HAL_GPIO_EXTI_Callback+0xbc>
			HAL_GPIO_WritePin(MOS2_GPIO_Port, MOS2_Pin, GPIO_PIN_SET);	// Open valve 2
 8001468:	2201      	movs	r2, #1
 800146a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800146e:	4834      	ldr	r0, [pc, #208]	; (8001540 <HAL_GPIO_EXTI_Callback+0x168>)
 8001470:	f002 f9ee 	bl	8003850 <HAL_GPIO_WritePin>
			data_size = sprintf(message, "Valve 2 opened");
 8001474:	4938      	ldr	r1, [pc, #224]	; (8001558 <HAL_GPIO_EXTI_Callback+0x180>)
 8001476:	4834      	ldr	r0, [pc, #208]	; (8001548 <HAL_GPIO_EXTI_Callback+0x170>)
 8001478:	f004 fe5e 	bl	8006138 <siprintf>
 800147c:	4603      	mov	r3, r0
 800147e:	b29a      	uxth	r2, r3
 8001480:	4b32      	ldr	r3, [pc, #200]	; (800154c <HAL_GPIO_EXTI_Callback+0x174>)
 8001482:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, message, data_size);
 8001484:	4b31      	ldr	r3, [pc, #196]	; (800154c <HAL_GPIO_EXTI_Callback+0x174>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	492f      	ldr	r1, [pc, #188]	; (8001548 <HAL_GPIO_EXTI_Callback+0x170>)
 800148c:	4830      	ldr	r0, [pc, #192]	; (8001550 <HAL_GPIO_EXTI_Callback+0x178>)
 800148e:	f003 fc46 	bl	8004d1e <HAL_UART_Transmit_IT>
}
 8001492:	e04f      	b.n	8001534 <HAL_GPIO_EXTI_Callback+0x15c>
		else if (ms == 4) {
 8001494:	4b29      	ldr	r3, [pc, #164]	; (800153c <HAL_GPIO_EXTI_Callback+0x164>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b04      	cmp	r3, #4
 800149a:	d115      	bne.n	80014c8 <HAL_GPIO_EXTI_Callback+0xf0>
			HAL_GPIO_WritePin(MOS2_GPIO_Port, MOS2_Pin, GPIO_PIN_RESET);	// Close valve 2
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014a2:	4827      	ldr	r0, [pc, #156]	; (8001540 <HAL_GPIO_EXTI_Callback+0x168>)
 80014a4:	f002 f9d4 	bl	8003850 <HAL_GPIO_WritePin>
			data_size = sprintf(message, "Valve 2 closed");
 80014a8:	492c      	ldr	r1, [pc, #176]	; (800155c <HAL_GPIO_EXTI_Callback+0x184>)
 80014aa:	4827      	ldr	r0, [pc, #156]	; (8001548 <HAL_GPIO_EXTI_Callback+0x170>)
 80014ac:	f004 fe44 	bl	8006138 <siprintf>
 80014b0:	4603      	mov	r3, r0
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	4b25      	ldr	r3, [pc, #148]	; (800154c <HAL_GPIO_EXTI_Callback+0x174>)
 80014b6:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, message, data_size);
 80014b8:	4b24      	ldr	r3, [pc, #144]	; (800154c <HAL_GPIO_EXTI_Callback+0x174>)
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	4922      	ldr	r1, [pc, #136]	; (8001548 <HAL_GPIO_EXTI_Callback+0x170>)
 80014c0:	4823      	ldr	r0, [pc, #140]	; (8001550 <HAL_GPIO_EXTI_Callback+0x178>)
 80014c2:	f003 fc2c 	bl	8004d1e <HAL_UART_Transmit_IT>
}
 80014c6:	e035      	b.n	8001534 <HAL_GPIO_EXTI_Callback+0x15c>
		else if (ms == 5) {
 80014c8:	4b1c      	ldr	r3, [pc, #112]	; (800153c <HAL_GPIO_EXTI_Callback+0x164>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b05      	cmp	r3, #5
 80014ce:	d115      	bne.n	80014fc <HAL_GPIO_EXTI_Callback+0x124>
			HAL_GPIO_WritePin(MOS3_GPIO_Port, MOS3_Pin, GPIO_PIN_SET);	// Open valve 3
 80014d0:	2201      	movs	r2, #1
 80014d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d6:	481a      	ldr	r0, [pc, #104]	; (8001540 <HAL_GPIO_EXTI_Callback+0x168>)
 80014d8:	f002 f9ba 	bl	8003850 <HAL_GPIO_WritePin>
			data_size = sprintf(message, "Valve 3 opened");
 80014dc:	4920      	ldr	r1, [pc, #128]	; (8001560 <HAL_GPIO_EXTI_Callback+0x188>)
 80014de:	481a      	ldr	r0, [pc, #104]	; (8001548 <HAL_GPIO_EXTI_Callback+0x170>)
 80014e0:	f004 fe2a 	bl	8006138 <siprintf>
 80014e4:	4603      	mov	r3, r0
 80014e6:	b29a      	uxth	r2, r3
 80014e8:	4b18      	ldr	r3, [pc, #96]	; (800154c <HAL_GPIO_EXTI_Callback+0x174>)
 80014ea:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, message, data_size);
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_GPIO_EXTI_Callback+0x174>)
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	4915      	ldr	r1, [pc, #84]	; (8001548 <HAL_GPIO_EXTI_Callback+0x170>)
 80014f4:	4816      	ldr	r0, [pc, #88]	; (8001550 <HAL_GPIO_EXTI_Callback+0x178>)
 80014f6:	f003 fc12 	bl	8004d1e <HAL_UART_Transmit_IT>
}
 80014fa:	e01b      	b.n	8001534 <HAL_GPIO_EXTI_Callback+0x15c>
		else if (ms == 6) {
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <HAL_GPIO_EXTI_Callback+0x164>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b06      	cmp	r3, #6
 8001502:	d117      	bne.n	8001534 <HAL_GPIO_EXTI_Callback+0x15c>
			HAL_GPIO_WritePin(MOS3_GPIO_Port, MOS3_Pin, GPIO_PIN_RESET);	// Close valve 3
 8001504:	2200      	movs	r2, #0
 8001506:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800150a:	480d      	ldr	r0, [pc, #52]	; (8001540 <HAL_GPIO_EXTI_Callback+0x168>)
 800150c:	f002 f9a0 	bl	8003850 <HAL_GPIO_WritePin>
			data_size = sprintf(message, "Valve 3 closed");
 8001510:	4914      	ldr	r1, [pc, #80]	; (8001564 <HAL_GPIO_EXTI_Callback+0x18c>)
 8001512:	480d      	ldr	r0, [pc, #52]	; (8001548 <HAL_GPIO_EXTI_Callback+0x170>)
 8001514:	f004 fe10 	bl	8006138 <siprintf>
 8001518:	4603      	mov	r3, r0
 800151a:	b29a      	uxth	r2, r3
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_GPIO_EXTI_Callback+0x174>)
 800151e:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_IT(&huart2, message, data_size);
 8001520:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_GPIO_EXTI_Callback+0x174>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4908      	ldr	r1, [pc, #32]	; (8001548 <HAL_GPIO_EXTI_Callback+0x170>)
 8001528:	4809      	ldr	r0, [pc, #36]	; (8001550 <HAL_GPIO_EXTI_Callback+0x178>)
 800152a:	f003 fbf8 	bl	8004d1e <HAL_UART_Transmit_IT>
			ms = 0;
 800152e:	4b03      	ldr	r3, [pc, #12]	; (800153c <HAL_GPIO_EXTI_Callback+0x164>)
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	2000039e 	.word	0x2000039e
 8001540:	40020c00 	.word	0x40020c00
 8001544:	08006af0 	.word	0x08006af0
 8001548:	20000338 	.word	0x20000338
 800154c:	2000039c 	.word	0x2000039c
 8001550:	20000414 	.word	0x20000414
 8001554:	08006b00 	.word	0x08006b00
 8001558:	08006b10 	.word	0x08006b10
 800155c:	08006b20 	.word	0x08006b20
 8001560:	08006b30 	.word	0x08006b30
 8001564:	08006b40 	.word	0x08006b40

08001568 <SystemClock_Config>:
void SystemClock_Config(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b094      	sub	sp, #80	; 0x50
 800156c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156e:	f107 0320 	add.w	r3, r7, #32
 8001572:	2230      	movs	r2, #48	; 0x30
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f004 fdfe 	bl	8006178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	4b28      	ldr	r3, [pc, #160]	; (8001634 <SystemClock_Config+0xcc>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	4a27      	ldr	r2, [pc, #156]	; (8001634 <SystemClock_Config+0xcc>)
 8001596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800159a:	6413      	str	r3, [r2, #64]	; 0x40
 800159c:	4b25      	ldr	r3, [pc, #148]	; (8001634 <SystemClock_Config+0xcc>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	4b22      	ldr	r3, [pc, #136]	; (8001638 <SystemClock_Config+0xd0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a21      	ldr	r2, [pc, #132]	; (8001638 <SystemClock_Config+0xd0>)
 80015b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <SystemClock_Config+0xd0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015c4:	2301      	movs	r3, #1
 80015c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ce:	2302      	movs	r3, #2
 80015d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015d8:	2304      	movs	r3, #4
 80015da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015dc:	23a8      	movs	r3, #168	; 0xa8
 80015de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015e0:	2302      	movs	r3, #2
 80015e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015e4:	2307      	movs	r3, #7
 80015e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e8:	f107 0320 	add.w	r3, r7, #32
 80015ec:	4618      	mov	r0, r3
 80015ee:	f002 fa7f 	bl	8003af0 <HAL_RCC_OscConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015f8:	f000 f820 	bl	800163c <Error_Handler>
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fc:	230f      	movs	r3, #15
 80015fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001600:	2302      	movs	r3, #2
 8001602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001608:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800160c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800160e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001612:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	2105      	movs	r1, #5
 800161a:	4618      	mov	r0, r3
 800161c:	f002 fce0 	bl	8003fe0 <HAL_RCC_ClockConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001626:	f000 f809 	bl	800163c <Error_Handler>
  }
}
 800162a:	bf00      	nop
 800162c:	3750      	adds	r7, #80	; 0x50
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800
 8001638:	40007000 	.word	0x40007000

0800163c <Error_Handler>:

void Error_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001640:	b672      	cpsid	i
}
 8001642:	bf00      	nop
  __disable_irq();
  while (1)
 8001644:	e7fe      	b.n	8001644 <Error_Handler+0x8>

08001646 <Max31865_delay>:

#define RTD_A 3.9083e-3
#define RTD_B -5.775e-7

void  Max31865_delay(uint32_t delay_ms)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]

}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <Max31865_readRegisterN>:

void Max31865_readRegisterN(Max31865_t *max31865,uint8_t addr, uint8_t *buffer, uint8_t n)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b088      	sub	sp, #32
 800165e:	af02      	add	r7, sp, #8
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	461a      	mov	r2, r3
 8001666:	460b      	mov	r3, r1
 8001668:	72fb      	strb	r3, [r7, #11]
 800166a:	4613      	mov	r3, r2
 800166c:	72bb      	strb	r3, [r7, #10]
  uint8_t tmp = 0xFF;
 800166e:	23ff      	movs	r3, #255	; 0xff
 8001670:	75fb      	strb	r3, [r7, #23]
	addr &= 0x7F;
 8001672:	7afb      	ldrb	r3, [r7, #11]
 8001674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001678:	b2db      	uxtb	r3, r3
 800167a:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	889b      	ldrh	r3, [r3, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	4619      	mov	r1, r3
 8001688:	f002 f8e2 	bl	8003850 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(max31865->spi,&addr, 1, 100);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6898      	ldr	r0, [r3, #8]
 8001690:	f107 010b 	add.w	r1, r7, #11
 8001694:	2364      	movs	r3, #100	; 0x64
 8001696:	2201      	movs	r2, #1
 8001698:	f002 ff4b 	bl	8004532 <HAL_SPI_Transmit>
	while (n--)
 800169c:	e00c      	b.n	80016b8 <Max31865_readRegisterN+0x5e>
	{
    HAL_SPI_TransmitReceive(max31865->spi, &tmp, buffer, 1, 100);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6898      	ldr	r0, [r3, #8]
 80016a2:	f107 0117 	add.w	r1, r7, #23
 80016a6:	2364      	movs	r3, #100	; 0x64
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2301      	movs	r3, #1
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	f003 f87c 	bl	80047aa <HAL_SPI_TransmitReceive>
		buffer++;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3301      	adds	r3, #1
 80016b6:	607b      	str	r3, [r7, #4]
	while (n--)
 80016b8:	7abb      	ldrb	r3, [r7, #10]
 80016ba:	1e5a      	subs	r2, r3, #1
 80016bc:	72ba      	strb	r2, [r7, #10]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1ed      	bne.n	800169e <Max31865_readRegisterN+0x44>
	}
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	889b      	ldrh	r3, [r3, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	4619      	mov	r1, r3
 80016ce:	f002 f8bf 	bl	8003850 <HAL_GPIO_WritePin>
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <Max31865_readRegister8>:

uint8_t Max31865_readRegister8(Max31865_t *max31865,uint8_t addr)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b084      	sub	sp, #16
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	73fb      	strb	r3, [r7, #15]
	Max31865_readRegisterN(max31865, addr, &ret, 1);
 80016ea:	f107 020f 	add.w	r2, r7, #15
 80016ee:	78f9      	ldrb	r1, [r7, #3]
 80016f0:	2301      	movs	r3, #1
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ffb1 	bl	800165a <Max31865_readRegisterN>
	return ret;
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <Max31865_readRegister16>:

uint16_t Max31865_readRegister16(Max31865_t *max31865,uint8_t addr)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	460b      	mov	r3, r1
 800170c:	70fb      	strb	r3, [r7, #3]
	uint8_t buffer[2] = {0, 0};
 800170e:	2300      	movs	r3, #0
 8001710:	81bb      	strh	r3, [r7, #12]
	Max31865_readRegisterN(max31865, addr, buffer, 2);
 8001712:	f107 020c 	add.w	r2, r7, #12
 8001716:	78f9      	ldrb	r1, [r7, #3]
 8001718:	2302      	movs	r3, #2
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ff9d 	bl	800165a <Max31865_readRegisterN>
	uint16_t ret = buffer[0];
 8001720:	7b3b      	ldrb	r3, [r7, #12]
 8001722:	81fb      	strh	r3, [r7, #14]
	ret <<= 8;
 8001724:	89fb      	ldrh	r3, [r7, #14]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	81fb      	strh	r3, [r7, #14]
	ret |=  buffer[1];
 800172a:	7b7b      	ldrb	r3, [r7, #13]
 800172c:	b29a      	uxth	r2, r3
 800172e:	89fb      	ldrh	r3, [r7, #14]
 8001730:	4313      	orrs	r3, r2
 8001732:	81fb      	strh	r3, [r7, #14]
	return ret;
 8001734:	89fb      	ldrh	r3, [r7, #14]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <Max31865_writeRegister8>:

void Max31865_writeRegister8(Max31865_t *max31865,uint8_t addr, uint8_t data)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	460b      	mov	r3, r1
 8001748:	70fb      	strb	r3, [r7, #3]
 800174a:	4613      	mov	r3, r2
 800174c:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_RESET);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6818      	ldr	r0, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	889b      	ldrh	r3, [r3, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	4619      	mov	r1, r3
 800175a:	f002 f879 	bl	8003850 <HAL_GPIO_WritePin>
  addr |= 0x80;
 800175e:	78fb      	ldrb	r3, [r7, #3]
 8001760:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001764:	b2db      	uxtb	r3, r3
 8001766:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(max31865->spi,&addr, 1, 100);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6898      	ldr	r0, [r3, #8]
 800176c:	1cf9      	adds	r1, r7, #3
 800176e:	2364      	movs	r3, #100	; 0x64
 8001770:	2201      	movs	r2, #1
 8001772:	f002 fede 	bl	8004532 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(max31865->spi,&data, 1, 100);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6898      	ldr	r0, [r3, #8]
 800177a:	1cb9      	adds	r1, r7, #2
 800177c:	2364      	movs	r3, #100	; 0x64
 800177e:	2201      	movs	r2, #1
 8001780:	f002 fed7 	bl	8004532 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(max31865->cs_gpio, max31865->cs_pin, GPIO_PIN_SET);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	889b      	ldrh	r3, [r3, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	4619      	mov	r1, r3
 8001790:	f002 f85e 	bl	8003850 <HAL_GPIO_WritePin>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <Max31865_readFault>:

uint8_t Max31865_readFault(Max31865_t *max31865)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  return Max31865_readRegister8(max31865, MAX31856_FAULTSTAT_REG);
 80017a4:	2107      	movs	r1, #7
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ff97 	bl	80016da <Max31865_readRegister8>
 80017ac:	4603      	mov	r3, r0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <Max31865_clearFault>:

void Max31865_clearFault(Max31865_t *max31865)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b084      	sub	sp, #16
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 80017be:	2100      	movs	r1, #0
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff ff8a 	bl	80016da <Max31865_readRegister8>
 80017c6:	4603      	mov	r3, r0
 80017c8:	73fb      	strb	r3, [r7, #15]
	t &= ~0x2C;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
 80017cc:	f023 032c 	bic.w	r3, r3, #44	; 0x2c
 80017d0:	73fb      	strb	r3, [r7, #15]
	t |= MAX31856_CONFIG_FAULTSTAT;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	461a      	mov	r2, r3
 80017de:	2100      	movs	r1, #0
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ffac 	bl	800173e <Max31865_writeRegister8>
}
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <Max31865_enableBias>:

void Max31865_enableBias(Max31865_t *max31865, uint8_t enable)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
 80017f6:	460b      	mov	r3, r1
 80017f8:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 80017fa:	2100      	movs	r1, #0
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ff6c 	bl	80016da <Max31865_readRegister8>
 8001802:	4603      	mov	r3, r0
 8001804:	73fb      	strb	r3, [r7, #15]
	if (enable)
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d004      	beq.n	8001816 <Max31865_enableBias+0x28>
		t |= MAX31856_CONFIG_BIAS;
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001812:	73fb      	strb	r3, [r7, #15]
 8001814:	e003      	b.n	800181e <Max31865_enableBias+0x30>
	else
		t &= ~MAX31856_CONFIG_BIAS;
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800181c:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	461a      	mov	r2, r3
 8001822:	2100      	movs	r1, #0
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff ff8a 	bl	800173e <Max31865_writeRegister8>
}
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <Max31865_autoConvert>:

void Max31865_autoConvert(Max31865_t *max31865, uint8_t enable)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b084      	sub	sp, #16
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	460b      	mov	r3, r1
 800183c:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 800183e:	2100      	movs	r1, #0
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff4a 	bl	80016da <Max31865_readRegister8>
 8001846:	4603      	mov	r3, r0
 8001848:	73fb      	strb	r3, [r7, #15]
	if (enable)
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d004      	beq.n	800185a <Max31865_autoConvert+0x28>
		t |= MAX31856_CONFIG_MODEAUTO;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001856:	73fb      	strb	r3, [r7, #15]
 8001858:	e003      	b.n	8001862 <Max31865_autoConvert+0x30>
	else
		t &= ~MAX31856_CONFIG_MODEAUTO;
 800185a:	7bfb      	ldrb	r3, [r7, #15]
 800185c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001860:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 8001862:	7bfb      	ldrb	r3, [r7, #15]
 8001864:	461a      	mov	r2, r3
 8001866:	2100      	movs	r1, #0
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff ff68 	bl	800173e <Max31865_writeRegister8>
}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <Max31865_setWires>:

void Max31865_setWires(Max31865_t *max31865, uint8_t numWires)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 8001882:	2100      	movs	r1, #0
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ff28 	bl	80016da <Max31865_readRegister8>
 800188a:	4603      	mov	r3, r0
 800188c:	73fb      	strb	r3, [r7, #15]
	if (numWires == 3)
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d104      	bne.n	800189e <Max31865_setWires+0x28>
		t |= MAX31856_CONFIG_3WIRE;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	f043 0310 	orr.w	r3, r3, #16
 800189a:	73fb      	strb	r3, [r7, #15]
 800189c:	e003      	b.n	80018a6 <Max31865_setWires+0x30>
	else
		t &= ~MAX31856_CONFIG_3WIRE;
 800189e:	7bfb      	ldrb	r3, [r7, #15]
 80018a0:	f023 0310 	bic.w	r3, r3, #16
 80018a4:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	461a      	mov	r2, r3
 80018aa:	2100      	movs	r1, #0
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff46 	bl	800173e <Max31865_writeRegister8>
}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <Max31865_setFilter>:

void Max31865_setFilter(Max31865_t *max31865, uint8_t filterHz)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b084      	sub	sp, #16
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
 80018c2:	460b      	mov	r3, r1
 80018c4:	70fb      	strb	r3, [r7, #3]
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 80018c6:	2100      	movs	r1, #0
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ff06 	bl	80016da <Max31865_readRegister8>
 80018ce:	4603      	mov	r3, r0
 80018d0:	73fb      	strb	r3, [r7, #15]
	if (filterHz == 50)
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	2b32      	cmp	r3, #50	; 0x32
 80018d6:	d104      	bne.n	80018e2 <Max31865_setFilter+0x28>
		t |= MAX31856_CONFIG_FILT50HZ;
 80018d8:	7bfb      	ldrb	r3, [r7, #15]
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	e003      	b.n	80018ea <Max31865_setFilter+0x30>
	else
		t &= ~MAX31856_CONFIG_FILT50HZ;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	461a      	mov	r2, r3
 80018ee:	2100      	movs	r1, #0
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff24 	bl	800173e <Max31865_writeRegister8>
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <Max31865_readRTD>:

uint16_t Max31865_readRTD (Max31865_t *max31865)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
	Max31865_clearFault(max31865);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ff55 	bl	80017b6 <Max31865_clearFault>
	Max31865_enableBias(max31865, 1);
 800190c:	2101      	movs	r1, #1
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ff6d 	bl	80017ee <Max31865_enableBias>
	Max31865_delay(10);
 8001914:	200a      	movs	r0, #10
 8001916:	f7ff fe96 	bl	8001646 <Max31865_delay>
	uint8_t t = Max31865_readRegister8(max31865, MAX31856_CONFIG_REG);
 800191a:	2100      	movs	r1, #0
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff fedc 	bl	80016da <Max31865_readRegister8>
 8001922:	4603      	mov	r3, r0
 8001924:	73fb      	strb	r3, [r7, #15]
	t |= MAX31856_CONFIG_1SHOT;
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	f043 0320 	orr.w	r3, r3, #32
 800192c:	73fb      	strb	r3, [r7, #15]
	Max31865_writeRegister8(max31865, MAX31856_CONFIG_REG, t);
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	461a      	mov	r2, r3
 8001932:	2100      	movs	r1, #0
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff02 	bl	800173e <Max31865_writeRegister8>
	Max31865_delay(65);
 800193a:	2041      	movs	r0, #65	; 0x41
 800193c:	f7ff fe83 	bl	8001646 <Max31865_delay>
	uint16_t rtd = Max31865_readRegister16(max31865, MAX31856_RTDMSB_REG);
 8001940:	2101      	movs	r1, #1
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff fedd 	bl	8001702 <Max31865_readRegister16>
 8001948:	4603      	mov	r3, r0
 800194a:	81bb      	strh	r3, [r7, #12]
	rtd >>= 1;
 800194c:	89bb      	ldrh	r3, [r7, #12]
 800194e:	085b      	lsrs	r3, r3, #1
 8001950:	81bb      	strh	r3, [r7, #12]
	return rtd;
 8001952:	89bb      	ldrh	r3, [r7, #12]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <Max31865_init>:

void  Max31865_init(Max31865_t *max31865,SPI_HandleTypeDef *spi,GPIO_TypeDef  *cs_gpio,uint16_t cs_pin,uint8_t  numwires, uint8_t filterHz)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
 8001968:	807b      	strh	r3, [r7, #2]
  if(max31865->lock == 1)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	7b1b      	ldrb	r3, [r3, #12]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d102      	bne.n	8001978 <Max31865_init+0x1c>
    Max31865_delay(1);
 8001972:	2001      	movs	r0, #1
 8001974:	f7ff fe67 	bl	8001646 <Max31865_delay>
  max31865->lock = 1;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2201      	movs	r2, #1
 800197c:	731a      	strb	r2, [r3, #12]
  max31865->spi = spi;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	609a      	str	r2, [r3, #8]
  max31865->cs_gpio = cs_gpio;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	601a      	str	r2, [r3, #0]
  max31865->cs_pin = cs_pin;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	887a      	ldrh	r2, [r7, #2]
 800198e:	809a      	strh	r2, [r3, #4]
  HAL_GPIO_WritePin(max31865->cs_gpio,max31865->cs_pin,GPIO_PIN_SET);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	889b      	ldrh	r3, [r3, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	4619      	mov	r1, r3
 800199c:	f001 ff58 	bl	8003850 <HAL_GPIO_WritePin>
  Max31865_delay(100);
 80019a0:	2064      	movs	r0, #100	; 0x64
 80019a2:	f7ff fe50 	bl	8001646 <Max31865_delay>
  Max31865_setWires(max31865, numwires);
 80019a6:	7e3b      	ldrb	r3, [r7, #24]
 80019a8:	4619      	mov	r1, r3
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f7ff ff63 	bl	8001876 <Max31865_setWires>
  Max31865_enableBias(max31865, 0);
 80019b0:	2100      	movs	r1, #0
 80019b2:	68f8      	ldr	r0, [r7, #12]
 80019b4:	f7ff ff1b 	bl	80017ee <Max31865_enableBias>
  Max31865_autoConvert(max31865, 0);
 80019b8:	2100      	movs	r1, #0
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f7ff ff39 	bl	8001832 <Max31865_autoConvert>
  Max31865_clearFault(max31865);
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f7ff fef8 	bl	80017b6 <Max31865_clearFault>
  Max31865_setFilter(max31865, filterHz);
 80019c6:	7f3b      	ldrb	r3, [r7, #28]
 80019c8:	4619      	mov	r1, r3
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f7ff ff75 	bl	80018ba <Max31865_setFilter>
}
 80019d0:	bf00      	nop
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <Max31865_readTempC>:

bool Max31865_readTempC(Max31865_t *max31865,float *readTemp)
{
 80019d8:	b5b0      	push	{r4, r5, r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  if(max31865->lock == 1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	7b1b      	ldrb	r3, [r3, #12]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d102      	bne.n	80019f0 <Max31865_readTempC+0x18>
    Max31865_delay(1);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f7ff fe2b 	bl	8001646 <Max31865_delay>
  max31865->lock = 1;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	731a      	strb	r2, [r3, #12]
  bool isOk = false;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  float Z1, Z2, Z3, Z4, Rt, temp;
	Rt = Max31865_readRTD(max31865);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff7e 	bl	80018fe <Max31865_readRTD>
 8001a02:	4603      	mov	r3, r0
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a0c:	edc7 7a08 	vstr	s15, [r7, #32]
	Rt /= 32768;
 8001a10:	ed97 7a08 	vldr	s14, [r7, #32]
 8001a14:	eddf 6a98 	vldr	s13, [pc, #608]	; 8001c78 <Max31865_readTempC+0x2a0>
 8001a18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a1c:	edc7 7a08 	vstr	s15, [r7, #32]
	Rt *= _MAX31865_RREF;
 8001a20:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a24:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8001c7c <Max31865_readTempC+0x2a4>
 8001a28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a2c:	edc7 7a08 	vstr	s15, [r7, #32]
	Z1 = -RTD_A;
 8001a30:	4b93      	ldr	r3, [pc, #588]	; (8001c80 <Max31865_readTempC+0x2a8>)
 8001a32:	61fb      	str	r3, [r7, #28]
	Z2 = RTD_A * RTD_A - (4 * RTD_B);
 8001a34:	4b93      	ldr	r3, [pc, #588]	; (8001c84 <Max31865_readTempC+0x2ac>)
 8001a36:	61bb      	str	r3, [r7, #24]
	Z3 = (4 * RTD_B) / _MAX31865_RNOMINAL;
 8001a38:	4b93      	ldr	r3, [pc, #588]	; (8001c88 <Max31865_readTempC+0x2b0>)
 8001a3a:	617b      	str	r3, [r7, #20]
	Z4 = 2 * RTD_B;
 8001a3c:	4b93      	ldr	r3, [pc, #588]	; (8001c8c <Max31865_readTempC+0x2b4>)
 8001a3e:	613b      	str	r3, [r7, #16]
	temp = Z2 + (Z3 * Rt);
 8001a40:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a44:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a54:	edc7 7a03 	vstr	s15, [r7, #12]
	temp = (sqrtf(temp) + Z1) / Z4;
 8001a58:	ed97 0a03 	vldr	s0, [r7, #12]
 8001a5c:	f005 f810 	bl	8006a80 <sqrtf>
 8001a60:	eeb0 7a40 	vmov.f32	s14, s0
 8001a64:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a68:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001a6c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a74:	edc7 7a03 	vstr	s15, [r7, #12]

	if (temp >= 0)
 8001a78:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	db11      	blt.n	8001aaa <Max31865_readTempC+0xd2>
  {
    *readTemp = temp;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	601a      	str	r2, [r3, #0]
    if(Max31865_readFault(max31865) == 0)
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff fe85 	bl	800179c <Max31865_readFault>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d102      	bne.n	8001a9e <Max31865_readTempC+0xc6>
      isOk = true;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    max31865->lock = 0;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	731a      	strb	r2, [r3, #12]
    return isOk;
 8001aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aa8:	e0cb      	b.n	8001c42 <Max31865_readTempC+0x26a>
  }
	Rt /= _MAX31865_RNOMINAL;
 8001aaa:	ed97 7a08 	vldr	s14, [r7, #32]
 8001aae:	eddf 6a78 	vldr	s13, [pc, #480]	; 8001c90 <Max31865_readTempC+0x2b8>
 8001ab2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab6:	edc7 7a08 	vstr	s15, [r7, #32]
	Rt *= 100;
 8001aba:	edd7 7a08 	vldr	s15, [r7, #32]
 8001abe:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001c90 <Max31865_readTempC+0x2b8>
 8001ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac6:	edc7 7a08 	vstr	s15, [r7, #32]
	float rpoly = Rt;
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	60bb      	str	r3, [r7, #8]
	temp = -242.02;
 8001ace:	4b71      	ldr	r3, [pc, #452]	; (8001c94 <Max31865_readTempC+0x2bc>)
 8001ad0:	60fb      	str	r3, [r7, #12]
	temp += 2.2228 * rpoly;
 8001ad2:	68f8      	ldr	r0, [r7, #12]
 8001ad4:	f7fe fe6a 	bl	80007ac <__aeabi_f2d>
 8001ad8:	4604      	mov	r4, r0
 8001ada:	460d      	mov	r5, r1
 8001adc:	68b8      	ldr	r0, [r7, #8]
 8001ade:	f7fe fe65 	bl	80007ac <__aeabi_f2d>
 8001ae2:	a35b      	add	r3, pc, #364	; (adr r3, 8001c50 <Max31865_readTempC+0x278>)
 8001ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae8:	f7fe fbd2 	bl	8000290 <__aeabi_dmul>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4620      	mov	r0, r4
 8001af2:	4629      	mov	r1, r5
 8001af4:	f7fe fcfc 	bl	80004f0 <__adddf3>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7fe feac 	bl	800085c <__aeabi_d2f>
 8001b04:	4603      	mov	r3, r0
 8001b06:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // square
 8001b08:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b0c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b14:	edc7 7a02 	vstr	s15, [r7, #8]
	temp += 2.5859e-3 * rpoly;
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f7fe fe47 	bl	80007ac <__aeabi_f2d>
 8001b1e:	4604      	mov	r4, r0
 8001b20:	460d      	mov	r5, r1
 8001b22:	68b8      	ldr	r0, [r7, #8]
 8001b24:	f7fe fe42 	bl	80007ac <__aeabi_f2d>
 8001b28:	a34b      	add	r3, pc, #300	; (adr r3, 8001c58 <Max31865_readTempC+0x280>)
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f7fe fbaf 	bl	8000290 <__aeabi_dmul>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4620      	mov	r0, r4
 8001b38:	4629      	mov	r1, r5
 8001b3a:	f7fe fcd9 	bl	80004f0 <__adddf3>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4610      	mov	r0, r2
 8001b44:	4619      	mov	r1, r3
 8001b46:	f7fe fe89 	bl	800085c <__aeabi_d2f>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // ^3
 8001b4e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b52:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5a:	edc7 7a02 	vstr	s15, [r7, #8]
	temp -= 4.8260e-6 * rpoly;
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7fe fe24 	bl	80007ac <__aeabi_f2d>
 8001b64:	4604      	mov	r4, r0
 8001b66:	460d      	mov	r5, r1
 8001b68:	68b8      	ldr	r0, [r7, #8]
 8001b6a:	f7fe fe1f 	bl	80007ac <__aeabi_f2d>
 8001b6e:	a33c      	add	r3, pc, #240	; (adr r3, 8001c60 <Max31865_readTempC+0x288>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	f7fe fb8c 	bl	8000290 <__aeabi_dmul>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	4629      	mov	r1, r5
 8001b80:	f7fe fcb4 	bl	80004ec <__aeabi_dsub>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4610      	mov	r0, r2
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	f7fe fe66 	bl	800085c <__aeabi_d2f>
 8001b90:	4603      	mov	r3, r0
 8001b92:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // ^4
 8001b94:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b98:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba0:	edc7 7a02 	vstr	s15, [r7, #8]
	temp -= 2.8183e-8 * rpoly;
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f7fe fe01 	bl	80007ac <__aeabi_f2d>
 8001baa:	4604      	mov	r4, r0
 8001bac:	460d      	mov	r5, r1
 8001bae:	68b8      	ldr	r0, [r7, #8]
 8001bb0:	f7fe fdfc 	bl	80007ac <__aeabi_f2d>
 8001bb4:	a32c      	add	r3, pc, #176	; (adr r3, 8001c68 <Max31865_readTempC+0x290>)
 8001bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bba:	f7fe fb69 	bl	8000290 <__aeabi_dmul>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	4629      	mov	r1, r5
 8001bc6:	f7fe fc91 	bl	80004ec <__aeabi_dsub>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	460b      	mov	r3, r1
 8001bce:	4610      	mov	r0, r2
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f7fe fe43 	bl	800085c <__aeabi_d2f>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	60fb      	str	r3, [r7, #12]
	rpoly *= Rt;  // ^5
 8001bda:	ed97 7a02 	vldr	s14, [r7, #8]
 8001bde:	edd7 7a08 	vldr	s15, [r7, #32]
 8001be2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be6:	edc7 7a02 	vstr	s15, [r7, #8]
	temp += 1.5243e-10 * rpoly;
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f7fe fdde 	bl	80007ac <__aeabi_f2d>
 8001bf0:	4604      	mov	r4, r0
 8001bf2:	460d      	mov	r5, r1
 8001bf4:	68b8      	ldr	r0, [r7, #8]
 8001bf6:	f7fe fdd9 	bl	80007ac <__aeabi_f2d>
 8001bfa:	a31d      	add	r3, pc, #116	; (adr r3, 8001c70 <Max31865_readTempC+0x298>)
 8001bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c00:	f7fe fb46 	bl	8000290 <__aeabi_dmul>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4620      	mov	r0, r4
 8001c0a:	4629      	mov	r1, r5
 8001c0c:	f7fe fc70 	bl	80004f0 <__adddf3>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	f7fe fe20 	bl	800085c <__aeabi_d2f>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60fb      	str	r3, [r7, #12]

  *readTemp = temp;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	601a      	str	r2, [r3, #0]
  if(Max31865_readFault(max31865) == 0)
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff fdb8 	bl	800179c <Max31865_readFault>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <Max31865_readTempC+0x260>
    isOk = true;
 8001c32:	2301      	movs	r3, #1
 8001c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  max31865->lock = 0;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	731a      	strb	r2, [r3, #12]
  return isOk;
 8001c3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3728      	adds	r7, #40	; 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	f3af 8000 	nop.w
 8001c50:	5dcc63f1 	.word	0x5dcc63f1
 8001c54:	4001c84b 	.word	0x4001c84b
 8001c58:	7dc882bb 	.word	0x7dc882bb
 8001c5c:	3f652f06 	.word	0x3f652f06
 8001c60:	c766c293 	.word	0xc766c293
 8001c64:	3ed43de0 	.word	0x3ed43de0
 8001c68:	513156ce 	.word	0x513156ce
 8001c6c:	3e5e42e2 	.word	0x3e5e42e2
 8001c70:	61e4fa3e 	.word	0x61e4fa3e
 8001c74:	3de4f327 	.word	0x3de4f327
 8001c78:	47000000 	.word	0x47000000
 8001c7c:	43d70000 	.word	0x43d70000
 8001c80:	bb801132 	.word	0xbb801132
 8001c84:	37938317 	.word	0x37938317
 8001c88:	b2c66d70 	.word	0xb2c66d70
 8001c8c:	b59b057f 	.word	0xb59b057f
 8001c90:	42c80000 	.word	0x42c80000
 8001c94:	c372051f 	.word	0xc372051f

08001c98 <Max31865_Filter>:
  *readTemp = (*readTemp * 9.0f / 5.0f) + 32.0f;
  return isOk;
}

float Max31865_Filter(float	newInput, float	lastOutput, float efectiveFactor)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ca2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ca6:	ed87 1a01 	vstr	s2, [r7, #4]
	return ((float)lastOutput*(1.0f-efectiveFactor)) + ((float)newInput*efectiveFactor) ;
 8001caa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cae:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cbe:	edd7 6a03 	vldr	s13, [r7, #12]
 8001cc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cca:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001cce:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001ce0:	4b17      	ldr	r3, [pc, #92]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001ce2:	4a18      	ldr	r2, [pc, #96]	; (8001d44 <MX_SPI1_Init+0x68>)
 8001ce4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ce6:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001ce8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cee:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d10:	2230      	movs	r2, #48	; 0x30
 8001d12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d28:	220a      	movs	r2, #10
 8001d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d2c:	4804      	ldr	r0, [pc, #16]	; (8001d40 <MX_SPI1_Init+0x64>)
 8001d2e:	f002 fb77 	bl	8004420 <HAL_SPI_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d38:	f7ff fc80 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	200003b8 	.word	0x200003b8
 8001d44:	40013000 	.word	0x40013000

08001d48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a28      	ldr	r2, [pc, #160]	; (8001e08 <HAL_SPI_MspInit+0xc0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d149      	bne.n	8001dfe <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <HAL_SPI_MspInit+0xc4>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	4a26      	ldr	r2, [pc, #152]	; (8001e0c <HAL_SPI_MspInit+0xc4>)
 8001d74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d78:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7a:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <HAL_SPI_MspInit+0xc4>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <HAL_SPI_MspInit+0xc4>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <HAL_SPI_MspInit+0xc4>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_SPI_MspInit+0xc4>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_SPI_MspInit+0xc4>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a18      	ldr	r2, [pc, #96]	; (8001e0c <HAL_SPI_MspInit+0xc4>)
 8001dac:	f043 0302 	orr.w	r3, r3, #2
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HAL_SPI_MspInit+0xc4>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001dbe:	2360      	movs	r3, #96	; 0x60
 8001dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dce:	2305      	movs	r3, #5
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480d      	ldr	r0, [pc, #52]	; (8001e10 <HAL_SPI_MspInit+0xc8>)
 8001dda:	f001 fb8d 	bl	80034f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001dde:	2320      	movs	r3, #32
 8001de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dea:	2303      	movs	r3, #3
 8001dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dee:	2305      	movs	r3, #5
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	4619      	mov	r1, r3
 8001df8:	4806      	ldr	r0, [pc, #24]	; (8001e14 <HAL_SPI_MspInit+0xcc>)
 8001dfa:	f001 fb7d 	bl	80034f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001dfe:	bf00      	nop
 8001e00:	3728      	adds	r7, #40	; 0x28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40013000 	.word	0x40013000
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40020000 	.word	0x40020000
 8001e14:	40020400 	.word	0x40020400

08001e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_MspInit+0x4c>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	4a0f      	ldr	r2, [pc, #60]	; (8001e64 <HAL_MspInit+0x4c>)
 8001e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <HAL_MspInit+0x4c>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <HAL_MspInit+0x4c>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	4a08      	ldr	r2, [pc, #32]	; (8001e64 <HAL_MspInit+0x4c>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e48:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_MspInit+0x4c>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800

08001e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <NMI_Handler+0x4>

08001e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <HardFault_Handler+0x4>

08001e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <MemManage_Handler+0x4>

08001e7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <BusFault_Handler+0x4>

08001e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <UsageFault_Handler+0x4>

08001e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb4:	f000 fa66 	bl	8002384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ec0:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <ADC_IRQHandler+0x14>)
 8001ec2:	f000 fae6 	bl	8002492 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8001ec6:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <ADC_IRQHandler+0x18>)
 8001ec8:	f000 fae3 	bl	8002492 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000078 	.word	0x20000078
 8001ed4:	200000c0 	.word	0x200000c0

08001ed8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <USART2_IRQHandler+0x10>)
 8001ede:	f002 ff63 	bl	8004da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000414 	.word	0x20000414

08001eec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ef0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ef4:	f001 fcc6 	bl	8003884 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}

08001efc <_sbrk>:
#include <stdint.h>

static uint8_t *__sbrk_heap_end = NULL;

void *_sbrk(ptrdiff_t incr)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f04:	4a14      	ldr	r2, [pc, #80]	; (8001f58 <_sbrk+0x5c>)
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <_sbrk+0x60>)
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f10:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <_sbrk+0x64>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d102      	bne.n	8001f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f18:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <_sbrk+0x64>)
 8001f1a:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <_sbrk+0x68>)
 8001f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d207      	bcs.n	8001f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f2c:	f004 f92c 	bl	8006188 <__errno>
 8001f30:	4603      	mov	r3, r0
 8001f32:	220c      	movs	r2, #12
 8001f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3a:	e009      	b.n	8001f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f3c:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <_sbrk+0x64>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f42:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <_sbrk+0x64>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <_sbrk+0x64>)
 8001f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20030000 	.word	0x20030000
 8001f5c:	00000400 	.word	0x00000400
 8001f60:	20000410 	.word	0x20000410
 8001f64:	20000af8 	.word	0x20000af8

08001f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <SystemInit+0x20>)
 8001f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <SystemInit+0x20>)
 8001f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001f92:	4a12      	ldr	r2, [pc, #72]	; (8001fdc <MX_USART2_UART_Init+0x50>)
 8001f94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_USART2_UART_Init+0x4c>)
 8001fc4:	f002 fe5e 	bl	8004c84 <HAL_UART_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fce:	f7ff fb35 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	20000414 	.word	0x20000414
 8001fdc:	40004400 	.word	0x40004400

08001fe0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <MX_USART3_UART_Init+0x4c>)
 8001fe6:	4a12      	ldr	r2, [pc, #72]	; (8002030 <MX_USART3_UART_Init+0x50>)
 8001fe8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <MX_USART3_UART_Init+0x4c>)
 8001fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ff0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <MX_USART3_UART_Init+0x4c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <MX_USART3_UART_Init+0x4c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <MX_USART3_UART_Init+0x4c>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <MX_USART3_UART_Init+0x4c>)
 8002006:	220c      	movs	r2, #12
 8002008:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <MX_USART3_UART_Init+0x4c>)
 800200c:	2200      	movs	r2, #0
 800200e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <MX_USART3_UART_Init+0x4c>)
 8002012:	2200      	movs	r2, #0
 8002014:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002016:	4805      	ldr	r0, [pc, #20]	; (800202c <MX_USART3_UART_Init+0x4c>)
 8002018:	f002 fe34 	bl	8004c84 <HAL_UART_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002022:	f7ff fb0b 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000458 	.word	0x20000458
 8002030:	40004800 	.word	0x40004800

08002034 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b08c      	sub	sp, #48	; 0x30
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 031c 	add.w	r3, r7, #28
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a45      	ldr	r2, [pc, #276]	; (8002168 <HAL_UART_MspInit+0x134>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d152      	bne.n	80020fc <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	61bb      	str	r3, [r7, #24]
 800205a:	4b44      	ldr	r3, [pc, #272]	; (800216c <HAL_UART_MspInit+0x138>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	4a43      	ldr	r2, [pc, #268]	; (800216c <HAL_UART_MspInit+0x138>)
 8002060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002064:	6413      	str	r3, [r2, #64]	; 0x40
 8002066:	4b41      	ldr	r3, [pc, #260]	; (800216c <HAL_UART_MspInit+0x138>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	61bb      	str	r3, [r7, #24]
 8002070:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	4b3d      	ldr	r3, [pc, #244]	; (800216c <HAL_UART_MspInit+0x138>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a3c      	ldr	r2, [pc, #240]	; (800216c <HAL_UART_MspInit+0x138>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b3a      	ldr	r3, [pc, #232]	; (800216c <HAL_UART_MspInit+0x138>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	4b36      	ldr	r3, [pc, #216]	; (800216c <HAL_UART_MspInit+0x138>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a35      	ldr	r2, [pc, #212]	; (800216c <HAL_UART_MspInit+0x138>)
 8002098:	f043 0308 	orr.w	r3, r3, #8
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b33      	ldr	r3, [pc, #204]	; (800216c <HAL_UART_MspInit+0x138>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020aa:	2308      	movs	r3, #8
 80020ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b6:	2303      	movs	r3, #3
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020ba:	2307      	movs	r3, #7
 80020bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020be:	f107 031c 	add.w	r3, r7, #28
 80020c2:	4619      	mov	r1, r3
 80020c4:	482a      	ldr	r0, [pc, #168]	; (8002170 <HAL_UART_MspInit+0x13c>)
 80020c6:	f001 fa17 	bl	80034f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020ca:	2320      	movs	r3, #32
 80020cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d6:	2303      	movs	r3, #3
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020da:	2307      	movs	r3, #7
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	4619      	mov	r1, r3
 80020e4:	4823      	ldr	r0, [pc, #140]	; (8002174 <HAL_UART_MspInit+0x140>)
 80020e6:	f001 fa07 	bl	80034f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	2026      	movs	r0, #38	; 0x26
 80020f0:	f000 fe11 	bl	8002d16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020f4:	2026      	movs	r0, #38	; 0x26
 80020f6:	f000 fe2a 	bl	8002d4e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80020fa:	e031      	b.n	8002160 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART3)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <HAL_UART_MspInit+0x144>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d12c      	bne.n	8002160 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b18      	ldr	r3, [pc, #96]	; (800216c <HAL_UART_MspInit+0x138>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	4a17      	ldr	r2, [pc, #92]	; (800216c <HAL_UART_MspInit+0x138>)
 8002110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
 8002116:	4b15      	ldr	r3, [pc, #84]	; (800216c <HAL_UART_MspInit+0x138>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_UART_MspInit+0x138>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a10      	ldr	r2, [pc, #64]	; (800216c <HAL_UART_MspInit+0x138>)
 800212c:	f043 0308 	orr.w	r3, r3, #8
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <HAL_UART_MspInit+0x138>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800213e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214c:	2303      	movs	r3, #3
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002150:	2307      	movs	r3, #7
 8002152:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002154:	f107 031c 	add.w	r3, r7, #28
 8002158:	4619      	mov	r1, r3
 800215a:	4806      	ldr	r0, [pc, #24]	; (8002174 <HAL_UART_MspInit+0x140>)
 800215c:	f001 f9cc 	bl	80034f8 <HAL_GPIO_Init>
}
 8002160:	bf00      	nop
 8002162:	3730      	adds	r7, #48	; 0x30
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40004400 	.word	0x40004400
 800216c:	40023800 	.word	0x40023800
 8002170:	40020000 	.word	0x40020000
 8002174:	40020c00 	.word	0x40020c00
 8002178:	40004800 	.word	0x40004800

0800217c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002180:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002182:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002186:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002188:	4b12      	ldr	r3, [pc, #72]	; (80021d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800218a:	2204      	movs	r2, #4
 800218c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800218e:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002190:	2202      	movs	r2, #2
 8002192:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002194:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800219c:	2202      	movs	r2, #2
 800219e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80021be:	4805      	ldr	r0, [pc, #20]	; (80021d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021c0:	f001 fb78 	bl	80038b4 <HAL_PCD_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80021ca:	f7ff fa37 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000049c 	.word	0x2000049c

080021d8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	; 0x28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021f8:	d13f      	bne.n	800227a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	4b21      	ldr	r3, [pc, #132]	; (8002284 <HAL_PCD_MspInit+0xac>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a20      	ldr	r2, [pc, #128]	; (8002284 <HAL_PCD_MspInit+0xac>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <HAL_PCD_MspInit+0xac>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002216:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800221a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221c:	2302      	movs	r3, #2
 800221e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002224:	2303      	movs	r3, #3
 8002226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002228:	230a      	movs	r3, #10
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4619      	mov	r1, r3
 8002232:	4815      	ldr	r0, [pc, #84]	; (8002288 <HAL_PCD_MspInit+0xb0>)
 8002234:	f001 f960 	bl	80034f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800223c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800223e:	2300      	movs	r3, #0
 8002240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	4619      	mov	r1, r3
 800224c:	480e      	ldr	r0, [pc, #56]	; (8002288 <HAL_PCD_MspInit+0xb0>)
 800224e:	f001 f953 	bl	80034f8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002252:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <HAL_PCD_MspInit+0xac>)
 8002254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002256:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <HAL_PCD_MspInit+0xac>)
 8002258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800225c:	6353      	str	r3, [r2, #52]	; 0x34
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	4b08      	ldr	r3, [pc, #32]	; (8002284 <HAL_PCD_MspInit+0xac>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	4a07      	ldr	r2, [pc, #28]	; (8002284 <HAL_PCD_MspInit+0xac>)
 8002268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800226c:	6453      	str	r3, [r2, #68]	; 0x44
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_PCD_MspInit+0xac>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800227a:	bf00      	nop
 800227c:	3728      	adds	r7, #40	; 0x28
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40023800 	.word	0x40023800
 8002288:	40020000 	.word	0x40020000

0800228c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800228c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022c4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002290:	480d      	ldr	r0, [pc, #52]	; (80022c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002292:	490e      	ldr	r1, [pc, #56]	; (80022cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002294:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002298:	e002      	b.n	80022a0 <LoopCopyDataInit>

0800229a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800229c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229e:	3304      	adds	r3, #4

080022a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a4:	d3f9      	bcc.n	800229a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a6:	4a0b      	ldr	r2, [pc, #44]	; (80022d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022a8:	4c0b      	ldr	r4, [pc, #44]	; (80022d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ac:	e001      	b.n	80022b2 <LoopFillZerobss>

080022ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b0:	3204      	adds	r2, #4

080022b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b4:	d3fb      	bcc.n	80022ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022b6:	f7ff fe57 	bl	8001f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ba:	f003 ff6b 	bl	8006194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022be:	f7ff f81d 	bl	80012fc <main>
  bx  lr    
 80022c2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80022c4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80022c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022cc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80022d0:	08006bac 	.word	0x08006bac
  ldr r2, =_sbss
 80022d4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80022d8:	20000af4 	.word	0x20000af4

080022dc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022dc:	e7fe      	b.n	80022dc <CAN1_RX0_IRQHandler>
	...

080022e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022e4:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <HAL_Init+0x40>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a0d      	ldr	r2, [pc, #52]	; (8002320 <HAL_Init+0x40>)
 80022ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_Init+0x40>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <HAL_Init+0x40>)
 80022f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <HAL_Init+0x40>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a07      	ldr	r2, [pc, #28]	; (8002320 <HAL_Init+0x40>)
 8002302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002308:	2003      	movs	r0, #3
 800230a:	f000 fcf9 	bl	8002d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800230e:	2000      	movs	r0, #0
 8002310:	f000 f808 	bl	8002324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002314:	f7ff fd80 	bl	8001e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40023c00 	.word	0x40023c00

08002324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800232c:	4b12      	ldr	r3, [pc, #72]	; (8002378 <HAL_InitTick+0x54>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b12      	ldr	r3, [pc, #72]	; (800237c <HAL_InitTick+0x58>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	4619      	mov	r1, r3
 8002336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800233a:	fbb3 f3f1 	udiv	r3, r3, r1
 800233e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002342:	4618      	mov	r0, r3
 8002344:	f000 fd11 	bl	8002d6a <HAL_SYSTICK_Config>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e00e      	b.n	8002370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b0f      	cmp	r3, #15
 8002356:	d80a      	bhi.n	800236e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002358:	2200      	movs	r2, #0
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	f04f 30ff 	mov.w	r0, #4294967295
 8002360:	f000 fcd9 	bl	8002d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002364:	4a06      	ldr	r2, [pc, #24]	; (8002380 <HAL_InitTick+0x5c>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e000      	b.n	8002370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
}
 8002370:	4618      	mov	r0, r3
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	20000000 	.word	0x20000000
 800237c:	20000008 	.word	0x20000008
 8002380:	20000004 	.word	0x20000004

08002384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_IncTick+0x20>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_IncTick+0x24>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4413      	add	r3, r2
 8002394:	4a04      	ldr	r2, [pc, #16]	; (80023a8 <HAL_IncTick+0x24>)
 8002396:	6013      	str	r3, [r2, #0]
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	20000008 	.word	0x20000008
 80023a8:	200009a8 	.word	0x200009a8

080023ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  return uwTick;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <HAL_GetTick+0x14>)
 80023b2:	681b      	ldr	r3, [r3, #0]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	200009a8 	.word	0x200009a8

080023c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023cc:	f7ff ffee 	bl	80023ac <HAL_GetTick>
 80023d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023dc:	d005      	beq.n	80023ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023de:	4b0a      	ldr	r3, [pc, #40]	; (8002408 <HAL_Delay+0x44>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4413      	add	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ea:	bf00      	nop
 80023ec:	f7ff ffde 	bl	80023ac <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d8f7      	bhi.n	80023ec <HAL_Delay+0x28>
  {
  }
}
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000008 	.word	0x20000008

0800240c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e033      	b.n	800248a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	2b00      	cmp	r3, #0
 8002428:	d109      	bne.n	800243e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7fe fc8a 	bl	8000d44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	2b00      	cmp	r3, #0
 8002448:	d118      	bne.n	800247c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002452:	f023 0302 	bic.w	r3, r3, #2
 8002456:	f043 0202 	orr.w	r2, r3, #2
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fa78 	bl	8002954 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f023 0303 	bic.w	r3, r3, #3
 8002472:	f043 0201 	orr.w	r2, r3, #1
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	641a      	str	r2, [r3, #64]	; 0x40
 800247a:	e001      	b.n	8002480 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002488:	7bfb      	ldrb	r3, [r7, #15]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b086      	sub	sp, #24
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d049      	beq.n	800255c <HAL_ADC_IRQHandler+0xca>
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d046      	beq.n	800255c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d105      	bne.n	80024e6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d12b      	bne.n	800254c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d127      	bne.n	800254c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002502:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002506:	2b00      	cmp	r3, #0
 8002508:	d006      	beq.n	8002518 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002514:	2b00      	cmp	r3, #0
 8002516:	d119      	bne.n	800254c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0220 	bic.w	r2, r2, #32
 8002526:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d105      	bne.n	800254c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	f043 0201 	orr.w	r2, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f8b0 	bl	80026b2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f06f 0212 	mvn.w	r2, #18
 800255a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 0304 	and.w	r3, r3, #4
 8002562:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d057      	beq.n	8002622 <HAL_ADC_IRQHandler+0x190>
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d054      	beq.n	8002622 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	2b00      	cmp	r3, #0
 8002582:	d105      	bne.n	8002590 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d139      	bne.n	8002612 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d006      	beq.n	80025ba <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d12b      	bne.n	8002612 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d124      	bne.n	8002612 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d11d      	bne.n	8002612 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d119      	bne.n	8002612 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025ec:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d105      	bne.n	8002612 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f043 0201 	orr.w	r2, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fa9a 	bl	8002b4c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 020c 	mvn.w	r2, #12
 8002620:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002630:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d017      	beq.n	8002668 <HAL_ADC_IRQHandler+0x1d6>
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d014      	beq.n	8002668 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b01      	cmp	r3, #1
 800264a:	d10d      	bne.n	8002668 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f834 	bl	80026c6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f06f 0201 	mvn.w	r2, #1
 8002666:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002676:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d015      	beq.n	80026aa <HAL_ADC_IRQHandler+0x218>
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d012      	beq.n	80026aa <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002688:	f043 0202 	orr.w	r2, r3, #2
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0220 	mvn.w	r2, #32
 8002698:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f81d 	bl	80026da <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0220 	mvn.w	r2, #32
 80026a8:	601a      	str	r2, [r3, #0]
  }
}
 80026aa:	bf00      	nop
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x1c>
 8002708:	2302      	movs	r3, #2
 800270a:	e113      	b.n	8002934 <HAL_ADC_ConfigChannel+0x244>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2b09      	cmp	r3, #9
 800271a:	d925      	bls.n	8002768 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68d9      	ldr	r1, [r3, #12]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	3b1e      	subs	r3, #30
 8002732:	2207      	movs	r2, #7
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43da      	mvns	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	400a      	ands	r2, r1
 8002740:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68d9      	ldr	r1, [r3, #12]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	b29b      	uxth	r3, r3
 8002752:	4618      	mov	r0, r3
 8002754:	4603      	mov	r3, r0
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4403      	add	r3, r0
 800275a:	3b1e      	subs	r3, #30
 800275c:	409a      	lsls	r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	e022      	b.n	80027ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6919      	ldr	r1, [r3, #16]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	b29b      	uxth	r3, r3
 8002774:	461a      	mov	r2, r3
 8002776:	4613      	mov	r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4413      	add	r3, r2
 800277c:	2207      	movs	r2, #7
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43da      	mvns	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	400a      	ands	r2, r1
 800278a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6919      	ldr	r1, [r3, #16]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	b29b      	uxth	r3, r3
 800279c:	4618      	mov	r0, r3
 800279e:	4603      	mov	r3, r0
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4403      	add	r3, r0
 80027a4:	409a      	lsls	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b06      	cmp	r3, #6
 80027b4:	d824      	bhi.n	8002800 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	3b05      	subs	r3, #5
 80027c8:	221f      	movs	r2, #31
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43da      	mvns	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	400a      	ands	r2, r1
 80027d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	4618      	mov	r0, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685a      	ldr	r2, [r3, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	3b05      	subs	r3, #5
 80027f2:	fa00 f203 	lsl.w	r2, r0, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	635a      	str	r2, [r3, #52]	; 0x34
 80027fe:	e04c      	b.n	800289a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b0c      	cmp	r3, #12
 8002806:	d824      	bhi.n	8002852 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	3b23      	subs	r3, #35	; 0x23
 800281a:	221f      	movs	r2, #31
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43da      	mvns	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	400a      	ands	r2, r1
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	b29b      	uxth	r3, r3
 8002836:	4618      	mov	r0, r3
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	3b23      	subs	r3, #35	; 0x23
 8002844:	fa00 f203 	lsl.w	r2, r0, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	631a      	str	r2, [r3, #48]	; 0x30
 8002850:	e023      	b.n	800289a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	3b41      	subs	r3, #65	; 0x41
 8002864:	221f      	movs	r2, #31
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	400a      	ands	r2, r1
 8002872:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	b29b      	uxth	r3, r3
 8002880:	4618      	mov	r0, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	3b41      	subs	r3, #65	; 0x41
 800288e:	fa00 f203 	lsl.w	r2, r0, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800289a:	4b29      	ldr	r3, [pc, #164]	; (8002940 <HAL_ADC_ConfigChannel+0x250>)
 800289c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a28      	ldr	r2, [pc, #160]	; (8002944 <HAL_ADC_ConfigChannel+0x254>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d10f      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x1d8>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b12      	cmp	r3, #18
 80028ae:	d10b      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <HAL_ADC_ConfigChannel+0x254>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d12b      	bne.n	800292a <HAL_ADC_ConfigChannel+0x23a>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a1c      	ldr	r2, [pc, #112]	; (8002948 <HAL_ADC_ConfigChannel+0x258>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d003      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0x1f4>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b11      	cmp	r3, #17
 80028e2:	d122      	bne.n	800292a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a11      	ldr	r2, [pc, #68]	; (8002948 <HAL_ADC_ConfigChannel+0x258>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d111      	bne.n	800292a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002906:	4b11      	ldr	r3, [pc, #68]	; (800294c <HAL_ADC_ConfigChannel+0x25c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a11      	ldr	r2, [pc, #68]	; (8002950 <HAL_ADC_ConfigChannel+0x260>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	0c9a      	lsrs	r2, r3, #18
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800291c:	e002      	b.n	8002924 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	3b01      	subs	r3, #1
 8002922:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f9      	bne.n	800291e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	40012300 	.word	0x40012300
 8002944:	40012000 	.word	0x40012000
 8002948:	10000012 	.word	0x10000012
 800294c:	20000000 	.word	0x20000000
 8002950:	431bde83 	.word	0x431bde83

08002954 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800295c:	4b79      	ldr	r3, [pc, #484]	; (8002b44 <ADC_Init+0x1f0>)
 800295e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	431a      	orrs	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002988:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	021a      	lsls	r2, r3, #8
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6899      	ldr	r1, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	4a58      	ldr	r2, [pc, #352]	; (8002b48 <ADC_Init+0x1f4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d022      	beq.n	8002a32 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6899      	ldr	r1, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6899      	ldr	r1, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	e00f      	b.n	8002a52 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0202 	bic.w	r2, r2, #2
 8002a60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6899      	ldr	r1, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7e1b      	ldrb	r3, [r3, #24]
 8002a6c:	005a      	lsls	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d01b      	beq.n	8002ab8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6859      	ldr	r1, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	035a      	lsls	r2, r3, #13
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	e007      	b.n	8002ac8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ac6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	051a      	lsls	r2, r3, #20
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002afc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6899      	ldr	r1, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b0a:	025a      	lsls	r2, r3, #9
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6899      	ldr	r1, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	029a      	lsls	r2, r3, #10
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	609a      	str	r2, [r3, #8]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	40012300 	.word	0x40012300
 8002b48:	0f000001 	.word	0x0f000001

08002b4c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b70:	4b0c      	ldr	r3, [pc, #48]	; (8002ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b92:	4a04      	ldr	r2, [pc, #16]	; (8002ba4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	60d3      	str	r3, [r2, #12]
}
 8002b98:	bf00      	nop
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	e000ed00 	.word	0xe000ed00

08002ba8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bac:	4b04      	ldr	r3, [pc, #16]	; (8002bc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	0a1b      	lsrs	r3, r3, #8
 8002bb2:	f003 0307 	and.w	r3, r3, #7
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	e000ed00 	.word	0xe000ed00

08002bc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	db0b      	blt.n	8002bee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bd6:	79fb      	ldrb	r3, [r7, #7]
 8002bd8:	f003 021f 	and.w	r2, r3, #31
 8002bdc:	4907      	ldr	r1, [pc, #28]	; (8002bfc <__NVIC_EnableIRQ+0x38>)
 8002bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be2:	095b      	lsrs	r3, r3, #5
 8002be4:	2001      	movs	r0, #1
 8002be6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	e000e100 	.word	0xe000e100

08002c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	6039      	str	r1, [r7, #0]
 8002c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	db0a      	blt.n	8002c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	490c      	ldr	r1, [pc, #48]	; (8002c4c <__NVIC_SetPriority+0x4c>)
 8002c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1e:	0112      	lsls	r2, r2, #4
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	440b      	add	r3, r1
 8002c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c28:	e00a      	b.n	8002c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	4908      	ldr	r1, [pc, #32]	; (8002c50 <__NVIC_SetPriority+0x50>)
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	3b04      	subs	r3, #4
 8002c38:	0112      	lsls	r2, r2, #4
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	761a      	strb	r2, [r3, #24]
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000e100 	.word	0xe000e100
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f1c3 0307 	rsb	r3, r3, #7
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	bf28      	it	cs
 8002c72:	2304      	movcs	r3, #4
 8002c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	2b06      	cmp	r3, #6
 8002c7c:	d902      	bls.n	8002c84 <NVIC_EncodePriority+0x30>
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3b03      	subs	r3, #3
 8002c82:	e000      	b.n	8002c86 <NVIC_EncodePriority+0x32>
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c88:	f04f 32ff 	mov.w	r2, #4294967295
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43da      	mvns	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	401a      	ands	r2, r3
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca6:	43d9      	mvns	r1, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cac:	4313      	orrs	r3, r2
         );
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3724      	adds	r7, #36	; 0x24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ccc:	d301      	bcc.n	8002cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e00f      	b.n	8002cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd2:	4a0a      	ldr	r2, [pc, #40]	; (8002cfc <SysTick_Config+0x40>)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cda:	210f      	movs	r1, #15
 8002cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce0:	f7ff ff8e 	bl	8002c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce4:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <SysTick_Config+0x40>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cea:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <SysTick_Config+0x40>)
 8002cec:	2207      	movs	r2, #7
 8002cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	e000e010 	.word	0xe000e010

08002d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ff29 	bl	8002b60 <__NVIC_SetPriorityGrouping>
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b086      	sub	sp, #24
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d28:	f7ff ff3e 	bl	8002ba8 <__NVIC_GetPriorityGrouping>
 8002d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68b9      	ldr	r1, [r7, #8]
 8002d32:	6978      	ldr	r0, [r7, #20]
 8002d34:	f7ff ff8e 	bl	8002c54 <NVIC_EncodePriority>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff5d 	bl	8002c00 <__NVIC_SetPriority>
}
 8002d46:	bf00      	nop
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	4603      	mov	r3, r0
 8002d56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff31 	bl	8002bc4 <__NVIC_EnableIRQ>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff ffa2 	bl	8002cbc <SysTick_Config>
 8002d78:	4603      	mov	r3, r0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d90:	f7ff fb0c 	bl	80023ac <HAL_GetTick>
 8002d94:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d008      	beq.n	8002db4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2280      	movs	r2, #128	; 0x80
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e052      	b.n	8002e5a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0216 	bic.w	r2, r2, #22
 8002dc2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dd2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d103      	bne.n	8002de4 <HAL_DMA_Abort+0x62>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d007      	beq.n	8002df4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0208 	bic.w	r2, r2, #8
 8002df2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0201 	bic.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e04:	e013      	b.n	8002e2e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e06:	f7ff fad1 	bl	80023ac <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b05      	cmp	r3, #5
 8002e12:	d90c      	bls.n	8002e2e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2220      	movs	r2, #32
 8002e18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e015      	b.n	8002e5a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1e4      	bne.n	8002e06 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e40:	223f      	movs	r2, #63	; 0x3f
 8002e42:	409a      	lsls	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e62:	b480      	push	{r7}
 8002e64:	b083      	sub	sp, #12
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d004      	beq.n	8002e80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2280      	movs	r2, #128	; 0x80
 8002e7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e00c      	b.n	8002e9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2205      	movs	r2, #5
 8002e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0201 	bic.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e06c      	b.n	8002f94 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d106      	bne.n	8002ed2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2223      	movs	r2, #35	; 0x23
 8002ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f7fd fff1 	bl	8000eb4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	4b31      	ldr	r3, [pc, #196]	; (8002f9c <HAL_ETH_Init+0xf4>)
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	4a30      	ldr	r2, [pc, #192]	; (8002f9c <HAL_ETH_Init+0xf4>)
 8002edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ee2:	4b2e      	ldr	r3, [pc, #184]	; (8002f9c <HAL_ETH_Init+0xf4>)
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002eee:	4b2c      	ldr	r3, [pc, #176]	; (8002fa0 <HAL_ETH_Init+0xf8>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	4a2b      	ldr	r2, [pc, #172]	; (8002fa0 <HAL_ETH_Init+0xf8>)
 8002ef4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ef8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002efa:	4b29      	ldr	r3, [pc, #164]	; (8002fa0 <HAL_ETH_Init+0xf8>)
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	4927      	ldr	r1, [pc, #156]	; (8002fa0 <HAL_ETH_Init+0xf8>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002f08:	4b25      	ldr	r3, [pc, #148]	; (8002fa0 <HAL_ETH_Init+0xf8>)
 8002f0a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f24:	f7ff fa42 	bl	80023ac <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002f2a:	e011      	b.n	8002f50 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002f2c:	f7ff fa3e 	bl	80023ac <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f3a:	d909      	bls.n	8002f50 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2204      	movs	r2, #4
 8002f40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	22e0      	movs	r2, #224	; 0xe0
 8002f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e021      	b.n	8002f94 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1e4      	bne.n	8002f2c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f958 	bl	8003218 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f9ff 	bl	800336c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 fa55 	bl	800341e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f9bd 	bl	80032fc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40013800 	.word	0x40013800

08002fa4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4b51      	ldr	r3, [pc, #324]	; (8003100 <ETH_SetMACConfig+0x15c>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	7c1b      	ldrb	r3, [r3, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <ETH_SetMACConfig+0x28>
 8002fc6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002fca:	e000      	b.n	8002fce <ETH_SetMACConfig+0x2a>
 8002fcc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	7c5b      	ldrb	r3, [r3, #17]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d102      	bne.n	8002fdc <ETH_SetMACConfig+0x38>
 8002fd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fda:	e000      	b.n	8002fde <ETH_SetMACConfig+0x3a>
 8002fdc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002fde:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002fe4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	7fdb      	ldrb	r3, [r3, #31]
 8002fea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002fec:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ff2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	7f92      	ldrb	r2, [r2, #30]
 8002ff8:	2a00      	cmp	r2, #0
 8002ffa:	d102      	bne.n	8003002 <ETH_SetMACConfig+0x5e>
 8002ffc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003000:	e000      	b.n	8003004 <ETH_SetMACConfig+0x60>
 8003002:	2200      	movs	r2, #0
                        macconf->Speed |
 8003004:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	7f1b      	ldrb	r3, [r3, #28]
 800300a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800300c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003012:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	791b      	ldrb	r3, [r3, #4]
 8003018:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800301a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003022:	2a00      	cmp	r2, #0
 8003024:	d102      	bne.n	800302c <ETH_SetMACConfig+0x88>
 8003026:	f44f 7200 	mov.w	r2, #512	; 0x200
 800302a:	e000      	b.n	800302e <ETH_SetMACConfig+0x8a>
 800302c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800302e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	7bdb      	ldrb	r3, [r3, #15]
 8003034:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003036:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800303c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003044:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003046:	4313      	orrs	r3, r2
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800305e:	2001      	movs	r0, #1
 8003060:	f7ff f9b0 	bl	80023c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	f64f 7341 	movw	r3, #65345	; 0xff41
 800307a:	4013      	ands	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003082:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800308a:	2a00      	cmp	r2, #0
 800308c:	d101      	bne.n	8003092 <ETH_SetMACConfig+0xee>
 800308e:	2280      	movs	r2, #128	; 0x80
 8003090:	e000      	b.n	8003094 <ETH_SetMACConfig+0xf0>
 8003092:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003094:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800309a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80030a2:	2a01      	cmp	r2, #1
 80030a4:	d101      	bne.n	80030aa <ETH_SetMACConfig+0x106>
 80030a6:	2208      	movs	r2, #8
 80030a8:	e000      	b.n	80030ac <ETH_SetMACConfig+0x108>
 80030aa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80030ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80030b4:	2a01      	cmp	r2, #1
 80030b6:	d101      	bne.n	80030bc <ETH_SetMACConfig+0x118>
 80030b8:	2204      	movs	r2, #4
 80030ba:	e000      	b.n	80030be <ETH_SetMACConfig+0x11a>
 80030bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80030be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80030c6:	2a01      	cmp	r2, #1
 80030c8:	d101      	bne.n	80030ce <ETH_SetMACConfig+0x12a>
 80030ca:	2202      	movs	r2, #2
 80030cc:	e000      	b.n	80030d0 <ETH_SetMACConfig+0x12c>
 80030ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80030d0:	4313      	orrs	r3, r2
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030e8:	2001      	movs	r0, #1
 80030ea:	f7ff f96b 	bl	80023c4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	619a      	str	r2, [r3, #24]
}
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	ff20810f 	.word	0xff20810f

08003104 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4b3d      	ldr	r3, [pc, #244]	; (8003214 <ETH_SetDMAConfig+0x110>)
 800311e:	4013      	ands	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	7b1b      	ldrb	r3, [r3, #12]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d102      	bne.n	8003130 <ETH_SetDMAConfig+0x2c>
 800312a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800312e:	e000      	b.n	8003132 <ETH_SetDMAConfig+0x2e>
 8003130:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	7b5b      	ldrb	r3, [r3, #13]
 8003136:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003138:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	7f52      	ldrb	r2, [r2, #29]
 800313e:	2a00      	cmp	r2, #0
 8003140:	d102      	bne.n	8003148 <ETH_SetDMAConfig+0x44>
 8003142:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003146:	e000      	b.n	800314a <ETH_SetDMAConfig+0x46>
 8003148:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800314a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	7b9b      	ldrb	r3, [r3, #14]
 8003150:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003152:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003158:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	7f1b      	ldrb	r3, [r3, #28]
 800315e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003160:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	7f9b      	ldrb	r3, [r3, #30]
 8003166:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003168:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800316e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003176:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003178:	4313      	orrs	r3, r2
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4313      	orrs	r3, r2
 800317e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003188:	461a      	mov	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800319a:	2001      	movs	r0, #1
 800319c:	f7ff f912 	bl	80023c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031a8:	461a      	mov	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	791b      	ldrb	r3, [r3, #4]
 80031b2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031b8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80031be:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80031c4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031cc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80031ce:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80031d6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80031dc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6812      	ldr	r2, [r2, #0]
 80031e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80031ea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031f8:	2001      	movs	r0, #1
 80031fa:	f7ff f8e3 	bl	80023c4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003206:	461a      	mov	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6013      	str	r3, [r2, #0]
}
 800320c:	bf00      	nop
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	f8de3f23 	.word	0xf8de3f23

08003218 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b0a6      	sub	sp, #152	; 0x98
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003226:	2301      	movs	r3, #1
 8003228:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800322c:	2300      	movs	r3, #0
 800322e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003230:	2300      	movs	r3, #0
 8003232:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800323c:	2300      	movs	r3, #0
 800323e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003242:	2301      	movs	r3, #1
 8003244:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003248:	2300      	movs	r3, #0
 800324a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800324e:	2300      	movs	r3, #0
 8003250:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003254:	2300      	movs	r3, #0
 8003256:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003258:	2300      	movs	r3, #0
 800325a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800325e:	2300      	movs	r3, #0
 8003260:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003262:	2300      	movs	r3, #0
 8003264:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003268:	2300      	movs	r3, #0
 800326a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800326e:	2300      	movs	r3, #0
 8003270:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003274:	2300      	movs	r3, #0
 8003276:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800327a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800327e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003280:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003284:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003286:	2300      	movs	r3, #0
 8003288:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800328c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003290:	4619      	mov	r1, r3
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f7ff fe86 	bl	8002fa4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003298:	2301      	movs	r3, #1
 800329a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800329c:	2301      	movs	r3, #1
 800329e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80032a0:	2301      	movs	r3, #1
 80032a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80032a6:	2301      	movs	r3, #1
 80032a8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80032b4:	2300      	movs	r3, #0
 80032b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80032ba:	2300      	movs	r3, #0
 80032bc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80032be:	2301      	movs	r3, #1
 80032c0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80032c4:	2301      	movs	r3, #1
 80032c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80032c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032cc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80032ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032d2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80032d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80032da:	2301      	movs	r3, #1
 80032dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80032e8:	f107 0308 	add.w	r3, r7, #8
 80032ec:	4619      	mov	r1, r3
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff ff08 	bl	8003104 <ETH_SetDMAConfig>
}
 80032f4:	bf00      	nop
 80032f6:	3798      	adds	r7, #152	; 0x98
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3305      	adds	r3, #5
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	3204      	adds	r2, #4
 8003314:	7812      	ldrb	r2, [r2, #0]
 8003316:	4313      	orrs	r3, r2
 8003318:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	4b11      	ldr	r3, [pc, #68]	; (8003364 <ETH_MACAddressConfig+0x68>)
 800331e:	4413      	add	r3, r2
 8003320:	461a      	mov	r2, r3
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3303      	adds	r3, #3
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	061a      	lsls	r2, r3, #24
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3302      	adds	r3, #2
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	041b      	lsls	r3, r3, #16
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3301      	adds	r3, #1
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	4313      	orrs	r3, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	7812      	ldrb	r2, [r2, #0]
 8003346:	4313      	orrs	r3, r2
 8003348:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	4b06      	ldr	r3, [pc, #24]	; (8003368 <ETH_MACAddressConfig+0x6c>)
 800334e:	4413      	add	r3, r2
 8003350:	461a      	mov	r2, r3
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	6013      	str	r3, [r2, #0]
}
 8003356:	bf00      	nop
 8003358:	371c      	adds	r7, #28
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	40028040 	.word	0x40028040
 8003368:	40028044 	.word	0x40028044

0800336c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	e03e      	b.n	80033f8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68d9      	ldr	r1, [r3, #12]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	440b      	add	r3, r1
 800338a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	2200      	movs	r2, #0
 8003396:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2200      	movs	r2, #0
 80033a2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	3206      	adds	r2, #6
 80033ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d80c      	bhi.n	80033dc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68d9      	ldr	r1, [r3, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1c5a      	adds	r2, r3, #1
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	440b      	add	r3, r1
 80033d4:	461a      	mov	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	e004      	b.n	80033e6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	461a      	mov	r2, r3
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	3301      	adds	r3, #1
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	d9bd      	bls.n	800337a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003410:	611a      	str	r2, [r3, #16]
}
 8003412:	bf00      	nop
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800341e:	b480      	push	{r7}
 8003420:	b085      	sub	sp, #20
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	e046      	b.n	80034ba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6919      	ldr	r1, [r3, #16]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	440b      	add	r3, r1
 800343c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2200      	movs	r2, #0
 8003448:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2200      	movs	r2, #0
 800344e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2200      	movs	r2, #0
 8003454:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2200      	movs	r2, #0
 800345a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2200      	movs	r2, #0
 8003460:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003468:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003470:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	3212      	adds	r2, #18
 8003486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d80c      	bhi.n	80034aa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6919      	ldr	r1, [r3, #16]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	1c5a      	adds	r2, r3, #1
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	440b      	add	r3, r1
 80034a2:	461a      	mov	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	60da      	str	r2, [r3, #12]
 80034a8:	e004      	b.n	80034b4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	461a      	mov	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	3301      	adds	r3, #1
 80034b8:	60fb      	str	r3, [r7, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d9b5      	bls.n	800342c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691a      	ldr	r2, [r3, #16]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034ea:	60da      	str	r2, [r3, #12]
}
 80034ec:	bf00      	nop
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b089      	sub	sp, #36	; 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800350a:	2300      	movs	r3, #0
 800350c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	e177      	b.n	8003804 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003514:	2201      	movs	r2, #1
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	429a      	cmp	r2, r3
 800352e:	f040 8166 	bne.w	80037fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d005      	beq.n	800354a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003546:	2b02      	cmp	r3, #2
 8003548:	d130      	bne.n	80035ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	2203      	movs	r2, #3
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003580:	2201      	movs	r2, #1
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4013      	ands	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 0201 	and.w	r2, r3, #1
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d017      	beq.n	80035e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2203      	movs	r2, #3
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d123      	bne.n	800363c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	08da      	lsrs	r2, r3, #3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3208      	adds	r2, #8
 80035fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	220f      	movs	r2, #15
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	08da      	lsrs	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3208      	adds	r2, #8
 8003636:	69b9      	ldr	r1, [r7, #24]
 8003638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	2203      	movs	r2, #3
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 0203 	and.w	r2, r3, #3
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80c0 	beq.w	80037fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	4b66      	ldr	r3, [pc, #408]	; (800381c <HAL_GPIO_Init+0x324>)
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	4a65      	ldr	r2, [pc, #404]	; (800381c <HAL_GPIO_Init+0x324>)
 8003688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800368c:	6453      	str	r3, [r2, #68]	; 0x44
 800368e:	4b63      	ldr	r3, [pc, #396]	; (800381c <HAL_GPIO_Init+0x324>)
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800369a:	4a61      	ldr	r2, [pc, #388]	; (8003820 <HAL_GPIO_Init+0x328>)
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	089b      	lsrs	r3, r3, #2
 80036a0:	3302      	adds	r3, #2
 80036a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	220f      	movs	r2, #15
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43db      	mvns	r3, r3
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	4013      	ands	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a58      	ldr	r2, [pc, #352]	; (8003824 <HAL_GPIO_Init+0x32c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d037      	beq.n	8003736 <HAL_GPIO_Init+0x23e>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a57      	ldr	r2, [pc, #348]	; (8003828 <HAL_GPIO_Init+0x330>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d031      	beq.n	8003732 <HAL_GPIO_Init+0x23a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a56      	ldr	r2, [pc, #344]	; (800382c <HAL_GPIO_Init+0x334>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d02b      	beq.n	800372e <HAL_GPIO_Init+0x236>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a55      	ldr	r2, [pc, #340]	; (8003830 <HAL_GPIO_Init+0x338>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d025      	beq.n	800372a <HAL_GPIO_Init+0x232>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a54      	ldr	r2, [pc, #336]	; (8003834 <HAL_GPIO_Init+0x33c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d01f      	beq.n	8003726 <HAL_GPIO_Init+0x22e>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a53      	ldr	r2, [pc, #332]	; (8003838 <HAL_GPIO_Init+0x340>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d019      	beq.n	8003722 <HAL_GPIO_Init+0x22a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a52      	ldr	r2, [pc, #328]	; (800383c <HAL_GPIO_Init+0x344>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <HAL_GPIO_Init+0x226>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a51      	ldr	r2, [pc, #324]	; (8003840 <HAL_GPIO_Init+0x348>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00d      	beq.n	800371a <HAL_GPIO_Init+0x222>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a50      	ldr	r2, [pc, #320]	; (8003844 <HAL_GPIO_Init+0x34c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d007      	beq.n	8003716 <HAL_GPIO_Init+0x21e>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a4f      	ldr	r2, [pc, #316]	; (8003848 <HAL_GPIO_Init+0x350>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d101      	bne.n	8003712 <HAL_GPIO_Init+0x21a>
 800370e:	2309      	movs	r3, #9
 8003710:	e012      	b.n	8003738 <HAL_GPIO_Init+0x240>
 8003712:	230a      	movs	r3, #10
 8003714:	e010      	b.n	8003738 <HAL_GPIO_Init+0x240>
 8003716:	2308      	movs	r3, #8
 8003718:	e00e      	b.n	8003738 <HAL_GPIO_Init+0x240>
 800371a:	2307      	movs	r3, #7
 800371c:	e00c      	b.n	8003738 <HAL_GPIO_Init+0x240>
 800371e:	2306      	movs	r3, #6
 8003720:	e00a      	b.n	8003738 <HAL_GPIO_Init+0x240>
 8003722:	2305      	movs	r3, #5
 8003724:	e008      	b.n	8003738 <HAL_GPIO_Init+0x240>
 8003726:	2304      	movs	r3, #4
 8003728:	e006      	b.n	8003738 <HAL_GPIO_Init+0x240>
 800372a:	2303      	movs	r3, #3
 800372c:	e004      	b.n	8003738 <HAL_GPIO_Init+0x240>
 800372e:	2302      	movs	r3, #2
 8003730:	e002      	b.n	8003738 <HAL_GPIO_Init+0x240>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_GPIO_Init+0x240>
 8003736:	2300      	movs	r3, #0
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	f002 0203 	and.w	r2, r2, #3
 800373e:	0092      	lsls	r2, r2, #2
 8003740:	4093      	lsls	r3, r2
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4313      	orrs	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003748:	4935      	ldr	r1, [pc, #212]	; (8003820 <HAL_GPIO_Init+0x328>)
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	089b      	lsrs	r3, r3, #2
 800374e:	3302      	adds	r3, #2
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003756:	4b3d      	ldr	r3, [pc, #244]	; (800384c <HAL_GPIO_Init+0x354>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	43db      	mvns	r3, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4013      	ands	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800377a:	4a34      	ldr	r2, [pc, #208]	; (800384c <HAL_GPIO_Init+0x354>)
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003780:	4b32      	ldr	r3, [pc, #200]	; (800384c <HAL_GPIO_Init+0x354>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	43db      	mvns	r3, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4013      	ands	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037a4:	4a29      	ldr	r2, [pc, #164]	; (800384c <HAL_GPIO_Init+0x354>)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037aa:	4b28      	ldr	r3, [pc, #160]	; (800384c <HAL_GPIO_Init+0x354>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	43db      	mvns	r3, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4013      	ands	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037ce:	4a1f      	ldr	r2, [pc, #124]	; (800384c <HAL_GPIO_Init+0x354>)
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037d4:	4b1d      	ldr	r3, [pc, #116]	; (800384c <HAL_GPIO_Init+0x354>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037f8:	4a14      	ldr	r2, [pc, #80]	; (800384c <HAL_GPIO_Init+0x354>)
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3301      	adds	r3, #1
 8003802:	61fb      	str	r3, [r7, #28]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	2b0f      	cmp	r3, #15
 8003808:	f67f ae84 	bls.w	8003514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	3724      	adds	r7, #36	; 0x24
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40023800 	.word	0x40023800
 8003820:	40013800 	.word	0x40013800
 8003824:	40020000 	.word	0x40020000
 8003828:	40020400 	.word	0x40020400
 800382c:	40020800 	.word	0x40020800
 8003830:	40020c00 	.word	0x40020c00
 8003834:	40021000 	.word	0x40021000
 8003838:	40021400 	.word	0x40021400
 800383c:	40021800 	.word	0x40021800
 8003840:	40021c00 	.word	0x40021c00
 8003844:	40022000 	.word	0x40022000
 8003848:	40022400 	.word	0x40022400
 800384c:	40013c00 	.word	0x40013c00

08003850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	807b      	strh	r3, [r7, #2]
 800385c:	4613      	mov	r3, r2
 800385e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003860:	787b      	ldrb	r3, [r7, #1]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003866:	887a      	ldrh	r2, [r7, #2]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800386c:	e003      	b.n	8003876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800386e:	887b      	ldrh	r3, [r7, #2]
 8003870:	041a      	lsls	r2, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	619a      	str	r2, [r3, #24]
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
	...

08003884 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800388e:	4b08      	ldr	r3, [pc, #32]	; (80038b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003890:	695a      	ldr	r2, [r3, #20]
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	4013      	ands	r3, r2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d006      	beq.n	80038a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800389a:	4a05      	ldr	r2, [pc, #20]	; (80038b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800389c:	88fb      	ldrh	r3, [r7, #6]
 800389e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fd fd98 	bl	80013d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80038a8:	bf00      	nop
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40013c00 	.word	0x40013c00

080038b4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038b6:	b08f      	sub	sp, #60	; 0x3c
 80038b8:	af0a      	add	r7, sp, #40	; 0x28
 80038ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e10f      	b.n	8003ae6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d106      	bne.n	80038e6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7fe fc79 	bl	80021d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2203      	movs	r2, #3
 80038ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d102      	bne.n	8003900 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f002 f976 	bl	8005bf6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	687e      	ldr	r6, [r7, #4]
 8003912:	466d      	mov	r5, sp
 8003914:	f106 0410 	add.w	r4, r6, #16
 8003918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800391a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800391c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800391e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003920:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003924:	e885 0003 	stmia.w	r5, {r0, r1}
 8003928:	1d33      	adds	r3, r6, #4
 800392a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800392c:	6838      	ldr	r0, [r7, #0]
 800392e:	f002 f901 	bl	8005b34 <USB_CoreInit>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0d0      	b.n	8003ae6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2100      	movs	r1, #0
 800394a:	4618      	mov	r0, r3
 800394c:	f002 f964 	bl	8005c18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003950:	2300      	movs	r3, #0
 8003952:	73fb      	strb	r3, [r7, #15]
 8003954:	e04a      	b.n	80039ec <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	333d      	adds	r3, #61	; 0x3d
 8003966:	2201      	movs	r2, #1
 8003968:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800396a:	7bfa      	ldrb	r2, [r7, #15]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4413      	add	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	333c      	adds	r3, #60	; 0x3c
 800397a:	7bfa      	ldrb	r2, [r7, #15]
 800397c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800397e:	7bfa      	ldrb	r2, [r7, #15]
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	b298      	uxth	r0, r3
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	3344      	adds	r3, #68	; 0x44
 8003992:	4602      	mov	r2, r0
 8003994:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003996:	7bfa      	ldrb	r2, [r7, #15]
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	3340      	adds	r3, #64	; 0x40
 80039a6:	2200      	movs	r2, #0
 80039a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039aa:	7bfa      	ldrb	r2, [r7, #15]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	3348      	adds	r3, #72	; 0x48
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039be:	7bfa      	ldrb	r2, [r7, #15]
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	334c      	adds	r3, #76	; 0x4c
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039d2:	7bfa      	ldrb	r2, [r7, #15]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	3354      	adds	r3, #84	; 0x54
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	3301      	adds	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
 80039ec:	7bfa      	ldrb	r2, [r7, #15]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d3af      	bcc.n	8003956 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039f6:	2300      	movs	r3, #0
 80039f8:	73fb      	strb	r3, [r7, #15]
 80039fa:	e044      	b.n	8003a86 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039fc:	7bfa      	ldrb	r2, [r7, #15]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a12:	7bfa      	ldrb	r2, [r7, #15]
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	4613      	mov	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	440b      	add	r3, r1
 8003a20:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003a24:	7bfa      	ldrb	r2, [r7, #15]
 8003a26:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a28:	7bfa      	ldrb	r2, [r7, #15]
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a3e:	7bfa      	ldrb	r2, [r7, #15]
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	4413      	add	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a54:	7bfa      	ldrb	r2, [r7, #15]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a6a:	7bfa      	ldrb	r2, [r7, #15]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4413      	add	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	3301      	adds	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
 8003a86:	7bfa      	ldrb	r2, [r7, #15]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d3b5      	bcc.n	80039fc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	603b      	str	r3, [r7, #0]
 8003a96:	687e      	ldr	r6, [r7, #4]
 8003a98:	466d      	mov	r5, sp
 8003a9a:	f106 0410 	add.w	r4, r6, #16
 8003a9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aa6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003aaa:	e885 0003 	stmia.w	r5, {r0, r1}
 8003aae:	1d33      	adds	r3, r6, #4
 8003ab0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ab2:	6838      	ldr	r0, [r7, #0]
 8003ab4:	f002 f8fc 	bl	8005cb0 <USB_DevInit>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e00d      	b.n	8003ae6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f002 fac7 	bl	8006072 <USB_DevDisconnect>

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003af0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e267      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d075      	beq.n	8003bfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b0e:	4b88      	ldr	r3, [pc, #544]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f003 030c 	and.w	r3, r3, #12
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d00c      	beq.n	8003b34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b1a:	4b85      	ldr	r3, [pc, #532]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d112      	bne.n	8003b4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b26:	4b82      	ldr	r3, [pc, #520]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b32:	d10b      	bne.n	8003b4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b34:	4b7e      	ldr	r3, [pc, #504]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d05b      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x108>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d157      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e242      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b54:	d106      	bne.n	8003b64 <HAL_RCC_OscConfig+0x74>
 8003b56:	4b76      	ldr	r3, [pc, #472]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a75      	ldr	r2, [pc, #468]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	e01d      	b.n	8003ba0 <HAL_RCC_OscConfig+0xb0>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b6c:	d10c      	bne.n	8003b88 <HAL_RCC_OscConfig+0x98>
 8003b6e:	4b70      	ldr	r3, [pc, #448]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a6f      	ldr	r2, [pc, #444]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	4b6d      	ldr	r3, [pc, #436]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a6c      	ldr	r2, [pc, #432]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	e00b      	b.n	8003ba0 <HAL_RCC_OscConfig+0xb0>
 8003b88:	4b69      	ldr	r3, [pc, #420]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a68      	ldr	r2, [pc, #416]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	4b66      	ldr	r3, [pc, #408]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a65      	ldr	r2, [pc, #404]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d013      	beq.n	8003bd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fe fc00 	bl	80023ac <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bb0:	f7fe fbfc 	bl	80023ac <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b64      	cmp	r3, #100	; 0x64
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e207      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bc2:	4b5b      	ldr	r3, [pc, #364]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0xc0>
 8003bce:	e014      	b.n	8003bfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fe fbec 	bl	80023ac <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bd8:	f7fe fbe8 	bl	80023ac <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b64      	cmp	r3, #100	; 0x64
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e1f3      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bea:	4b51      	ldr	r3, [pc, #324]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0xe8>
 8003bf6:	e000      	b.n	8003bfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d063      	beq.n	8003cce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c06:	4b4a      	ldr	r3, [pc, #296]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00b      	beq.n	8003c2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c12:	4b47      	ldr	r3, [pc, #284]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d11c      	bne.n	8003c58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c1e:	4b44      	ldr	r3, [pc, #272]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d116      	bne.n	8003c58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c2a:	4b41      	ldr	r3, [pc, #260]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <HAL_RCC_OscConfig+0x152>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d001      	beq.n	8003c42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e1c7      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c42:	4b3b      	ldr	r3, [pc, #236]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4937      	ldr	r1, [pc, #220]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c56:	e03a      	b.n	8003cce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d020      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c60:	4b34      	ldr	r3, [pc, #208]	; (8003d34 <HAL_RCC_OscConfig+0x244>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c66:	f7fe fba1 	bl	80023ac <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c6e:	f7fe fb9d 	bl	80023ac <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e1a8      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c80:	4b2b      	ldr	r3, [pc, #172]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8c:	4b28      	ldr	r3, [pc, #160]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4925      	ldr	r1, [pc, #148]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	600b      	str	r3, [r1, #0]
 8003ca0:	e015      	b.n	8003cce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ca2:	4b24      	ldr	r3, [pc, #144]	; (8003d34 <HAL_RCC_OscConfig+0x244>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fe fb80 	bl	80023ac <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cb0:	f7fe fb7c 	bl	80023ac <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e187      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cc2:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d036      	beq.n	8003d48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d016      	beq.n	8003d10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ce2:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <HAL_RCC_OscConfig+0x248>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce8:	f7fe fb60 	bl	80023ac <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cf0:	f7fe fb5c 	bl	80023ac <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e167      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d02:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <HAL_RCC_OscConfig+0x240>)
 8003d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x200>
 8003d0e:	e01b      	b.n	8003d48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d10:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <HAL_RCC_OscConfig+0x248>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d16:	f7fe fb49 	bl	80023ac <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d1c:	e00e      	b.n	8003d3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d1e:	f7fe fb45 	bl	80023ac <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d907      	bls.n	8003d3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e150      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
 8003d30:	40023800 	.word	0x40023800
 8003d34:	42470000 	.word	0x42470000
 8003d38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d3c:	4b88      	ldr	r3, [pc, #544]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1ea      	bne.n	8003d1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 8097 	beq.w	8003e84 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d56:	2300      	movs	r3, #0
 8003d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d5a:	4b81      	ldr	r3, [pc, #516]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10f      	bne.n	8003d86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d66:	2300      	movs	r3, #0
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	4b7d      	ldr	r3, [pc, #500]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	4a7c      	ldr	r2, [pc, #496]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d74:	6413      	str	r3, [r2, #64]	; 0x40
 8003d76:	4b7a      	ldr	r3, [pc, #488]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7e:	60bb      	str	r3, [r7, #8]
 8003d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d82:	2301      	movs	r3, #1
 8003d84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d86:	4b77      	ldr	r3, [pc, #476]	; (8003f64 <HAL_RCC_OscConfig+0x474>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d118      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d92:	4b74      	ldr	r3, [pc, #464]	; (8003f64 <HAL_RCC_OscConfig+0x474>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a73      	ldr	r2, [pc, #460]	; (8003f64 <HAL_RCC_OscConfig+0x474>)
 8003d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d9e:	f7fe fb05 	bl	80023ac <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da6:	f7fe fb01 	bl	80023ac <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e10c      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db8:	4b6a      	ldr	r3, [pc, #424]	; (8003f64 <HAL_RCC_OscConfig+0x474>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0f0      	beq.n	8003da6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d106      	bne.n	8003dda <HAL_RCC_OscConfig+0x2ea>
 8003dcc:	4b64      	ldr	r3, [pc, #400]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd0:	4a63      	ldr	r2, [pc, #396]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003dd8:	e01c      	b.n	8003e14 <HAL_RCC_OscConfig+0x324>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b05      	cmp	r3, #5
 8003de0:	d10c      	bne.n	8003dfc <HAL_RCC_OscConfig+0x30c>
 8003de2:	4b5f      	ldr	r3, [pc, #380]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	4a5e      	ldr	r2, [pc, #376]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003de8:	f043 0304 	orr.w	r3, r3, #4
 8003dec:	6713      	str	r3, [r2, #112]	; 0x70
 8003dee:	4b5c      	ldr	r3, [pc, #368]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	4a5b      	ldr	r2, [pc, #364]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfa:	e00b      	b.n	8003e14 <HAL_RCC_OscConfig+0x324>
 8003dfc:	4b58      	ldr	r3, [pc, #352]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	4a57      	ldr	r2, [pc, #348]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003e02:	f023 0301 	bic.w	r3, r3, #1
 8003e06:	6713      	str	r3, [r2, #112]	; 0x70
 8003e08:	4b55      	ldr	r3, [pc, #340]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0c:	4a54      	ldr	r2, [pc, #336]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003e0e:	f023 0304 	bic.w	r3, r3, #4
 8003e12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d015      	beq.n	8003e48 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1c:	f7fe fac6 	bl	80023ac <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e22:	e00a      	b.n	8003e3a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e24:	f7fe fac2 	bl	80023ac <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e0cb      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3a:	4b49      	ldr	r3, [pc, #292]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0ee      	beq.n	8003e24 <HAL_RCC_OscConfig+0x334>
 8003e46:	e014      	b.n	8003e72 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e48:	f7fe fab0 	bl	80023ac <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e50:	f7fe faac 	bl	80023ac <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e0b5      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e66:	4b3e      	ldr	r3, [pc, #248]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1ee      	bne.n	8003e50 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e72:	7dfb      	ldrb	r3, [r7, #23]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d105      	bne.n	8003e84 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e78:	4b39      	ldr	r3, [pc, #228]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	4a38      	ldr	r2, [pc, #224]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003e7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 80a1 	beq.w	8003fd0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e8e:	4b34      	ldr	r3, [pc, #208]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 030c 	and.w	r3, r3, #12
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	d05c      	beq.n	8003f54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d141      	bne.n	8003f26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea2:	4b31      	ldr	r3, [pc, #196]	; (8003f68 <HAL_RCC_OscConfig+0x478>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7fe fa80 	bl	80023ac <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eb0:	f7fe fa7c 	bl	80023ac <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e087      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec2:	4b27      	ldr	r3, [pc, #156]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69da      	ldr	r2, [r3, #28]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003edc:	019b      	lsls	r3, r3, #6
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee4:	085b      	lsrs	r3, r3, #1
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	041b      	lsls	r3, r3, #16
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef0:	061b      	lsls	r3, r3, #24
 8003ef2:	491b      	ldr	r1, [pc, #108]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <HAL_RCC_OscConfig+0x478>)
 8003efa:	2201      	movs	r2, #1
 8003efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efe:	f7fe fa55 	bl	80023ac <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f06:	f7fe fa51 	bl	80023ac <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e05c      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f18:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x416>
 8003f24:	e054      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <HAL_RCC_OscConfig+0x478>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2c:	f7fe fa3e 	bl	80023ac <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fe fa3a 	bl	80023ac <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e045      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f46:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <HAL_RCC_OscConfig+0x470>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x444>
 8003f52:	e03d      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d107      	bne.n	8003f6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e038      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
 8003f60:	40023800 	.word	0x40023800
 8003f64:	40007000 	.word	0x40007000
 8003f68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f6c:	4b1b      	ldr	r3, [pc, #108]	; (8003fdc <HAL_RCC_OscConfig+0x4ec>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d028      	beq.n	8003fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d121      	bne.n	8003fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d11a      	bne.n	8003fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d111      	bne.n	8003fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	085b      	lsrs	r3, r3, #1
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d107      	bne.n	8003fcc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e000      	b.n	8003fd2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3718      	adds	r7, #24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40023800 	.word	0x40023800

08003fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0cc      	b.n	800418e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff4:	4b68      	ldr	r3, [pc, #416]	; (8004198 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d90c      	bls.n	800401c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	4b65      	ldr	r3, [pc, #404]	; (8004198 <HAL_RCC_ClockConfig+0x1b8>)
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b63      	ldr	r3, [pc, #396]	; (8004198 <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e0b8      	b.n	800418e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d020      	beq.n	800406a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004034:	4b59      	ldr	r3, [pc, #356]	; (800419c <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4a58      	ldr	r2, [pc, #352]	; (800419c <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800403e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d005      	beq.n	8004058 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800404c:	4b53      	ldr	r3, [pc, #332]	; (800419c <HAL_RCC_ClockConfig+0x1bc>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	4a52      	ldr	r2, [pc, #328]	; (800419c <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004056:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004058:	4b50      	ldr	r3, [pc, #320]	; (800419c <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	494d      	ldr	r1, [pc, #308]	; (800419c <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	4313      	orrs	r3, r2
 8004068:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d044      	beq.n	8004100 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d107      	bne.n	800408e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407e:	4b47      	ldr	r3, [pc, #284]	; (800419c <HAL_RCC_ClockConfig+0x1bc>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d119      	bne.n	80040be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e07f      	b.n	800418e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d003      	beq.n	800409e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800409a:	2b03      	cmp	r3, #3
 800409c:	d107      	bne.n	80040ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409e:	4b3f      	ldr	r3, [pc, #252]	; (800419c <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d109      	bne.n	80040be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e06f      	b.n	800418e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ae:	4b3b      	ldr	r3, [pc, #236]	; (800419c <HAL_RCC_ClockConfig+0x1bc>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e067      	b.n	800418e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040be:	4b37      	ldr	r3, [pc, #220]	; (800419c <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f023 0203 	bic.w	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	4934      	ldr	r1, [pc, #208]	; (800419c <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040d0:	f7fe f96c 	bl	80023ac <HAL_GetTick>
 80040d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d6:	e00a      	b.n	80040ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d8:	f7fe f968 	bl	80023ac <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e04f      	b.n	800418e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ee:	4b2b      	ldr	r3, [pc, #172]	; (800419c <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 020c 	and.w	r2, r3, #12
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d1eb      	bne.n	80040d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004100:	4b25      	ldr	r3, [pc, #148]	; (8004198 <HAL_RCC_ClockConfig+0x1b8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d20c      	bcs.n	8004128 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410e:	4b22      	ldr	r3, [pc, #136]	; (8004198 <HAL_RCC_ClockConfig+0x1b8>)
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004116:	4b20      	ldr	r3, [pc, #128]	; (8004198 <HAL_RCC_ClockConfig+0x1b8>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d001      	beq.n	8004128 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e032      	b.n	800418e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0304 	and.w	r3, r3, #4
 8004130:	2b00      	cmp	r3, #0
 8004132:	d008      	beq.n	8004146 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004134:	4b19      	ldr	r3, [pc, #100]	; (800419c <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	4916      	ldr	r1, [pc, #88]	; (800419c <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	4313      	orrs	r3, r2
 8004144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d009      	beq.n	8004166 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004152:	4b12      	ldr	r3, [pc, #72]	; (800419c <HAL_RCC_ClockConfig+0x1bc>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	490e      	ldr	r1, [pc, #56]	; (800419c <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	4313      	orrs	r3, r2
 8004164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004166:	f000 f821 	bl	80041ac <HAL_RCC_GetSysClockFreq>
 800416a:	4602      	mov	r2, r0
 800416c:	4b0b      	ldr	r3, [pc, #44]	; (800419c <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	490a      	ldr	r1, [pc, #40]	; (80041a0 <HAL_RCC_ClockConfig+0x1c0>)
 8004178:	5ccb      	ldrb	r3, [r1, r3]
 800417a:	fa22 f303 	lsr.w	r3, r2, r3
 800417e:	4a09      	ldr	r2, [pc, #36]	; (80041a4 <HAL_RCC_ClockConfig+0x1c4>)
 8004180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004182:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <HAL_RCC_ClockConfig+0x1c8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fe f8cc 	bl	8002324 <HAL_InitTick>

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	40023c00 	.word	0x40023c00
 800419c:	40023800 	.word	0x40023800
 80041a0:	08006b50 	.word	0x08006b50
 80041a4:	20000000 	.word	0x20000000
 80041a8:	20000004 	.word	0x20000004

080041ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b0:	b094      	sub	sp, #80	; 0x50
 80041b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	647b      	str	r3, [r7, #68]	; 0x44
 80041b8:	2300      	movs	r3, #0
 80041ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041bc:	2300      	movs	r3, #0
 80041be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041c4:	4b79      	ldr	r3, [pc, #484]	; (80043ac <HAL_RCC_GetSysClockFreq+0x200>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f003 030c 	and.w	r3, r3, #12
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d00d      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x40>
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	f200 80e1 	bhi.w	8004398 <HAL_RCC_GetSysClockFreq+0x1ec>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d002      	beq.n	80041e0 <HAL_RCC_GetSysClockFreq+0x34>
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d003      	beq.n	80041e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80041de:	e0db      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041e0:	4b73      	ldr	r3, [pc, #460]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80041e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80041e4:	e0db      	b.n	800439e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041e6:	4b73      	ldr	r3, [pc, #460]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80041e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041ea:	e0d8      	b.n	800439e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041ec:	4b6f      	ldr	r3, [pc, #444]	; (80043ac <HAL_RCC_GetSysClockFreq+0x200>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041f6:	4b6d      	ldr	r3, [pc, #436]	; (80043ac <HAL_RCC_GetSysClockFreq+0x200>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d063      	beq.n	80042ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004202:	4b6a      	ldr	r3, [pc, #424]	; (80043ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	099b      	lsrs	r3, r3, #6
 8004208:	2200      	movs	r2, #0
 800420a:	63bb      	str	r3, [r7, #56]	; 0x38
 800420c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800420e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004210:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004214:	633b      	str	r3, [r7, #48]	; 0x30
 8004216:	2300      	movs	r3, #0
 8004218:	637b      	str	r3, [r7, #52]	; 0x34
 800421a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800421e:	4622      	mov	r2, r4
 8004220:	462b      	mov	r3, r5
 8004222:	f04f 0000 	mov.w	r0, #0
 8004226:	f04f 0100 	mov.w	r1, #0
 800422a:	0159      	lsls	r1, r3, #5
 800422c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004230:	0150      	lsls	r0, r2, #5
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4621      	mov	r1, r4
 8004238:	1a51      	subs	r1, r2, r1
 800423a:	6139      	str	r1, [r7, #16]
 800423c:	4629      	mov	r1, r5
 800423e:	eb63 0301 	sbc.w	r3, r3, r1
 8004242:	617b      	str	r3, [r7, #20]
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004250:	4659      	mov	r1, fp
 8004252:	018b      	lsls	r3, r1, #6
 8004254:	4651      	mov	r1, sl
 8004256:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800425a:	4651      	mov	r1, sl
 800425c:	018a      	lsls	r2, r1, #6
 800425e:	4651      	mov	r1, sl
 8004260:	ebb2 0801 	subs.w	r8, r2, r1
 8004264:	4659      	mov	r1, fp
 8004266:	eb63 0901 	sbc.w	r9, r3, r1
 800426a:	f04f 0200 	mov.w	r2, #0
 800426e:	f04f 0300 	mov.w	r3, #0
 8004272:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004276:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800427a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800427e:	4690      	mov	r8, r2
 8004280:	4699      	mov	r9, r3
 8004282:	4623      	mov	r3, r4
 8004284:	eb18 0303 	adds.w	r3, r8, r3
 8004288:	60bb      	str	r3, [r7, #8]
 800428a:	462b      	mov	r3, r5
 800428c:	eb49 0303 	adc.w	r3, r9, r3
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800429e:	4629      	mov	r1, r5
 80042a0:	024b      	lsls	r3, r1, #9
 80042a2:	4621      	mov	r1, r4
 80042a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042a8:	4621      	mov	r1, r4
 80042aa:	024a      	lsls	r2, r1, #9
 80042ac:	4610      	mov	r0, r2
 80042ae:	4619      	mov	r1, r3
 80042b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b2:	2200      	movs	r2, #0
 80042b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042bc:	f7fc fb1e 	bl	80008fc <__aeabi_uldivmod>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4613      	mov	r3, r2
 80042c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c8:	e058      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ca:	4b38      	ldr	r3, [pc, #224]	; (80043ac <HAL_RCC_GetSysClockFreq+0x200>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	099b      	lsrs	r3, r3, #6
 80042d0:	2200      	movs	r2, #0
 80042d2:	4618      	mov	r0, r3
 80042d4:	4611      	mov	r1, r2
 80042d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80042da:	623b      	str	r3, [r7, #32]
 80042dc:	2300      	movs	r3, #0
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
 80042e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80042e4:	4642      	mov	r2, r8
 80042e6:	464b      	mov	r3, r9
 80042e8:	f04f 0000 	mov.w	r0, #0
 80042ec:	f04f 0100 	mov.w	r1, #0
 80042f0:	0159      	lsls	r1, r3, #5
 80042f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042f6:	0150      	lsls	r0, r2, #5
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4641      	mov	r1, r8
 80042fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004302:	4649      	mov	r1, r9
 8004304:	eb63 0b01 	sbc.w	fp, r3, r1
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004314:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004318:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800431c:	ebb2 040a 	subs.w	r4, r2, sl
 8004320:	eb63 050b 	sbc.w	r5, r3, fp
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	00eb      	lsls	r3, r5, #3
 800432e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004332:	00e2      	lsls	r2, r4, #3
 8004334:	4614      	mov	r4, r2
 8004336:	461d      	mov	r5, r3
 8004338:	4643      	mov	r3, r8
 800433a:	18e3      	adds	r3, r4, r3
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	464b      	mov	r3, r9
 8004340:	eb45 0303 	adc.w	r3, r5, r3
 8004344:	607b      	str	r3, [r7, #4]
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004352:	4629      	mov	r1, r5
 8004354:	028b      	lsls	r3, r1, #10
 8004356:	4621      	mov	r1, r4
 8004358:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800435c:	4621      	mov	r1, r4
 800435e:	028a      	lsls	r2, r1, #10
 8004360:	4610      	mov	r0, r2
 8004362:	4619      	mov	r1, r3
 8004364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004366:	2200      	movs	r2, #0
 8004368:	61bb      	str	r3, [r7, #24]
 800436a:	61fa      	str	r2, [r7, #28]
 800436c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004370:	f7fc fac4 	bl	80008fc <__aeabi_uldivmod>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	4613      	mov	r3, r2
 800437a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800437c:	4b0b      	ldr	r3, [pc, #44]	; (80043ac <HAL_RCC_GetSysClockFreq+0x200>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	0c1b      	lsrs	r3, r3, #16
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	3301      	adds	r3, #1
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800438c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800438e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004390:	fbb2 f3f3 	udiv	r3, r2, r3
 8004394:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004396:	e002      	b.n	800439e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004398:	4b05      	ldr	r3, [pc, #20]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800439a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800439c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800439e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3750      	adds	r7, #80	; 0x50
 80043a4:	46bd      	mov	sp, r7
 80043a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043aa:	bf00      	nop
 80043ac:	40023800 	.word	0x40023800
 80043b0:	00f42400 	.word	0x00f42400
 80043b4:	007a1200 	.word	0x007a1200

080043b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043bc:	4b03      	ldr	r3, [pc, #12]	; (80043cc <HAL_RCC_GetHCLKFreq+0x14>)
 80043be:	681b      	ldr	r3, [r3, #0]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	20000000 	.word	0x20000000

080043d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043d4:	f7ff fff0 	bl	80043b8 <HAL_RCC_GetHCLKFreq>
 80043d8:	4602      	mov	r2, r0
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	0a9b      	lsrs	r3, r3, #10
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	4903      	ldr	r1, [pc, #12]	; (80043f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043e6:	5ccb      	ldrb	r3, [r1, r3]
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40023800 	.word	0x40023800
 80043f4:	08006b60 	.word	0x08006b60

080043f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043fc:	f7ff ffdc 	bl	80043b8 <HAL_RCC_GetHCLKFreq>
 8004400:	4602      	mov	r2, r0
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	0b5b      	lsrs	r3, r3, #13
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	4903      	ldr	r1, [pc, #12]	; (800441c <HAL_RCC_GetPCLK2Freq+0x24>)
 800440e:	5ccb      	ldrb	r3, [r1, r3]
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004414:	4618      	mov	r0, r3
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40023800 	.word	0x40023800
 800441c:	08006b60 	.word	0x08006b60

08004420 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e07b      	b.n	800452a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	2b00      	cmp	r3, #0
 8004438:	d108      	bne.n	800444c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004442:	d009      	beq.n	8004458 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	61da      	str	r2, [r3, #28]
 800444a:	e005      	b.n	8004458 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fd fc68 	bl	8001d48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800448e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044dc:	ea42 0103 	orr.w	r1, r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	0c1b      	lsrs	r3, r3, #16
 80044f6:	f003 0104 	and.w	r1, r3, #4
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	f003 0210 	and.w	r2, r3, #16
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69da      	ldr	r2, [r3, #28]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004518:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b088      	sub	sp, #32
 8004536:	af00      	add	r7, sp, #0
 8004538:	60f8      	str	r0, [r7, #12]
 800453a:	60b9      	str	r1, [r7, #8]
 800453c:	603b      	str	r3, [r7, #0]
 800453e:	4613      	mov	r3, r2
 8004540:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_SPI_Transmit+0x22>
 8004550:	2302      	movs	r3, #2
 8004552:	e126      	b.n	80047a2 <HAL_SPI_Transmit+0x270>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800455c:	f7fd ff26 	bl	80023ac <HAL_GetTick>
 8004560:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004562:	88fb      	ldrh	r3, [r7, #6]
 8004564:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b01      	cmp	r3, #1
 8004570:	d002      	beq.n	8004578 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004572:	2302      	movs	r3, #2
 8004574:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004576:	e10b      	b.n	8004790 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <HAL_SPI_Transmit+0x52>
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d102      	bne.n	800458a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004588:	e102      	b.n	8004790 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2203      	movs	r2, #3
 800458e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	88fa      	ldrh	r2, [r7, #6]
 80045a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	88fa      	ldrh	r2, [r7, #6]
 80045a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d0:	d10f      	bne.n	80045f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fc:	2b40      	cmp	r3, #64	; 0x40
 80045fe:	d007      	beq.n	8004610 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800460e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004618:	d14b      	bne.n	80046b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <HAL_SPI_Transmit+0xf6>
 8004622:	8afb      	ldrh	r3, [r7, #22]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d13e      	bne.n	80046a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	881a      	ldrh	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	1c9a      	adds	r2, r3, #2
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004642:	b29b      	uxth	r3, r3
 8004644:	3b01      	subs	r3, #1
 8004646:	b29a      	uxth	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800464c:	e02b      	b.n	80046a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b02      	cmp	r3, #2
 800465a:	d112      	bne.n	8004682 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004660:	881a      	ldrh	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466c:	1c9a      	adds	r2, r3, #2
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004680:	e011      	b.n	80046a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004682:	f7fd fe93 	bl	80023ac <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	683a      	ldr	r2, [r7, #0]
 800468e:	429a      	cmp	r2, r3
 8004690:	d803      	bhi.n	800469a <HAL_SPI_Transmit+0x168>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004698:	d102      	bne.n	80046a0 <HAL_SPI_Transmit+0x16e>
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d102      	bne.n	80046a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046a4:	e074      	b.n	8004790 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1ce      	bne.n	800464e <HAL_SPI_Transmit+0x11c>
 80046b0:	e04c      	b.n	800474c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_SPI_Transmit+0x18e>
 80046ba:	8afb      	ldrh	r3, [r7, #22]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d140      	bne.n	8004742 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	330c      	adds	r3, #12
 80046ca:	7812      	ldrb	r2, [r2, #0]
 80046cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046e6:	e02c      	b.n	8004742 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d113      	bne.n	800471e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	330c      	adds	r3, #12
 8004700:	7812      	ldrb	r2, [r2, #0]
 8004702:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	86da      	strh	r2, [r3, #54]	; 0x36
 800471c:	e011      	b.n	8004742 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800471e:	f7fd fe45 	bl	80023ac <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	429a      	cmp	r2, r3
 800472c:	d803      	bhi.n	8004736 <HAL_SPI_Transmit+0x204>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004734:	d102      	bne.n	800473c <HAL_SPI_Transmit+0x20a>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d102      	bne.n	8004742 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004740:	e026      	b.n	8004790 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004746:	b29b      	uxth	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1cd      	bne.n	80046e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	6839      	ldr	r1, [r7, #0]
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 fa55 	bl	8004c00 <SPI_EndRxTxTransaction>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2220      	movs	r2, #32
 8004760:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10a      	bne.n	8004780 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800476a:	2300      	movs	r3, #0
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	613b      	str	r3, [r7, #16]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	77fb      	strb	r3, [r7, #31]
 800478c:	e000      	b.n	8004790 <HAL_SPI_Transmit+0x25e>
  }

error:
 800478e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b08c      	sub	sp, #48	; 0x30
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047b8:	2301      	movs	r3, #1
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_SPI_TransmitReceive+0x26>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e18a      	b.n	8004ae6 <HAL_SPI_TransmitReceive+0x33c>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047d8:	f7fd fde8 	bl	80023ac <HAL_GetTick>
 80047dc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80047ee:	887b      	ldrh	r3, [r7, #2]
 80047f0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d00f      	beq.n	800481a <HAL_SPI_TransmitReceive+0x70>
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004800:	d107      	bne.n	8004812 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d103      	bne.n	8004812 <HAL_SPI_TransmitReceive+0x68>
 800480a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800480e:	2b04      	cmp	r3, #4
 8004810:	d003      	beq.n	800481a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004812:	2302      	movs	r3, #2
 8004814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004818:	e15b      	b.n	8004ad2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <HAL_SPI_TransmitReceive+0x82>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_SPI_TransmitReceive+0x82>
 8004826:	887b      	ldrh	r3, [r7, #2]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d103      	bne.n	8004834 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004832:	e14e      	b.n	8004ad2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b04      	cmp	r3, #4
 800483e:	d003      	beq.n	8004848 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2205      	movs	r2, #5
 8004844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2200      	movs	r2, #0
 800484c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	887a      	ldrh	r2, [r7, #2]
 8004858:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	887a      	ldrh	r2, [r7, #2]
 800485e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	887a      	ldrh	r2, [r7, #2]
 800486a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	887a      	ldrh	r2, [r7, #2]
 8004870:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004888:	2b40      	cmp	r3, #64	; 0x40
 800488a:	d007      	beq.n	800489c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800489a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a4:	d178      	bne.n	8004998 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <HAL_SPI_TransmitReceive+0x10a>
 80048ae:	8b7b      	ldrh	r3, [r7, #26]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d166      	bne.n	8004982 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	881a      	ldrh	r2, [r3, #0]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	1c9a      	adds	r2, r3, #2
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048d8:	e053      	b.n	8004982 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d11b      	bne.n	8004920 <HAL_SPI_TransmitReceive+0x176>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d016      	beq.n	8004920 <HAL_SPI_TransmitReceive+0x176>
 80048f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d113      	bne.n	8004920 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	881a      	ldrh	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004908:	1c9a      	adds	r2, r3, #2
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b01      	cmp	r3, #1
 800492c:	d119      	bne.n	8004962 <HAL_SPI_TransmitReceive+0x1b8>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004932:	b29b      	uxth	r3, r3
 8004934:	2b00      	cmp	r3, #0
 8004936:	d014      	beq.n	8004962 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004942:	b292      	uxth	r2, r2
 8004944:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	1c9a      	adds	r2, r3, #2
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800495e:	2301      	movs	r3, #1
 8004960:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004962:	f7fd fd23 	bl	80023ac <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800496e:	429a      	cmp	r2, r3
 8004970:	d807      	bhi.n	8004982 <HAL_SPI_TransmitReceive+0x1d8>
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004978:	d003      	beq.n	8004982 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004980:	e0a7      	b.n	8004ad2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1a6      	bne.n	80048da <HAL_SPI_TransmitReceive+0x130>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1a1      	bne.n	80048da <HAL_SPI_TransmitReceive+0x130>
 8004996:	e07c      	b.n	8004a92 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <HAL_SPI_TransmitReceive+0x1fc>
 80049a0:	8b7b      	ldrh	r3, [r7, #26]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d16b      	bne.n	8004a7e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	330c      	adds	r3, #12
 80049b0:	7812      	ldrb	r2, [r2, #0]
 80049b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049cc:	e057      	b.n	8004a7e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d11c      	bne.n	8004a16 <HAL_SPI_TransmitReceive+0x26c>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d017      	beq.n	8004a16 <HAL_SPI_TransmitReceive+0x26c>
 80049e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d114      	bne.n	8004a16 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	330c      	adds	r3, #12
 80049f6:	7812      	ldrb	r2, [r2, #0]
 80049f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a12:	2300      	movs	r3, #0
 8004a14:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d119      	bne.n	8004a58 <HAL_SPI_TransmitReceive+0x2ae>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d014      	beq.n	8004a58 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	b2d2      	uxtb	r2, r2
 8004a3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29a      	uxth	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a54:	2301      	movs	r3, #1
 8004a56:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a58:	f7fd fca8 	bl	80023ac <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d803      	bhi.n	8004a70 <HAL_SPI_TransmitReceive+0x2c6>
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6e:	d102      	bne.n	8004a76 <HAL_SPI_TransmitReceive+0x2cc>
 8004a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d103      	bne.n	8004a7e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a7c:	e029      	b.n	8004ad2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1a2      	bne.n	80049ce <HAL_SPI_TransmitReceive+0x224>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d19d      	bne.n	80049ce <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 f8b2 	bl	8004c00 <SPI_EndRxTxTransaction>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d006      	beq.n	8004ab0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004aae:	e010      	b.n	8004ad2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10b      	bne.n	8004ad0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	e000      	b.n	8004ad2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ad0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ae2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3730      	adds	r7, #48	; 0x30
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b088      	sub	sp, #32
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	4613      	mov	r3, r2
 8004afe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b00:	f7fd fc54 	bl	80023ac <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b10:	f7fd fc4c 	bl	80023ac <HAL_GetTick>
 8004b14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b16:	4b39      	ldr	r3, [pc, #228]	; (8004bfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	015b      	lsls	r3, r3, #5
 8004b1c:	0d1b      	lsrs	r3, r3, #20
 8004b1e:	69fa      	ldr	r2, [r7, #28]
 8004b20:	fb02 f303 	mul.w	r3, r2, r3
 8004b24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b26:	e054      	b.n	8004bd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b2e:	d050      	beq.n	8004bd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b30:	f7fd fc3c 	bl	80023ac <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	69fa      	ldr	r2, [r7, #28]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d902      	bls.n	8004b46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d13d      	bne.n	8004bc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b5e:	d111      	bne.n	8004b84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b68:	d004      	beq.n	8004b74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b72:	d107      	bne.n	8004b84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b8c:	d10f      	bne.n	8004bae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e017      	b.n	8004bf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d101      	bne.n	8004bcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	bf0c      	ite	eq
 8004be2:	2301      	moveq	r3, #1
 8004be4:	2300      	movne	r3, #0
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	461a      	mov	r2, r3
 8004bea:	79fb      	ldrb	r3, [r7, #7]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d19b      	bne.n	8004b28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3720      	adds	r7, #32
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000000 	.word	0x20000000

08004c00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c0c:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <SPI_EndRxTxTransaction+0x7c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a1b      	ldr	r2, [pc, #108]	; (8004c80 <SPI_EndRxTxTransaction+0x80>)
 8004c12:	fba2 2303 	umull	r2, r3, r2, r3
 8004c16:	0d5b      	lsrs	r3, r3, #21
 8004c18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c1c:	fb02 f303 	mul.w	r3, r2, r3
 8004c20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c2a:	d112      	bne.n	8004c52 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2200      	movs	r2, #0
 8004c34:	2180      	movs	r1, #128	; 0x80
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff ff5a 	bl	8004af0 <SPI_WaitFlagStateUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d016      	beq.n	8004c70 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c46:	f043 0220 	orr.w	r2, r3, #32
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e00f      	b.n	8004c72 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c68:	2b80      	cmp	r3, #128	; 0x80
 8004c6a:	d0f2      	beq.n	8004c52 <SPI_EndRxTxTransaction+0x52>
 8004c6c:	e000      	b.n	8004c70 <SPI_EndRxTxTransaction+0x70>
        break;
 8004c6e:	bf00      	nop
  }

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000000 	.word	0x20000000
 8004c80:	165e9f81 	.word	0x165e9f81

08004c84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e03f      	b.n	8004d16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d106      	bne.n	8004cb0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fd f9c2 	bl	8002034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2224      	movs	r2, #36	; 0x24
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 fcbf 	bl	800564c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cdc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695a      	ldr	r2, [r3, #20]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68da      	ldr	r2, [r3, #12]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b085      	sub	sp, #20
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	d130      	bne.n	8004d9a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <HAL_UART_Transmit_IT+0x26>
 8004d3e:	88fb      	ldrh	r3, [r7, #6]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e029      	b.n	8004d9c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d101      	bne.n	8004d56 <HAL_UART_Transmit_IT+0x38>
 8004d52:	2302      	movs	r3, #2
 8004d54:	e022      	b.n	8004d9c <HAL_UART_Transmit_IT+0x7e>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	88fa      	ldrh	r2, [r7, #6]
 8004d68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	88fa      	ldrh	r2, [r7, #6]
 8004d6e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2221      	movs	r2, #33	; 0x21
 8004d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d94:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004d96:	2300      	movs	r3, #0
 8004d98:	e000      	b.n	8004d9c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004d9a:	2302      	movs	r3, #2
  }
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b0ba      	sub	sp, #232	; 0xe8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10f      	bne.n	8004e0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d009      	beq.n	8004e0e <HAL_UART_IRQHandler+0x66>
 8004dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fb65 	bl	80054d6 <UART_Receive_IT>
      return;
 8004e0c:	e256      	b.n	80052bc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 80de 	beq.w	8004fd4 <HAL_UART_IRQHandler+0x22c>
 8004e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d106      	bne.n	8004e32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 80d1 	beq.w	8004fd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00b      	beq.n	8004e56 <HAL_UART_IRQHandler+0xae>
 8004e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	f043 0201 	orr.w	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <HAL_UART_IRQHandler+0xd2>
 8004e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f043 0202 	orr.w	r2, r3, #2
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00b      	beq.n	8004e9e <HAL_UART_IRQHandler+0xf6>
 8004e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f043 0204 	orr.w	r2, r3, #4
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d011      	beq.n	8004ece <HAL_UART_IRQHandler+0x126>
 8004eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d105      	bne.n	8004ec2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f043 0208 	orr.w	r2, r3, #8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 81ed 	beq.w	80052b2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x14e>
 8004ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 faf0 	bl	80054d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b40      	cmp	r3, #64	; 0x40
 8004f02:	bf0c      	ite	eq
 8004f04:	2301      	moveq	r3, #1
 8004f06:	2300      	movne	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d103      	bne.n	8004f22 <HAL_UART_IRQHandler+0x17a>
 8004f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d04f      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f9f8 	bl	8005318 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f32:	2b40      	cmp	r3, #64	; 0x40
 8004f34:	d141      	bne.n	8004fba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3314      	adds	r3, #20
 8004f3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3314      	adds	r3, #20
 8004f5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1d9      	bne.n	8004f36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d013      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	4a7d      	ldr	r2, [pc, #500]	; (8005184 <HAL_UART_IRQHandler+0x3dc>)
 8004f90:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fd ff63 	bl	8002e62 <HAL_DMA_Abort_IT>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d016      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fac:	4610      	mov	r0, r2
 8004fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb0:	e00e      	b.n	8004fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f99a 	bl	80052ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb8:	e00a      	b.n	8004fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f996 	bl	80052ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc0:	e006      	b.n	8004fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f992 	bl	80052ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004fce:	e170      	b.n	80052b2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd0:	bf00      	nop
    return;
 8004fd2:	e16e      	b.n	80052b2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	f040 814a 	bne.w	8005272 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 8143 	beq.w	8005272 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff0:	f003 0310 	and.w	r3, r3, #16
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 813c 	beq.w	8005272 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	60bb      	str	r3, [r7, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	60bb      	str	r3, [r7, #8]
 800500e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b40      	cmp	r3, #64	; 0x40
 800501c:	f040 80b4 	bne.w	8005188 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800502c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 8140 	beq.w	80052b6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800503a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800503e:	429a      	cmp	r2, r3
 8005040:	f080 8139 	bcs.w	80052b6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800504a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005056:	f000 8088 	beq.w	800516a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	330c      	adds	r3, #12
 8005060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005064:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005070:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005078:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	330c      	adds	r3, #12
 8005082:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005086:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800508a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005092:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005096:	e841 2300 	strex	r3, r2, [r1]
 800509a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800509e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1d9      	bne.n	800505a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3314      	adds	r3, #20
 80050ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050b0:	e853 3f00 	ldrex	r3, [r3]
 80050b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80050b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050b8:	f023 0301 	bic.w	r3, r3, #1
 80050bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3314      	adds	r3, #20
 80050c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80050ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80050ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80050d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050d6:	e841 2300 	strex	r3, r2, [r1]
 80050da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80050dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1e1      	bne.n	80050a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3314      	adds	r3, #20
 80050e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050ec:	e853 3f00 	ldrex	r3, [r3]
 80050f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3314      	adds	r3, #20
 8005102:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005106:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005108:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800510c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800510e:	e841 2300 	strex	r3, r2, [r1]
 8005112:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1e3      	bne.n	80050e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	330c      	adds	r3, #12
 800512e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005132:	e853 3f00 	ldrex	r3, [r3]
 8005136:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800513a:	f023 0310 	bic.w	r3, r3, #16
 800513e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	330c      	adds	r3, #12
 8005148:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800514c:	65ba      	str	r2, [r7, #88]	; 0x58
 800514e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005152:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800515a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e3      	bne.n	8005128 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	4618      	mov	r0, r3
 8005166:	f7fd fe0c 	bl	8002d82 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005172:	b29b      	uxth	r3, r3
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	b29b      	uxth	r3, r3
 8005178:	4619      	mov	r1, r3
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f8c0 	bl	8005300 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005180:	e099      	b.n	80052b6 <HAL_UART_IRQHandler+0x50e>
 8005182:	bf00      	nop
 8005184:	080053df 	.word	0x080053df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005190:	b29b      	uxth	r3, r3
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 808b 	beq.w	80052ba <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80051a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f000 8086 	beq.w	80052ba <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	330c      	adds	r3, #12
 80051b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	330c      	adds	r3, #12
 80051ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80051d2:	647a      	str	r2, [r7, #68]	; 0x44
 80051d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051da:	e841 2300 	strex	r3, r2, [r1]
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1e3      	bne.n	80051ae <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3314      	adds	r3, #20
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	623b      	str	r3, [r7, #32]
   return(result);
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	f023 0301 	bic.w	r3, r3, #1
 80051fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3314      	adds	r3, #20
 8005206:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800520a:	633a      	str	r2, [r7, #48]	; 0x30
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005212:	e841 2300 	strex	r3, r2, [r1]
 8005216:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1e3      	bne.n	80051e6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	330c      	adds	r3, #12
 8005232:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	e853 3f00 	ldrex	r3, [r3]
 800523a:	60fb      	str	r3, [r7, #12]
   return(result);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0310 	bic.w	r3, r3, #16
 8005242:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	330c      	adds	r3, #12
 800524c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005250:	61fa      	str	r2, [r7, #28]
 8005252:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005254:	69b9      	ldr	r1, [r7, #24]
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	e841 2300 	strex	r3, r2, [r1]
 800525c:	617b      	str	r3, [r7, #20]
   return(result);
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1e3      	bne.n	800522c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005268:	4619      	mov	r1, r3
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f848 	bl	8005300 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005270:	e023      	b.n	80052ba <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <HAL_UART_IRQHandler+0x4ea>
 800527e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f8bb 	bl	8005406 <UART_Transmit_IT>
    return;
 8005290:	e014      	b.n	80052bc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00e      	beq.n	80052bc <HAL_UART_IRQHandler+0x514>
 800529e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d008      	beq.n	80052bc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f8fb 	bl	80054a6 <UART_EndTransmit_IT>
    return;
 80052b0:	e004      	b.n	80052bc <HAL_UART_IRQHandler+0x514>
    return;
 80052b2:	bf00      	nop
 80052b4:	e002      	b.n	80052bc <HAL_UART_IRQHandler+0x514>
      return;
 80052b6:	bf00      	nop
 80052b8:	e000      	b.n	80052bc <HAL_UART_IRQHandler+0x514>
      return;
 80052ba:	bf00      	nop
  }
}
 80052bc:	37e8      	adds	r7, #232	; 0xe8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop

080052c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005318:	b480      	push	{r7}
 800531a:	b095      	sub	sp, #84	; 0x54
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	330c      	adds	r3, #12
 8005326:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532a:	e853 3f00 	ldrex	r3, [r3]
 800532e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005332:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005336:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	330c      	adds	r3, #12
 800533e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005340:	643a      	str	r2, [r7, #64]	; 0x40
 8005342:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005344:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005346:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005348:	e841 2300 	strex	r3, r2, [r1]
 800534c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1e5      	bne.n	8005320 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3314      	adds	r3, #20
 800535a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535c:	6a3b      	ldr	r3, [r7, #32]
 800535e:	e853 3f00 	ldrex	r3, [r3]
 8005362:	61fb      	str	r3, [r7, #28]
   return(result);
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	f023 0301 	bic.w	r3, r3, #1
 800536a:	64bb      	str	r3, [r7, #72]	; 0x48
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3314      	adds	r3, #20
 8005372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005374:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800537a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800537c:	e841 2300 	strex	r3, r2, [r1]
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1e5      	bne.n	8005354 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538c:	2b01      	cmp	r3, #1
 800538e:	d119      	bne.n	80053c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	330c      	adds	r3, #12
 8005396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	60bb      	str	r3, [r7, #8]
   return(result);
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f023 0310 	bic.w	r3, r3, #16
 80053a6:	647b      	str	r3, [r7, #68]	; 0x44
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	330c      	adds	r3, #12
 80053ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053b0:	61ba      	str	r2, [r7, #24]
 80053b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	6979      	ldr	r1, [r7, #20]
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	613b      	str	r3, [r7, #16]
   return(result);
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e5      	bne.n	8005390 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053d2:	bf00      	nop
 80053d4:	3754      	adds	r7, #84	; 0x54
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b084      	sub	sp, #16
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f7ff ff77 	bl	80052ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053fe:	bf00      	nop
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005406:	b480      	push	{r7}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b21      	cmp	r3, #33	; 0x21
 8005418:	d13e      	bne.n	8005498 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005422:	d114      	bne.n	800544e <UART_Transmit_IT+0x48>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d110      	bne.n	800544e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005440:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	1c9a      	adds	r2, r3, #2
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	621a      	str	r2, [r3, #32]
 800544c:	e008      	b.n	8005460 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	1c59      	adds	r1, r3, #1
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6211      	str	r1, [r2, #32]
 8005458:	781a      	ldrb	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005464:	b29b      	uxth	r3, r3
 8005466:	3b01      	subs	r3, #1
 8005468:	b29b      	uxth	r3, r3
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	4619      	mov	r1, r3
 800546e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10f      	bne.n	8005494 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005482:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005492:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005494:	2300      	movs	r3, #0
 8005496:	e000      	b.n	800549a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005498:	2302      	movs	r3, #2
  }
}
 800549a:	4618      	mov	r0, r3
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7ff fefc 	bl	80052c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3708      	adds	r7, #8
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b08c      	sub	sp, #48	; 0x30
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b22      	cmp	r3, #34	; 0x22
 80054e8:	f040 80ab 	bne.w	8005642 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f4:	d117      	bne.n	8005526 <UART_Receive_IT+0x50>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d113      	bne.n	8005526 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054fe:	2300      	movs	r3, #0
 8005500:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005506:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	b29b      	uxth	r3, r3
 8005510:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005514:	b29a      	uxth	r2, r3
 8005516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005518:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	1c9a      	adds	r2, r3, #2
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	629a      	str	r2, [r3, #40]	; 0x28
 8005524:	e026      	b.n	8005574 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800552c:	2300      	movs	r3, #0
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005538:	d007      	beq.n	800554a <UART_Receive_IT+0x74>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10a      	bne.n	8005558 <UART_Receive_IT+0x82>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d106      	bne.n	8005558 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	b2da      	uxtb	r2, r3
 8005552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	e008      	b.n	800556a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005564:	b2da      	uxtb	r2, r3
 8005566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005568:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005578:	b29b      	uxth	r3, r3
 800557a:	3b01      	subs	r3, #1
 800557c:	b29b      	uxth	r3, r3
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	4619      	mov	r1, r3
 8005582:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005584:	2b00      	cmp	r3, #0
 8005586:	d15a      	bne.n	800563e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0220 	bic.w	r2, r2, #32
 8005596:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695a      	ldr	r2, [r3, #20]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0201 	bic.w	r2, r2, #1
 80055b6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d135      	bne.n	8005634 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	330c      	adds	r3, #12
 80055d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	e853 3f00 	ldrex	r3, [r3]
 80055dc:	613b      	str	r3, [r7, #16]
   return(result);
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f023 0310 	bic.w	r3, r3, #16
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	330c      	adds	r3, #12
 80055ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ee:	623a      	str	r2, [r7, #32]
 80055f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	69f9      	ldr	r1, [r7, #28]
 80055f4:	6a3a      	ldr	r2, [r7, #32]
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e5      	bne.n	80055ce <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0310 	and.w	r3, r3, #16
 800560c:	2b10      	cmp	r3, #16
 800560e:	d10a      	bne.n	8005626 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005610:	2300      	movs	r3, #0
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800562a:	4619      	mov	r1, r3
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff fe67 	bl	8005300 <HAL_UARTEx_RxEventCallback>
 8005632:	e002      	b.n	800563a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff fe4f 	bl	80052d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800563a:	2300      	movs	r3, #0
 800563c:	e002      	b.n	8005644 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	e000      	b.n	8005644 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005642:	2302      	movs	r3, #2
  }
}
 8005644:	4618      	mov	r0, r3
 8005646:	3730      	adds	r7, #48	; 0x30
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800564c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005650:	b0c0      	sub	sp, #256	; 0x100
 8005652:	af00      	add	r7, sp, #0
 8005654:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005668:	68d9      	ldr	r1, [r3, #12]
 800566a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	ea40 0301 	orr.w	r3, r0, r1
 8005674:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	431a      	orrs	r2, r3
 8005684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	431a      	orrs	r2, r3
 800568c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	4313      	orrs	r3, r2
 8005694:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056a4:	f021 010c 	bic.w	r1, r1, #12
 80056a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056b2:	430b      	orrs	r3, r1
 80056b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c6:	6999      	ldr	r1, [r3, #24]
 80056c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	ea40 0301 	orr.w	r3, r0, r1
 80056d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	4b8f      	ldr	r3, [pc, #572]	; (8005918 <UART_SetConfig+0x2cc>)
 80056dc:	429a      	cmp	r2, r3
 80056de:	d005      	beq.n	80056ec <UART_SetConfig+0xa0>
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	4b8d      	ldr	r3, [pc, #564]	; (800591c <UART_SetConfig+0x2d0>)
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d104      	bne.n	80056f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056ec:	f7fe fe84 	bl	80043f8 <HAL_RCC_GetPCLK2Freq>
 80056f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056f4:	e003      	b.n	80056fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056f6:	f7fe fe6b 	bl	80043d0 <HAL_RCC_GetPCLK1Freq>
 80056fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005702:	69db      	ldr	r3, [r3, #28]
 8005704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005708:	f040 810c 	bne.w	8005924 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800570c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005710:	2200      	movs	r2, #0
 8005712:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005716:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800571a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800571e:	4622      	mov	r2, r4
 8005720:	462b      	mov	r3, r5
 8005722:	1891      	adds	r1, r2, r2
 8005724:	65b9      	str	r1, [r7, #88]	; 0x58
 8005726:	415b      	adcs	r3, r3
 8005728:	65fb      	str	r3, [r7, #92]	; 0x5c
 800572a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800572e:	4621      	mov	r1, r4
 8005730:	eb12 0801 	adds.w	r8, r2, r1
 8005734:	4629      	mov	r1, r5
 8005736:	eb43 0901 	adc.w	r9, r3, r1
 800573a:	f04f 0200 	mov.w	r2, #0
 800573e:	f04f 0300 	mov.w	r3, #0
 8005742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800574a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800574e:	4690      	mov	r8, r2
 8005750:	4699      	mov	r9, r3
 8005752:	4623      	mov	r3, r4
 8005754:	eb18 0303 	adds.w	r3, r8, r3
 8005758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800575c:	462b      	mov	r3, r5
 800575e:	eb49 0303 	adc.w	r3, r9, r3
 8005762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005772:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005776:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800577a:	460b      	mov	r3, r1
 800577c:	18db      	adds	r3, r3, r3
 800577e:	653b      	str	r3, [r7, #80]	; 0x50
 8005780:	4613      	mov	r3, r2
 8005782:	eb42 0303 	adc.w	r3, r2, r3
 8005786:	657b      	str	r3, [r7, #84]	; 0x54
 8005788:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800578c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005790:	f7fb f8b4 	bl	80008fc <__aeabi_uldivmod>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4b61      	ldr	r3, [pc, #388]	; (8005920 <UART_SetConfig+0x2d4>)
 800579a:	fba3 2302 	umull	r2, r3, r3, r2
 800579e:	095b      	lsrs	r3, r3, #5
 80057a0:	011c      	lsls	r4, r3, #4
 80057a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80057ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80057b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80057b4:	4642      	mov	r2, r8
 80057b6:	464b      	mov	r3, r9
 80057b8:	1891      	adds	r1, r2, r2
 80057ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80057bc:	415b      	adcs	r3, r3
 80057be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057c4:	4641      	mov	r1, r8
 80057c6:	eb12 0a01 	adds.w	sl, r2, r1
 80057ca:	4649      	mov	r1, r9
 80057cc:	eb43 0b01 	adc.w	fp, r3, r1
 80057d0:	f04f 0200 	mov.w	r2, #0
 80057d4:	f04f 0300 	mov.w	r3, #0
 80057d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057e4:	4692      	mov	sl, r2
 80057e6:	469b      	mov	fp, r3
 80057e8:	4643      	mov	r3, r8
 80057ea:	eb1a 0303 	adds.w	r3, sl, r3
 80057ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057f2:	464b      	mov	r3, r9
 80057f4:	eb4b 0303 	adc.w	r3, fp, r3
 80057f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005808:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800580c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005810:	460b      	mov	r3, r1
 8005812:	18db      	adds	r3, r3, r3
 8005814:	643b      	str	r3, [r7, #64]	; 0x40
 8005816:	4613      	mov	r3, r2
 8005818:	eb42 0303 	adc.w	r3, r2, r3
 800581c:	647b      	str	r3, [r7, #68]	; 0x44
 800581e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005822:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005826:	f7fb f869 	bl	80008fc <__aeabi_uldivmod>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	4611      	mov	r1, r2
 8005830:	4b3b      	ldr	r3, [pc, #236]	; (8005920 <UART_SetConfig+0x2d4>)
 8005832:	fba3 2301 	umull	r2, r3, r3, r1
 8005836:	095b      	lsrs	r3, r3, #5
 8005838:	2264      	movs	r2, #100	; 0x64
 800583a:	fb02 f303 	mul.w	r3, r2, r3
 800583e:	1acb      	subs	r3, r1, r3
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005846:	4b36      	ldr	r3, [pc, #216]	; (8005920 <UART_SetConfig+0x2d4>)
 8005848:	fba3 2302 	umull	r2, r3, r3, r2
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005854:	441c      	add	r4, r3
 8005856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800585a:	2200      	movs	r2, #0
 800585c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005860:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005864:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005868:	4642      	mov	r2, r8
 800586a:	464b      	mov	r3, r9
 800586c:	1891      	adds	r1, r2, r2
 800586e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005870:	415b      	adcs	r3, r3
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005874:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005878:	4641      	mov	r1, r8
 800587a:	1851      	adds	r1, r2, r1
 800587c:	6339      	str	r1, [r7, #48]	; 0x30
 800587e:	4649      	mov	r1, r9
 8005880:	414b      	adcs	r3, r1
 8005882:	637b      	str	r3, [r7, #52]	; 0x34
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	f04f 0300 	mov.w	r3, #0
 800588c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005890:	4659      	mov	r1, fp
 8005892:	00cb      	lsls	r3, r1, #3
 8005894:	4651      	mov	r1, sl
 8005896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800589a:	4651      	mov	r1, sl
 800589c:	00ca      	lsls	r2, r1, #3
 800589e:	4610      	mov	r0, r2
 80058a0:	4619      	mov	r1, r3
 80058a2:	4603      	mov	r3, r0
 80058a4:	4642      	mov	r2, r8
 80058a6:	189b      	adds	r3, r3, r2
 80058a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058ac:	464b      	mov	r3, r9
 80058ae:	460a      	mov	r2, r1
 80058b0:	eb42 0303 	adc.w	r3, r2, r3
 80058b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80058c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80058cc:	460b      	mov	r3, r1
 80058ce:	18db      	adds	r3, r3, r3
 80058d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058d2:	4613      	mov	r3, r2
 80058d4:	eb42 0303 	adc.w	r3, r2, r3
 80058d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058e2:	f7fb f80b 	bl	80008fc <__aeabi_uldivmod>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	4b0d      	ldr	r3, [pc, #52]	; (8005920 <UART_SetConfig+0x2d4>)
 80058ec:	fba3 1302 	umull	r1, r3, r3, r2
 80058f0:	095b      	lsrs	r3, r3, #5
 80058f2:	2164      	movs	r1, #100	; 0x64
 80058f4:	fb01 f303 	mul.w	r3, r1, r3
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	3332      	adds	r3, #50	; 0x32
 80058fe:	4a08      	ldr	r2, [pc, #32]	; (8005920 <UART_SetConfig+0x2d4>)
 8005900:	fba2 2303 	umull	r2, r3, r2, r3
 8005904:	095b      	lsrs	r3, r3, #5
 8005906:	f003 0207 	and.w	r2, r3, #7
 800590a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4422      	add	r2, r4
 8005912:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005914:	e106      	b.n	8005b24 <UART_SetConfig+0x4d8>
 8005916:	bf00      	nop
 8005918:	40011000 	.word	0x40011000
 800591c:	40011400 	.word	0x40011400
 8005920:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005928:	2200      	movs	r2, #0
 800592a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800592e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005932:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005936:	4642      	mov	r2, r8
 8005938:	464b      	mov	r3, r9
 800593a:	1891      	adds	r1, r2, r2
 800593c:	6239      	str	r1, [r7, #32]
 800593e:	415b      	adcs	r3, r3
 8005940:	627b      	str	r3, [r7, #36]	; 0x24
 8005942:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005946:	4641      	mov	r1, r8
 8005948:	1854      	adds	r4, r2, r1
 800594a:	4649      	mov	r1, r9
 800594c:	eb43 0501 	adc.w	r5, r3, r1
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	00eb      	lsls	r3, r5, #3
 800595a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800595e:	00e2      	lsls	r2, r4, #3
 8005960:	4614      	mov	r4, r2
 8005962:	461d      	mov	r5, r3
 8005964:	4643      	mov	r3, r8
 8005966:	18e3      	adds	r3, r4, r3
 8005968:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800596c:	464b      	mov	r3, r9
 800596e:	eb45 0303 	adc.w	r3, r5, r3
 8005972:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005982:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	f04f 0300 	mov.w	r3, #0
 800598e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005992:	4629      	mov	r1, r5
 8005994:	008b      	lsls	r3, r1, #2
 8005996:	4621      	mov	r1, r4
 8005998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800599c:	4621      	mov	r1, r4
 800599e:	008a      	lsls	r2, r1, #2
 80059a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80059a4:	f7fa ffaa 	bl	80008fc <__aeabi_uldivmod>
 80059a8:	4602      	mov	r2, r0
 80059aa:	460b      	mov	r3, r1
 80059ac:	4b60      	ldr	r3, [pc, #384]	; (8005b30 <UART_SetConfig+0x4e4>)
 80059ae:	fba3 2302 	umull	r2, r3, r3, r2
 80059b2:	095b      	lsrs	r3, r3, #5
 80059b4:	011c      	lsls	r4, r3, #4
 80059b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059ba:	2200      	movs	r2, #0
 80059bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80059c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80059c8:	4642      	mov	r2, r8
 80059ca:	464b      	mov	r3, r9
 80059cc:	1891      	adds	r1, r2, r2
 80059ce:	61b9      	str	r1, [r7, #24]
 80059d0:	415b      	adcs	r3, r3
 80059d2:	61fb      	str	r3, [r7, #28]
 80059d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059d8:	4641      	mov	r1, r8
 80059da:	1851      	adds	r1, r2, r1
 80059dc:	6139      	str	r1, [r7, #16]
 80059de:	4649      	mov	r1, r9
 80059e0:	414b      	adcs	r3, r1
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059f0:	4659      	mov	r1, fp
 80059f2:	00cb      	lsls	r3, r1, #3
 80059f4:	4651      	mov	r1, sl
 80059f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059fa:	4651      	mov	r1, sl
 80059fc:	00ca      	lsls	r2, r1, #3
 80059fe:	4610      	mov	r0, r2
 8005a00:	4619      	mov	r1, r3
 8005a02:	4603      	mov	r3, r0
 8005a04:	4642      	mov	r2, r8
 8005a06:	189b      	adds	r3, r3, r2
 8005a08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a0c:	464b      	mov	r3, r9
 8005a0e:	460a      	mov	r2, r1
 8005a10:	eb42 0303 	adc.w	r3, r2, r3
 8005a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a24:	f04f 0200 	mov.w	r2, #0
 8005a28:	f04f 0300 	mov.w	r3, #0
 8005a2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a30:	4649      	mov	r1, r9
 8005a32:	008b      	lsls	r3, r1, #2
 8005a34:	4641      	mov	r1, r8
 8005a36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a3a:	4641      	mov	r1, r8
 8005a3c:	008a      	lsls	r2, r1, #2
 8005a3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a42:	f7fa ff5b 	bl	80008fc <__aeabi_uldivmod>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	4b38      	ldr	r3, [pc, #224]	; (8005b30 <UART_SetConfig+0x4e4>)
 8005a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a52:	095b      	lsrs	r3, r3, #5
 8005a54:	2264      	movs	r2, #100	; 0x64
 8005a56:	fb02 f303 	mul.w	r3, r2, r3
 8005a5a:	1acb      	subs	r3, r1, r3
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	3332      	adds	r3, #50	; 0x32
 8005a60:	4a33      	ldr	r2, [pc, #204]	; (8005b30 <UART_SetConfig+0x4e4>)
 8005a62:	fba2 2303 	umull	r2, r3, r2, r3
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a6c:	441c      	add	r4, r3
 8005a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a72:	2200      	movs	r2, #0
 8005a74:	673b      	str	r3, [r7, #112]	; 0x70
 8005a76:	677a      	str	r2, [r7, #116]	; 0x74
 8005a78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a7c:	4642      	mov	r2, r8
 8005a7e:	464b      	mov	r3, r9
 8005a80:	1891      	adds	r1, r2, r2
 8005a82:	60b9      	str	r1, [r7, #8]
 8005a84:	415b      	adcs	r3, r3
 8005a86:	60fb      	str	r3, [r7, #12]
 8005a88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a8c:	4641      	mov	r1, r8
 8005a8e:	1851      	adds	r1, r2, r1
 8005a90:	6039      	str	r1, [r7, #0]
 8005a92:	4649      	mov	r1, r9
 8005a94:	414b      	adcs	r3, r1
 8005a96:	607b      	str	r3, [r7, #4]
 8005a98:	f04f 0200 	mov.w	r2, #0
 8005a9c:	f04f 0300 	mov.w	r3, #0
 8005aa0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005aa4:	4659      	mov	r1, fp
 8005aa6:	00cb      	lsls	r3, r1, #3
 8005aa8:	4651      	mov	r1, sl
 8005aaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005aae:	4651      	mov	r1, sl
 8005ab0:	00ca      	lsls	r2, r1, #3
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	4642      	mov	r2, r8
 8005aba:	189b      	adds	r3, r3, r2
 8005abc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005abe:	464b      	mov	r3, r9
 8005ac0:	460a      	mov	r2, r1
 8005ac2:	eb42 0303 	adc.w	r3, r2, r3
 8005ac6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ad2:	667a      	str	r2, [r7, #100]	; 0x64
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ae0:	4649      	mov	r1, r9
 8005ae2:	008b      	lsls	r3, r1, #2
 8005ae4:	4641      	mov	r1, r8
 8005ae6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aea:	4641      	mov	r1, r8
 8005aec:	008a      	lsls	r2, r1, #2
 8005aee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005af2:	f7fa ff03 	bl	80008fc <__aeabi_uldivmod>
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	4b0d      	ldr	r3, [pc, #52]	; (8005b30 <UART_SetConfig+0x4e4>)
 8005afc:	fba3 1302 	umull	r1, r3, r3, r2
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	2164      	movs	r1, #100	; 0x64
 8005b04:	fb01 f303 	mul.w	r3, r1, r3
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	3332      	adds	r3, #50	; 0x32
 8005b0e:	4a08      	ldr	r2, [pc, #32]	; (8005b30 <UART_SetConfig+0x4e4>)
 8005b10:	fba2 2303 	umull	r2, r3, r2, r3
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	f003 020f 	and.w	r2, r3, #15
 8005b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4422      	add	r2, r4
 8005b22:	609a      	str	r2, [r3, #8]
}
 8005b24:	bf00      	nop
 8005b26:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b30:	51eb851f 	.word	0x51eb851f

08005b34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b34:	b084      	sub	sp, #16
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b084      	sub	sp, #16
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
 8005b3e:	f107 001c 	add.w	r0, r7, #28
 8005b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d122      	bne.n	8005b92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d105      	bne.n	8005b86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 faa2 	bl	80060d0 <USB_CoreReset>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	73fb      	strb	r3, [r7, #15]
 8005b90:	e01a      	b.n	8005bc8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 fa96 	bl	80060d0 <USB_CoreReset>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d106      	bne.n	8005bbc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	639a      	str	r2, [r3, #56]	; 0x38
 8005bba:	e005      	b.n	8005bc8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d10b      	bne.n	8005be6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f043 0206 	orr.w	r2, r3, #6
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f043 0220 	orr.w	r2, r3, #32
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bf2:	b004      	add	sp, #16
 8005bf4:	4770      	bx	lr

08005bf6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f023 0201 	bic.w	r2, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	460b      	mov	r3, r1
 8005c22:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005c34:	78fb      	ldrb	r3, [r7, #3]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d115      	bne.n	8005c66 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c46:	2001      	movs	r0, #1
 8005c48:	f7fc fbbc 	bl	80023c4 <HAL_Delay>
      ms++;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fa2e 	bl	80060b4 <USB_GetMode>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d01e      	beq.n	8005c9c <USB_SetCurrentMode+0x84>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2b31      	cmp	r3, #49	; 0x31
 8005c62:	d9f0      	bls.n	8005c46 <USB_SetCurrentMode+0x2e>
 8005c64:	e01a      	b.n	8005c9c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d115      	bne.n	8005c98 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c78:	2001      	movs	r0, #1
 8005c7a:	f7fc fba3 	bl	80023c4 <HAL_Delay>
      ms++;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3301      	adds	r3, #1
 8005c82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 fa15 	bl	80060b4 <USB_GetMode>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <USB_SetCurrentMode+0x84>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b31      	cmp	r3, #49	; 0x31
 8005c94:	d9f0      	bls.n	8005c78 <USB_SetCurrentMode+0x60>
 8005c96:	e001      	b.n	8005c9c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e005      	b.n	8005ca8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b32      	cmp	r3, #50	; 0x32
 8005ca0:	d101      	bne.n	8005ca6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cb0:	b084      	sub	sp, #16
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b086      	sub	sp, #24
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005cca:	2300      	movs	r3, #0
 8005ccc:	613b      	str	r3, [r7, #16]
 8005cce:	e009      	b.n	8005ce4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	3340      	adds	r3, #64	; 0x40
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	2200      	movs	r2, #0
 8005cdc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	613b      	str	r3, [r7, #16]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	2b0e      	cmp	r3, #14
 8005ce8:	d9f2      	bls.n	8005cd0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d11c      	bne.n	8005d2a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cfe:	f043 0302 	orr.w	r3, r3, #2
 8005d02:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d14:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	639a      	str	r2, [r3, #56]	; 0x38
 8005d28:	e00b      	b.n	8005d42 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d48:	461a      	mov	r2, r3
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d54:	4619      	mov	r1, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	680b      	ldr	r3, [r1, #0]
 8005d60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d10c      	bne.n	8005d82 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d104      	bne.n	8005d78 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d6e:	2100      	movs	r1, #0
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f965 	bl	8006040 <USB_SetDevSpeed>
 8005d76:	e008      	b.n	8005d8a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d78:	2101      	movs	r1, #1
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 f960 	bl	8006040 <USB_SetDevSpeed>
 8005d80:	e003      	b.n	8005d8a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d82:	2103      	movs	r1, #3
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f95b 	bl	8006040 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d8a:	2110      	movs	r1, #16
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f8f3 	bl	8005f78 <USB_FlushTxFifo>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f91f 	bl	8005fe0 <USB_FlushRxFifo>
 8005da2:	4603      	mov	r3, r0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db2:	461a      	mov	r2, r3
 8005db4:	2300      	movs	r3, #0
 8005db6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dca:	461a      	mov	r2, r3
 8005dcc:	2300      	movs	r3, #0
 8005dce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	613b      	str	r3, [r7, #16]
 8005dd4:	e043      	b.n	8005e5e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005de8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dec:	d118      	bne.n	8005e20 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10a      	bne.n	8005e0a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e00:	461a      	mov	r2, r3
 8005e02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	e013      	b.n	8005e32 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e16:	461a      	mov	r2, r3
 8005e18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	e008      	b.n	8005e32 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	2300      	movs	r3, #0
 8005e30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e3e:	461a      	mov	r2, r3
 8005e40:	2300      	movs	r3, #0
 8005e42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e50:	461a      	mov	r2, r3
 8005e52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	613b      	str	r3, [r7, #16]
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d3b7      	bcc.n	8005dd6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e66:	2300      	movs	r3, #0
 8005e68:	613b      	str	r3, [r7, #16]
 8005e6a:	e043      	b.n	8005ef4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e82:	d118      	bne.n	8005eb6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e96:	461a      	mov	r2, r3
 8005e98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	e013      	b.n	8005ec8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eac:	461a      	mov	r2, r3
 8005eae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	e008      	b.n	8005ec8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005eec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	613b      	str	r3, [r7, #16]
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d3b7      	bcc.n	8005e6c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f0e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f1c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d105      	bne.n	8005f30 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	f043 0210 	orr.w	r2, r3, #16
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699a      	ldr	r2, [r3, #24]
 8005f34:	4b0f      	ldr	r3, [pc, #60]	; (8005f74 <USB_DevInit+0x2c4>)
 8005f36:	4313      	orrs	r3, r2
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d005      	beq.n	8005f4e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	f043 0208 	orr.w	r2, r3, #8
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d107      	bne.n	8005f64 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	699b      	ldr	r3, [r3, #24]
 8005f58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f5c:	f043 0304 	orr.w	r3, r3, #4
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f70:	b004      	add	sp, #16
 8005f72:	4770      	bx	lr
 8005f74:	803c3800 	.word	0x803c3800

08005f78 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4a13      	ldr	r2, [pc, #76]	; (8005fdc <USB_FlushTxFifo+0x64>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d901      	bls.n	8005f98 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e01b      	b.n	8005fd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	daf2      	bge.n	8005f86 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	019b      	lsls	r3, r3, #6
 8005fa8:	f043 0220 	orr.w	r2, r3, #32
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4a08      	ldr	r2, [pc, #32]	; (8005fdc <USB_FlushTxFifo+0x64>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d901      	bls.n	8005fc2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e006      	b.n	8005fd0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0320 	and.w	r3, r3, #32
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	d0f0      	beq.n	8005fb0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	00030d40 	.word	0x00030d40

08005fe0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	4a11      	ldr	r2, [pc, #68]	; (800603c <USB_FlushRxFifo+0x5c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d901      	bls.n	8005ffe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	e018      	b.n	8006030 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	daf2      	bge.n	8005fec <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2210      	movs	r2, #16
 800600e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	3301      	adds	r3, #1
 8006014:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4a08      	ldr	r2, [pc, #32]	; (800603c <USB_FlushRxFifo+0x5c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d901      	bls.n	8006022 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e006      	b.n	8006030 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f003 0310 	and.w	r3, r3, #16
 800602a:	2b10      	cmp	r3, #16
 800602c:	d0f0      	beq.n	8006010 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800602e:	2300      	movs	r3, #0
}
 8006030:	4618      	mov	r0, r3
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	00030d40 	.word	0x00030d40

08006040 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	78fb      	ldrb	r3, [r7, #3]
 800605a:	68f9      	ldr	r1, [r7, #12]
 800605c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006060:	4313      	orrs	r3, r2
 8006062:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006072:	b480      	push	{r7}
 8006074:	b085      	sub	sp, #20
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800608c:	f023 0303 	bic.w	r3, r3, #3
 8006090:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060a0:	f043 0302 	orr.w	r3, r3, #2
 80060a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	f003 0301 	and.w	r3, r3, #1
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060d8:	2300      	movs	r3, #0
 80060da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	3301      	adds	r3, #1
 80060e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4a13      	ldr	r2, [pc, #76]	; (8006134 <USB_CoreReset+0x64>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d901      	bls.n	80060ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e01b      	b.n	8006126 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	daf2      	bge.n	80060dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060f6:	2300      	movs	r3, #0
 80060f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f043 0201 	orr.w	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3301      	adds	r3, #1
 800610a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4a09      	ldr	r2, [pc, #36]	; (8006134 <USB_CoreReset+0x64>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d901      	bls.n	8006118 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e006      	b.n	8006126 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	f003 0301 	and.w	r3, r3, #1
 8006120:	2b01      	cmp	r3, #1
 8006122:	d0f0      	beq.n	8006106 <USB_CoreReset+0x36>

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	00030d40 	.word	0x00030d40

08006138 <siprintf>:
 8006138:	b40e      	push	{r1, r2, r3}
 800613a:	b500      	push	{lr}
 800613c:	b09c      	sub	sp, #112	; 0x70
 800613e:	ab1d      	add	r3, sp, #116	; 0x74
 8006140:	9002      	str	r0, [sp, #8]
 8006142:	9006      	str	r0, [sp, #24]
 8006144:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006148:	4809      	ldr	r0, [pc, #36]	; (8006170 <siprintf+0x38>)
 800614a:	9107      	str	r1, [sp, #28]
 800614c:	9104      	str	r1, [sp, #16]
 800614e:	4909      	ldr	r1, [pc, #36]	; (8006174 <siprintf+0x3c>)
 8006150:	f853 2b04 	ldr.w	r2, [r3], #4
 8006154:	9105      	str	r1, [sp, #20]
 8006156:	6800      	ldr	r0, [r0, #0]
 8006158:	9301      	str	r3, [sp, #4]
 800615a:	a902      	add	r1, sp, #8
 800615c:	f000 f992 	bl	8006484 <_svfiprintf_r>
 8006160:	9b02      	ldr	r3, [sp, #8]
 8006162:	2200      	movs	r2, #0
 8006164:	701a      	strb	r2, [r3, #0]
 8006166:	b01c      	add	sp, #112	; 0x70
 8006168:	f85d eb04 	ldr.w	lr, [sp], #4
 800616c:	b003      	add	sp, #12
 800616e:	4770      	bx	lr
 8006170:	20000058 	.word	0x20000058
 8006174:	ffff0208 	.word	0xffff0208

08006178 <memset>:
 8006178:	4402      	add	r2, r0
 800617a:	4603      	mov	r3, r0
 800617c:	4293      	cmp	r3, r2
 800617e:	d100      	bne.n	8006182 <memset+0xa>
 8006180:	4770      	bx	lr
 8006182:	f803 1b01 	strb.w	r1, [r3], #1
 8006186:	e7f9      	b.n	800617c <memset+0x4>

08006188 <__errno>:
 8006188:	4b01      	ldr	r3, [pc, #4]	; (8006190 <__errno+0x8>)
 800618a:	6818      	ldr	r0, [r3, #0]
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	20000058 	.word	0x20000058

08006194 <__libc_init_array>:
 8006194:	b570      	push	{r4, r5, r6, lr}
 8006196:	4d0d      	ldr	r5, [pc, #52]	; (80061cc <__libc_init_array+0x38>)
 8006198:	4c0d      	ldr	r4, [pc, #52]	; (80061d0 <__libc_init_array+0x3c>)
 800619a:	1b64      	subs	r4, r4, r5
 800619c:	10a4      	asrs	r4, r4, #2
 800619e:	2600      	movs	r6, #0
 80061a0:	42a6      	cmp	r6, r4
 80061a2:	d109      	bne.n	80061b8 <__libc_init_array+0x24>
 80061a4:	4d0b      	ldr	r5, [pc, #44]	; (80061d4 <__libc_init_array+0x40>)
 80061a6:	4c0c      	ldr	r4, [pc, #48]	; (80061d8 <__libc_init_array+0x44>)
 80061a8:	f000 fc8c 	bl	8006ac4 <_init>
 80061ac:	1b64      	subs	r4, r4, r5
 80061ae:	10a4      	asrs	r4, r4, #2
 80061b0:	2600      	movs	r6, #0
 80061b2:	42a6      	cmp	r6, r4
 80061b4:	d105      	bne.n	80061c2 <__libc_init_array+0x2e>
 80061b6:	bd70      	pop	{r4, r5, r6, pc}
 80061b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061bc:	4798      	blx	r3
 80061be:	3601      	adds	r6, #1
 80061c0:	e7ee      	b.n	80061a0 <__libc_init_array+0xc>
 80061c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c6:	4798      	blx	r3
 80061c8:	3601      	adds	r6, #1
 80061ca:	e7f2      	b.n	80061b2 <__libc_init_array+0x1e>
 80061cc:	08006ba4 	.word	0x08006ba4
 80061d0:	08006ba4 	.word	0x08006ba4
 80061d4:	08006ba4 	.word	0x08006ba4
 80061d8:	08006ba8 	.word	0x08006ba8

080061dc <__retarget_lock_acquire_recursive>:
 80061dc:	4770      	bx	lr

080061de <__retarget_lock_release_recursive>:
 80061de:	4770      	bx	lr

080061e0 <_free_r>:
 80061e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061e2:	2900      	cmp	r1, #0
 80061e4:	d044      	beq.n	8006270 <_free_r+0x90>
 80061e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061ea:	9001      	str	r0, [sp, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f1a1 0404 	sub.w	r4, r1, #4
 80061f2:	bfb8      	it	lt
 80061f4:	18e4      	addlt	r4, r4, r3
 80061f6:	f000 f8df 	bl	80063b8 <__malloc_lock>
 80061fa:	4a1e      	ldr	r2, [pc, #120]	; (8006274 <_free_r+0x94>)
 80061fc:	9801      	ldr	r0, [sp, #4]
 80061fe:	6813      	ldr	r3, [r2, #0]
 8006200:	b933      	cbnz	r3, 8006210 <_free_r+0x30>
 8006202:	6063      	str	r3, [r4, #4]
 8006204:	6014      	str	r4, [r2, #0]
 8006206:	b003      	add	sp, #12
 8006208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800620c:	f000 b8da 	b.w	80063c4 <__malloc_unlock>
 8006210:	42a3      	cmp	r3, r4
 8006212:	d908      	bls.n	8006226 <_free_r+0x46>
 8006214:	6825      	ldr	r5, [r4, #0]
 8006216:	1961      	adds	r1, r4, r5
 8006218:	428b      	cmp	r3, r1
 800621a:	bf01      	itttt	eq
 800621c:	6819      	ldreq	r1, [r3, #0]
 800621e:	685b      	ldreq	r3, [r3, #4]
 8006220:	1949      	addeq	r1, r1, r5
 8006222:	6021      	streq	r1, [r4, #0]
 8006224:	e7ed      	b.n	8006202 <_free_r+0x22>
 8006226:	461a      	mov	r2, r3
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	b10b      	cbz	r3, 8006230 <_free_r+0x50>
 800622c:	42a3      	cmp	r3, r4
 800622e:	d9fa      	bls.n	8006226 <_free_r+0x46>
 8006230:	6811      	ldr	r1, [r2, #0]
 8006232:	1855      	adds	r5, r2, r1
 8006234:	42a5      	cmp	r5, r4
 8006236:	d10b      	bne.n	8006250 <_free_r+0x70>
 8006238:	6824      	ldr	r4, [r4, #0]
 800623a:	4421      	add	r1, r4
 800623c:	1854      	adds	r4, r2, r1
 800623e:	42a3      	cmp	r3, r4
 8006240:	6011      	str	r1, [r2, #0]
 8006242:	d1e0      	bne.n	8006206 <_free_r+0x26>
 8006244:	681c      	ldr	r4, [r3, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	6053      	str	r3, [r2, #4]
 800624a:	440c      	add	r4, r1
 800624c:	6014      	str	r4, [r2, #0]
 800624e:	e7da      	b.n	8006206 <_free_r+0x26>
 8006250:	d902      	bls.n	8006258 <_free_r+0x78>
 8006252:	230c      	movs	r3, #12
 8006254:	6003      	str	r3, [r0, #0]
 8006256:	e7d6      	b.n	8006206 <_free_r+0x26>
 8006258:	6825      	ldr	r5, [r4, #0]
 800625a:	1961      	adds	r1, r4, r5
 800625c:	428b      	cmp	r3, r1
 800625e:	bf04      	itt	eq
 8006260:	6819      	ldreq	r1, [r3, #0]
 8006262:	685b      	ldreq	r3, [r3, #4]
 8006264:	6063      	str	r3, [r4, #4]
 8006266:	bf04      	itt	eq
 8006268:	1949      	addeq	r1, r1, r5
 800626a:	6021      	streq	r1, [r4, #0]
 800626c:	6054      	str	r4, [r2, #4]
 800626e:	e7ca      	b.n	8006206 <_free_r+0x26>
 8006270:	b003      	add	sp, #12
 8006272:	bd30      	pop	{r4, r5, pc}
 8006274:	20000aec 	.word	0x20000aec

08006278 <sbrk_aligned>:
 8006278:	b570      	push	{r4, r5, r6, lr}
 800627a:	4e0e      	ldr	r6, [pc, #56]	; (80062b4 <sbrk_aligned+0x3c>)
 800627c:	460c      	mov	r4, r1
 800627e:	6831      	ldr	r1, [r6, #0]
 8006280:	4605      	mov	r5, r0
 8006282:	b911      	cbnz	r1, 800628a <sbrk_aligned+0x12>
 8006284:	f000 fba6 	bl	80069d4 <_sbrk_r>
 8006288:	6030      	str	r0, [r6, #0]
 800628a:	4621      	mov	r1, r4
 800628c:	4628      	mov	r0, r5
 800628e:	f000 fba1 	bl	80069d4 <_sbrk_r>
 8006292:	1c43      	adds	r3, r0, #1
 8006294:	d00a      	beq.n	80062ac <sbrk_aligned+0x34>
 8006296:	1cc4      	adds	r4, r0, #3
 8006298:	f024 0403 	bic.w	r4, r4, #3
 800629c:	42a0      	cmp	r0, r4
 800629e:	d007      	beq.n	80062b0 <sbrk_aligned+0x38>
 80062a0:	1a21      	subs	r1, r4, r0
 80062a2:	4628      	mov	r0, r5
 80062a4:	f000 fb96 	bl	80069d4 <_sbrk_r>
 80062a8:	3001      	adds	r0, #1
 80062aa:	d101      	bne.n	80062b0 <sbrk_aligned+0x38>
 80062ac:	f04f 34ff 	mov.w	r4, #4294967295
 80062b0:	4620      	mov	r0, r4
 80062b2:	bd70      	pop	{r4, r5, r6, pc}
 80062b4:	20000af0 	.word	0x20000af0

080062b8 <_malloc_r>:
 80062b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062bc:	1ccd      	adds	r5, r1, #3
 80062be:	f025 0503 	bic.w	r5, r5, #3
 80062c2:	3508      	adds	r5, #8
 80062c4:	2d0c      	cmp	r5, #12
 80062c6:	bf38      	it	cc
 80062c8:	250c      	movcc	r5, #12
 80062ca:	2d00      	cmp	r5, #0
 80062cc:	4607      	mov	r7, r0
 80062ce:	db01      	blt.n	80062d4 <_malloc_r+0x1c>
 80062d0:	42a9      	cmp	r1, r5
 80062d2:	d905      	bls.n	80062e0 <_malloc_r+0x28>
 80062d4:	230c      	movs	r3, #12
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	2600      	movs	r6, #0
 80062da:	4630      	mov	r0, r6
 80062dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80063b4 <_malloc_r+0xfc>
 80062e4:	f000 f868 	bl	80063b8 <__malloc_lock>
 80062e8:	f8d8 3000 	ldr.w	r3, [r8]
 80062ec:	461c      	mov	r4, r3
 80062ee:	bb5c      	cbnz	r4, 8006348 <_malloc_r+0x90>
 80062f0:	4629      	mov	r1, r5
 80062f2:	4638      	mov	r0, r7
 80062f4:	f7ff ffc0 	bl	8006278 <sbrk_aligned>
 80062f8:	1c43      	adds	r3, r0, #1
 80062fa:	4604      	mov	r4, r0
 80062fc:	d155      	bne.n	80063aa <_malloc_r+0xf2>
 80062fe:	f8d8 4000 	ldr.w	r4, [r8]
 8006302:	4626      	mov	r6, r4
 8006304:	2e00      	cmp	r6, #0
 8006306:	d145      	bne.n	8006394 <_malloc_r+0xdc>
 8006308:	2c00      	cmp	r4, #0
 800630a:	d048      	beq.n	800639e <_malloc_r+0xe6>
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	4631      	mov	r1, r6
 8006310:	4638      	mov	r0, r7
 8006312:	eb04 0903 	add.w	r9, r4, r3
 8006316:	f000 fb5d 	bl	80069d4 <_sbrk_r>
 800631a:	4581      	cmp	r9, r0
 800631c:	d13f      	bne.n	800639e <_malloc_r+0xe6>
 800631e:	6821      	ldr	r1, [r4, #0]
 8006320:	1a6d      	subs	r5, r5, r1
 8006322:	4629      	mov	r1, r5
 8006324:	4638      	mov	r0, r7
 8006326:	f7ff ffa7 	bl	8006278 <sbrk_aligned>
 800632a:	3001      	adds	r0, #1
 800632c:	d037      	beq.n	800639e <_malloc_r+0xe6>
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	442b      	add	r3, r5
 8006332:	6023      	str	r3, [r4, #0]
 8006334:	f8d8 3000 	ldr.w	r3, [r8]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d038      	beq.n	80063ae <_malloc_r+0xf6>
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	42a2      	cmp	r2, r4
 8006340:	d12b      	bne.n	800639a <_malloc_r+0xe2>
 8006342:	2200      	movs	r2, #0
 8006344:	605a      	str	r2, [r3, #4]
 8006346:	e00f      	b.n	8006368 <_malloc_r+0xb0>
 8006348:	6822      	ldr	r2, [r4, #0]
 800634a:	1b52      	subs	r2, r2, r5
 800634c:	d41f      	bmi.n	800638e <_malloc_r+0xd6>
 800634e:	2a0b      	cmp	r2, #11
 8006350:	d917      	bls.n	8006382 <_malloc_r+0xca>
 8006352:	1961      	adds	r1, r4, r5
 8006354:	42a3      	cmp	r3, r4
 8006356:	6025      	str	r5, [r4, #0]
 8006358:	bf18      	it	ne
 800635a:	6059      	strne	r1, [r3, #4]
 800635c:	6863      	ldr	r3, [r4, #4]
 800635e:	bf08      	it	eq
 8006360:	f8c8 1000 	streq.w	r1, [r8]
 8006364:	5162      	str	r2, [r4, r5]
 8006366:	604b      	str	r3, [r1, #4]
 8006368:	4638      	mov	r0, r7
 800636a:	f104 060b 	add.w	r6, r4, #11
 800636e:	f000 f829 	bl	80063c4 <__malloc_unlock>
 8006372:	f026 0607 	bic.w	r6, r6, #7
 8006376:	1d23      	adds	r3, r4, #4
 8006378:	1af2      	subs	r2, r6, r3
 800637a:	d0ae      	beq.n	80062da <_malloc_r+0x22>
 800637c:	1b9b      	subs	r3, r3, r6
 800637e:	50a3      	str	r3, [r4, r2]
 8006380:	e7ab      	b.n	80062da <_malloc_r+0x22>
 8006382:	42a3      	cmp	r3, r4
 8006384:	6862      	ldr	r2, [r4, #4]
 8006386:	d1dd      	bne.n	8006344 <_malloc_r+0x8c>
 8006388:	f8c8 2000 	str.w	r2, [r8]
 800638c:	e7ec      	b.n	8006368 <_malloc_r+0xb0>
 800638e:	4623      	mov	r3, r4
 8006390:	6864      	ldr	r4, [r4, #4]
 8006392:	e7ac      	b.n	80062ee <_malloc_r+0x36>
 8006394:	4634      	mov	r4, r6
 8006396:	6876      	ldr	r6, [r6, #4]
 8006398:	e7b4      	b.n	8006304 <_malloc_r+0x4c>
 800639a:	4613      	mov	r3, r2
 800639c:	e7cc      	b.n	8006338 <_malloc_r+0x80>
 800639e:	230c      	movs	r3, #12
 80063a0:	603b      	str	r3, [r7, #0]
 80063a2:	4638      	mov	r0, r7
 80063a4:	f000 f80e 	bl	80063c4 <__malloc_unlock>
 80063a8:	e797      	b.n	80062da <_malloc_r+0x22>
 80063aa:	6025      	str	r5, [r4, #0]
 80063ac:	e7dc      	b.n	8006368 <_malloc_r+0xb0>
 80063ae:	605b      	str	r3, [r3, #4]
 80063b0:	deff      	udf	#255	; 0xff
 80063b2:	bf00      	nop
 80063b4:	20000aec 	.word	0x20000aec

080063b8 <__malloc_lock>:
 80063b8:	4801      	ldr	r0, [pc, #4]	; (80063c0 <__malloc_lock+0x8>)
 80063ba:	f7ff bf0f 	b.w	80061dc <__retarget_lock_acquire_recursive>
 80063be:	bf00      	nop
 80063c0:	20000ae8 	.word	0x20000ae8

080063c4 <__malloc_unlock>:
 80063c4:	4801      	ldr	r0, [pc, #4]	; (80063cc <__malloc_unlock+0x8>)
 80063c6:	f7ff bf0a 	b.w	80061de <__retarget_lock_release_recursive>
 80063ca:	bf00      	nop
 80063cc:	20000ae8 	.word	0x20000ae8

080063d0 <__ssputs_r>:
 80063d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d4:	688e      	ldr	r6, [r1, #8]
 80063d6:	461f      	mov	r7, r3
 80063d8:	42be      	cmp	r6, r7
 80063da:	680b      	ldr	r3, [r1, #0]
 80063dc:	4682      	mov	sl, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	4690      	mov	r8, r2
 80063e2:	d82c      	bhi.n	800643e <__ssputs_r+0x6e>
 80063e4:	898a      	ldrh	r2, [r1, #12]
 80063e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063ea:	d026      	beq.n	800643a <__ssputs_r+0x6a>
 80063ec:	6965      	ldr	r5, [r4, #20]
 80063ee:	6909      	ldr	r1, [r1, #16]
 80063f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063f4:	eba3 0901 	sub.w	r9, r3, r1
 80063f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063fc:	1c7b      	adds	r3, r7, #1
 80063fe:	444b      	add	r3, r9
 8006400:	106d      	asrs	r5, r5, #1
 8006402:	429d      	cmp	r5, r3
 8006404:	bf38      	it	cc
 8006406:	461d      	movcc	r5, r3
 8006408:	0553      	lsls	r3, r2, #21
 800640a:	d527      	bpl.n	800645c <__ssputs_r+0x8c>
 800640c:	4629      	mov	r1, r5
 800640e:	f7ff ff53 	bl	80062b8 <_malloc_r>
 8006412:	4606      	mov	r6, r0
 8006414:	b360      	cbz	r0, 8006470 <__ssputs_r+0xa0>
 8006416:	6921      	ldr	r1, [r4, #16]
 8006418:	464a      	mov	r2, r9
 800641a:	f000 faeb 	bl	80069f4 <memcpy>
 800641e:	89a3      	ldrh	r3, [r4, #12]
 8006420:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006428:	81a3      	strh	r3, [r4, #12]
 800642a:	6126      	str	r6, [r4, #16]
 800642c:	6165      	str	r5, [r4, #20]
 800642e:	444e      	add	r6, r9
 8006430:	eba5 0509 	sub.w	r5, r5, r9
 8006434:	6026      	str	r6, [r4, #0]
 8006436:	60a5      	str	r5, [r4, #8]
 8006438:	463e      	mov	r6, r7
 800643a:	42be      	cmp	r6, r7
 800643c:	d900      	bls.n	8006440 <__ssputs_r+0x70>
 800643e:	463e      	mov	r6, r7
 8006440:	6820      	ldr	r0, [r4, #0]
 8006442:	4632      	mov	r2, r6
 8006444:	4641      	mov	r1, r8
 8006446:	f000 faab 	bl	80069a0 <memmove>
 800644a:	68a3      	ldr	r3, [r4, #8]
 800644c:	1b9b      	subs	r3, r3, r6
 800644e:	60a3      	str	r3, [r4, #8]
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	4433      	add	r3, r6
 8006454:	6023      	str	r3, [r4, #0]
 8006456:	2000      	movs	r0, #0
 8006458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800645c:	462a      	mov	r2, r5
 800645e:	f000 fad7 	bl	8006a10 <_realloc_r>
 8006462:	4606      	mov	r6, r0
 8006464:	2800      	cmp	r0, #0
 8006466:	d1e0      	bne.n	800642a <__ssputs_r+0x5a>
 8006468:	6921      	ldr	r1, [r4, #16]
 800646a:	4650      	mov	r0, sl
 800646c:	f7ff feb8 	bl	80061e0 <_free_r>
 8006470:	230c      	movs	r3, #12
 8006472:	f8ca 3000 	str.w	r3, [sl]
 8006476:	89a3      	ldrh	r3, [r4, #12]
 8006478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800647c:	81a3      	strh	r3, [r4, #12]
 800647e:	f04f 30ff 	mov.w	r0, #4294967295
 8006482:	e7e9      	b.n	8006458 <__ssputs_r+0x88>

08006484 <_svfiprintf_r>:
 8006484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006488:	4698      	mov	r8, r3
 800648a:	898b      	ldrh	r3, [r1, #12]
 800648c:	061b      	lsls	r3, r3, #24
 800648e:	b09d      	sub	sp, #116	; 0x74
 8006490:	4607      	mov	r7, r0
 8006492:	460d      	mov	r5, r1
 8006494:	4614      	mov	r4, r2
 8006496:	d50e      	bpl.n	80064b6 <_svfiprintf_r+0x32>
 8006498:	690b      	ldr	r3, [r1, #16]
 800649a:	b963      	cbnz	r3, 80064b6 <_svfiprintf_r+0x32>
 800649c:	2140      	movs	r1, #64	; 0x40
 800649e:	f7ff ff0b 	bl	80062b8 <_malloc_r>
 80064a2:	6028      	str	r0, [r5, #0]
 80064a4:	6128      	str	r0, [r5, #16]
 80064a6:	b920      	cbnz	r0, 80064b2 <_svfiprintf_r+0x2e>
 80064a8:	230c      	movs	r3, #12
 80064aa:	603b      	str	r3, [r7, #0]
 80064ac:	f04f 30ff 	mov.w	r0, #4294967295
 80064b0:	e0d0      	b.n	8006654 <_svfiprintf_r+0x1d0>
 80064b2:	2340      	movs	r3, #64	; 0x40
 80064b4:	616b      	str	r3, [r5, #20]
 80064b6:	2300      	movs	r3, #0
 80064b8:	9309      	str	r3, [sp, #36]	; 0x24
 80064ba:	2320      	movs	r3, #32
 80064bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80064c4:	2330      	movs	r3, #48	; 0x30
 80064c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800666c <_svfiprintf_r+0x1e8>
 80064ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064ce:	f04f 0901 	mov.w	r9, #1
 80064d2:	4623      	mov	r3, r4
 80064d4:	469a      	mov	sl, r3
 80064d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064da:	b10a      	cbz	r2, 80064e0 <_svfiprintf_r+0x5c>
 80064dc:	2a25      	cmp	r2, #37	; 0x25
 80064de:	d1f9      	bne.n	80064d4 <_svfiprintf_r+0x50>
 80064e0:	ebba 0b04 	subs.w	fp, sl, r4
 80064e4:	d00b      	beq.n	80064fe <_svfiprintf_r+0x7a>
 80064e6:	465b      	mov	r3, fp
 80064e8:	4622      	mov	r2, r4
 80064ea:	4629      	mov	r1, r5
 80064ec:	4638      	mov	r0, r7
 80064ee:	f7ff ff6f 	bl	80063d0 <__ssputs_r>
 80064f2:	3001      	adds	r0, #1
 80064f4:	f000 80a9 	beq.w	800664a <_svfiprintf_r+0x1c6>
 80064f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064fa:	445a      	add	r2, fp
 80064fc:	9209      	str	r2, [sp, #36]	; 0x24
 80064fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 80a1 	beq.w	800664a <_svfiprintf_r+0x1c6>
 8006508:	2300      	movs	r3, #0
 800650a:	f04f 32ff 	mov.w	r2, #4294967295
 800650e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006512:	f10a 0a01 	add.w	sl, sl, #1
 8006516:	9304      	str	r3, [sp, #16]
 8006518:	9307      	str	r3, [sp, #28]
 800651a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800651e:	931a      	str	r3, [sp, #104]	; 0x68
 8006520:	4654      	mov	r4, sl
 8006522:	2205      	movs	r2, #5
 8006524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006528:	4850      	ldr	r0, [pc, #320]	; (800666c <_svfiprintf_r+0x1e8>)
 800652a:	f7f9 fe61 	bl	80001f0 <memchr>
 800652e:	9a04      	ldr	r2, [sp, #16]
 8006530:	b9d8      	cbnz	r0, 800656a <_svfiprintf_r+0xe6>
 8006532:	06d0      	lsls	r0, r2, #27
 8006534:	bf44      	itt	mi
 8006536:	2320      	movmi	r3, #32
 8006538:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800653c:	0711      	lsls	r1, r2, #28
 800653e:	bf44      	itt	mi
 8006540:	232b      	movmi	r3, #43	; 0x2b
 8006542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006546:	f89a 3000 	ldrb.w	r3, [sl]
 800654a:	2b2a      	cmp	r3, #42	; 0x2a
 800654c:	d015      	beq.n	800657a <_svfiprintf_r+0xf6>
 800654e:	9a07      	ldr	r2, [sp, #28]
 8006550:	4654      	mov	r4, sl
 8006552:	2000      	movs	r0, #0
 8006554:	f04f 0c0a 	mov.w	ip, #10
 8006558:	4621      	mov	r1, r4
 800655a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800655e:	3b30      	subs	r3, #48	; 0x30
 8006560:	2b09      	cmp	r3, #9
 8006562:	d94d      	bls.n	8006600 <_svfiprintf_r+0x17c>
 8006564:	b1b0      	cbz	r0, 8006594 <_svfiprintf_r+0x110>
 8006566:	9207      	str	r2, [sp, #28]
 8006568:	e014      	b.n	8006594 <_svfiprintf_r+0x110>
 800656a:	eba0 0308 	sub.w	r3, r0, r8
 800656e:	fa09 f303 	lsl.w	r3, r9, r3
 8006572:	4313      	orrs	r3, r2
 8006574:	9304      	str	r3, [sp, #16]
 8006576:	46a2      	mov	sl, r4
 8006578:	e7d2      	b.n	8006520 <_svfiprintf_r+0x9c>
 800657a:	9b03      	ldr	r3, [sp, #12]
 800657c:	1d19      	adds	r1, r3, #4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	9103      	str	r1, [sp, #12]
 8006582:	2b00      	cmp	r3, #0
 8006584:	bfbb      	ittet	lt
 8006586:	425b      	neglt	r3, r3
 8006588:	f042 0202 	orrlt.w	r2, r2, #2
 800658c:	9307      	strge	r3, [sp, #28]
 800658e:	9307      	strlt	r3, [sp, #28]
 8006590:	bfb8      	it	lt
 8006592:	9204      	strlt	r2, [sp, #16]
 8006594:	7823      	ldrb	r3, [r4, #0]
 8006596:	2b2e      	cmp	r3, #46	; 0x2e
 8006598:	d10c      	bne.n	80065b4 <_svfiprintf_r+0x130>
 800659a:	7863      	ldrb	r3, [r4, #1]
 800659c:	2b2a      	cmp	r3, #42	; 0x2a
 800659e:	d134      	bne.n	800660a <_svfiprintf_r+0x186>
 80065a0:	9b03      	ldr	r3, [sp, #12]
 80065a2:	1d1a      	adds	r2, r3, #4
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	9203      	str	r2, [sp, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	bfb8      	it	lt
 80065ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80065b0:	3402      	adds	r4, #2
 80065b2:	9305      	str	r3, [sp, #20]
 80065b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800667c <_svfiprintf_r+0x1f8>
 80065b8:	7821      	ldrb	r1, [r4, #0]
 80065ba:	2203      	movs	r2, #3
 80065bc:	4650      	mov	r0, sl
 80065be:	f7f9 fe17 	bl	80001f0 <memchr>
 80065c2:	b138      	cbz	r0, 80065d4 <_svfiprintf_r+0x150>
 80065c4:	9b04      	ldr	r3, [sp, #16]
 80065c6:	eba0 000a 	sub.w	r0, r0, sl
 80065ca:	2240      	movs	r2, #64	; 0x40
 80065cc:	4082      	lsls	r2, r0
 80065ce:	4313      	orrs	r3, r2
 80065d0:	3401      	adds	r4, #1
 80065d2:	9304      	str	r3, [sp, #16]
 80065d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d8:	4825      	ldr	r0, [pc, #148]	; (8006670 <_svfiprintf_r+0x1ec>)
 80065da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065de:	2206      	movs	r2, #6
 80065e0:	f7f9 fe06 	bl	80001f0 <memchr>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	d038      	beq.n	800665a <_svfiprintf_r+0x1d6>
 80065e8:	4b22      	ldr	r3, [pc, #136]	; (8006674 <_svfiprintf_r+0x1f0>)
 80065ea:	bb1b      	cbnz	r3, 8006634 <_svfiprintf_r+0x1b0>
 80065ec:	9b03      	ldr	r3, [sp, #12]
 80065ee:	3307      	adds	r3, #7
 80065f0:	f023 0307 	bic.w	r3, r3, #7
 80065f4:	3308      	adds	r3, #8
 80065f6:	9303      	str	r3, [sp, #12]
 80065f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065fa:	4433      	add	r3, r6
 80065fc:	9309      	str	r3, [sp, #36]	; 0x24
 80065fe:	e768      	b.n	80064d2 <_svfiprintf_r+0x4e>
 8006600:	fb0c 3202 	mla	r2, ip, r2, r3
 8006604:	460c      	mov	r4, r1
 8006606:	2001      	movs	r0, #1
 8006608:	e7a6      	b.n	8006558 <_svfiprintf_r+0xd4>
 800660a:	2300      	movs	r3, #0
 800660c:	3401      	adds	r4, #1
 800660e:	9305      	str	r3, [sp, #20]
 8006610:	4619      	mov	r1, r3
 8006612:	f04f 0c0a 	mov.w	ip, #10
 8006616:	4620      	mov	r0, r4
 8006618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800661c:	3a30      	subs	r2, #48	; 0x30
 800661e:	2a09      	cmp	r2, #9
 8006620:	d903      	bls.n	800662a <_svfiprintf_r+0x1a6>
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0c6      	beq.n	80065b4 <_svfiprintf_r+0x130>
 8006626:	9105      	str	r1, [sp, #20]
 8006628:	e7c4      	b.n	80065b4 <_svfiprintf_r+0x130>
 800662a:	fb0c 2101 	mla	r1, ip, r1, r2
 800662e:	4604      	mov	r4, r0
 8006630:	2301      	movs	r3, #1
 8006632:	e7f0      	b.n	8006616 <_svfiprintf_r+0x192>
 8006634:	ab03      	add	r3, sp, #12
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	462a      	mov	r2, r5
 800663a:	4b0f      	ldr	r3, [pc, #60]	; (8006678 <_svfiprintf_r+0x1f4>)
 800663c:	a904      	add	r1, sp, #16
 800663e:	4638      	mov	r0, r7
 8006640:	f3af 8000 	nop.w
 8006644:	1c42      	adds	r2, r0, #1
 8006646:	4606      	mov	r6, r0
 8006648:	d1d6      	bne.n	80065f8 <_svfiprintf_r+0x174>
 800664a:	89ab      	ldrh	r3, [r5, #12]
 800664c:	065b      	lsls	r3, r3, #25
 800664e:	f53f af2d 	bmi.w	80064ac <_svfiprintf_r+0x28>
 8006652:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006654:	b01d      	add	sp, #116	; 0x74
 8006656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665a:	ab03      	add	r3, sp, #12
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	462a      	mov	r2, r5
 8006660:	4b05      	ldr	r3, [pc, #20]	; (8006678 <_svfiprintf_r+0x1f4>)
 8006662:	a904      	add	r1, sp, #16
 8006664:	4638      	mov	r0, r7
 8006666:	f000 f879 	bl	800675c <_printf_i>
 800666a:	e7eb      	b.n	8006644 <_svfiprintf_r+0x1c0>
 800666c:	08006b68 	.word	0x08006b68
 8006670:	08006b72 	.word	0x08006b72
 8006674:	00000000 	.word	0x00000000
 8006678:	080063d1 	.word	0x080063d1
 800667c:	08006b6e 	.word	0x08006b6e

08006680 <_printf_common>:
 8006680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006684:	4616      	mov	r6, r2
 8006686:	4699      	mov	r9, r3
 8006688:	688a      	ldr	r2, [r1, #8]
 800668a:	690b      	ldr	r3, [r1, #16]
 800668c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006690:	4293      	cmp	r3, r2
 8006692:	bfb8      	it	lt
 8006694:	4613      	movlt	r3, r2
 8006696:	6033      	str	r3, [r6, #0]
 8006698:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800669c:	4607      	mov	r7, r0
 800669e:	460c      	mov	r4, r1
 80066a0:	b10a      	cbz	r2, 80066a6 <_printf_common+0x26>
 80066a2:	3301      	adds	r3, #1
 80066a4:	6033      	str	r3, [r6, #0]
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	0699      	lsls	r1, r3, #26
 80066aa:	bf42      	ittt	mi
 80066ac:	6833      	ldrmi	r3, [r6, #0]
 80066ae:	3302      	addmi	r3, #2
 80066b0:	6033      	strmi	r3, [r6, #0]
 80066b2:	6825      	ldr	r5, [r4, #0]
 80066b4:	f015 0506 	ands.w	r5, r5, #6
 80066b8:	d106      	bne.n	80066c8 <_printf_common+0x48>
 80066ba:	f104 0a19 	add.w	sl, r4, #25
 80066be:	68e3      	ldr	r3, [r4, #12]
 80066c0:	6832      	ldr	r2, [r6, #0]
 80066c2:	1a9b      	subs	r3, r3, r2
 80066c4:	42ab      	cmp	r3, r5
 80066c6:	dc26      	bgt.n	8006716 <_printf_common+0x96>
 80066c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066cc:	1e13      	subs	r3, r2, #0
 80066ce:	6822      	ldr	r2, [r4, #0]
 80066d0:	bf18      	it	ne
 80066d2:	2301      	movne	r3, #1
 80066d4:	0692      	lsls	r2, r2, #26
 80066d6:	d42b      	bmi.n	8006730 <_printf_common+0xb0>
 80066d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066dc:	4649      	mov	r1, r9
 80066de:	4638      	mov	r0, r7
 80066e0:	47c0      	blx	r8
 80066e2:	3001      	adds	r0, #1
 80066e4:	d01e      	beq.n	8006724 <_printf_common+0xa4>
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	6922      	ldr	r2, [r4, #16]
 80066ea:	f003 0306 	and.w	r3, r3, #6
 80066ee:	2b04      	cmp	r3, #4
 80066f0:	bf02      	ittt	eq
 80066f2:	68e5      	ldreq	r5, [r4, #12]
 80066f4:	6833      	ldreq	r3, [r6, #0]
 80066f6:	1aed      	subeq	r5, r5, r3
 80066f8:	68a3      	ldr	r3, [r4, #8]
 80066fa:	bf0c      	ite	eq
 80066fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006700:	2500      	movne	r5, #0
 8006702:	4293      	cmp	r3, r2
 8006704:	bfc4      	itt	gt
 8006706:	1a9b      	subgt	r3, r3, r2
 8006708:	18ed      	addgt	r5, r5, r3
 800670a:	2600      	movs	r6, #0
 800670c:	341a      	adds	r4, #26
 800670e:	42b5      	cmp	r5, r6
 8006710:	d11a      	bne.n	8006748 <_printf_common+0xc8>
 8006712:	2000      	movs	r0, #0
 8006714:	e008      	b.n	8006728 <_printf_common+0xa8>
 8006716:	2301      	movs	r3, #1
 8006718:	4652      	mov	r2, sl
 800671a:	4649      	mov	r1, r9
 800671c:	4638      	mov	r0, r7
 800671e:	47c0      	blx	r8
 8006720:	3001      	adds	r0, #1
 8006722:	d103      	bne.n	800672c <_printf_common+0xac>
 8006724:	f04f 30ff 	mov.w	r0, #4294967295
 8006728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672c:	3501      	adds	r5, #1
 800672e:	e7c6      	b.n	80066be <_printf_common+0x3e>
 8006730:	18e1      	adds	r1, r4, r3
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	2030      	movs	r0, #48	; 0x30
 8006736:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800673a:	4422      	add	r2, r4
 800673c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006740:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006744:	3302      	adds	r3, #2
 8006746:	e7c7      	b.n	80066d8 <_printf_common+0x58>
 8006748:	2301      	movs	r3, #1
 800674a:	4622      	mov	r2, r4
 800674c:	4649      	mov	r1, r9
 800674e:	4638      	mov	r0, r7
 8006750:	47c0      	blx	r8
 8006752:	3001      	adds	r0, #1
 8006754:	d0e6      	beq.n	8006724 <_printf_common+0xa4>
 8006756:	3601      	adds	r6, #1
 8006758:	e7d9      	b.n	800670e <_printf_common+0x8e>
	...

0800675c <_printf_i>:
 800675c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006760:	7e0f      	ldrb	r7, [r1, #24]
 8006762:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006764:	2f78      	cmp	r7, #120	; 0x78
 8006766:	4691      	mov	r9, r2
 8006768:	4680      	mov	r8, r0
 800676a:	460c      	mov	r4, r1
 800676c:	469a      	mov	sl, r3
 800676e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006772:	d807      	bhi.n	8006784 <_printf_i+0x28>
 8006774:	2f62      	cmp	r7, #98	; 0x62
 8006776:	d80a      	bhi.n	800678e <_printf_i+0x32>
 8006778:	2f00      	cmp	r7, #0
 800677a:	f000 80d4 	beq.w	8006926 <_printf_i+0x1ca>
 800677e:	2f58      	cmp	r7, #88	; 0x58
 8006780:	f000 80c0 	beq.w	8006904 <_printf_i+0x1a8>
 8006784:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800678c:	e03a      	b.n	8006804 <_printf_i+0xa8>
 800678e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006792:	2b15      	cmp	r3, #21
 8006794:	d8f6      	bhi.n	8006784 <_printf_i+0x28>
 8006796:	a101      	add	r1, pc, #4	; (adr r1, 800679c <_printf_i+0x40>)
 8006798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800679c:	080067f5 	.word	0x080067f5
 80067a0:	08006809 	.word	0x08006809
 80067a4:	08006785 	.word	0x08006785
 80067a8:	08006785 	.word	0x08006785
 80067ac:	08006785 	.word	0x08006785
 80067b0:	08006785 	.word	0x08006785
 80067b4:	08006809 	.word	0x08006809
 80067b8:	08006785 	.word	0x08006785
 80067bc:	08006785 	.word	0x08006785
 80067c0:	08006785 	.word	0x08006785
 80067c4:	08006785 	.word	0x08006785
 80067c8:	0800690d 	.word	0x0800690d
 80067cc:	08006835 	.word	0x08006835
 80067d0:	080068c7 	.word	0x080068c7
 80067d4:	08006785 	.word	0x08006785
 80067d8:	08006785 	.word	0x08006785
 80067dc:	0800692f 	.word	0x0800692f
 80067e0:	08006785 	.word	0x08006785
 80067e4:	08006835 	.word	0x08006835
 80067e8:	08006785 	.word	0x08006785
 80067ec:	08006785 	.word	0x08006785
 80067f0:	080068cf 	.word	0x080068cf
 80067f4:	682b      	ldr	r3, [r5, #0]
 80067f6:	1d1a      	adds	r2, r3, #4
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	602a      	str	r2, [r5, #0]
 80067fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006804:	2301      	movs	r3, #1
 8006806:	e09f      	b.n	8006948 <_printf_i+0x1ec>
 8006808:	6820      	ldr	r0, [r4, #0]
 800680a:	682b      	ldr	r3, [r5, #0]
 800680c:	0607      	lsls	r7, r0, #24
 800680e:	f103 0104 	add.w	r1, r3, #4
 8006812:	6029      	str	r1, [r5, #0]
 8006814:	d501      	bpl.n	800681a <_printf_i+0xbe>
 8006816:	681e      	ldr	r6, [r3, #0]
 8006818:	e003      	b.n	8006822 <_printf_i+0xc6>
 800681a:	0646      	lsls	r6, r0, #25
 800681c:	d5fb      	bpl.n	8006816 <_printf_i+0xba>
 800681e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006822:	2e00      	cmp	r6, #0
 8006824:	da03      	bge.n	800682e <_printf_i+0xd2>
 8006826:	232d      	movs	r3, #45	; 0x2d
 8006828:	4276      	negs	r6, r6
 800682a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800682e:	485a      	ldr	r0, [pc, #360]	; (8006998 <_printf_i+0x23c>)
 8006830:	230a      	movs	r3, #10
 8006832:	e012      	b.n	800685a <_printf_i+0xfe>
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	6820      	ldr	r0, [r4, #0]
 8006838:	1d19      	adds	r1, r3, #4
 800683a:	6029      	str	r1, [r5, #0]
 800683c:	0605      	lsls	r5, r0, #24
 800683e:	d501      	bpl.n	8006844 <_printf_i+0xe8>
 8006840:	681e      	ldr	r6, [r3, #0]
 8006842:	e002      	b.n	800684a <_printf_i+0xee>
 8006844:	0641      	lsls	r1, r0, #25
 8006846:	d5fb      	bpl.n	8006840 <_printf_i+0xe4>
 8006848:	881e      	ldrh	r6, [r3, #0]
 800684a:	4853      	ldr	r0, [pc, #332]	; (8006998 <_printf_i+0x23c>)
 800684c:	2f6f      	cmp	r7, #111	; 0x6f
 800684e:	bf0c      	ite	eq
 8006850:	2308      	moveq	r3, #8
 8006852:	230a      	movne	r3, #10
 8006854:	2100      	movs	r1, #0
 8006856:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800685a:	6865      	ldr	r5, [r4, #4]
 800685c:	60a5      	str	r5, [r4, #8]
 800685e:	2d00      	cmp	r5, #0
 8006860:	bfa2      	ittt	ge
 8006862:	6821      	ldrge	r1, [r4, #0]
 8006864:	f021 0104 	bicge.w	r1, r1, #4
 8006868:	6021      	strge	r1, [r4, #0]
 800686a:	b90e      	cbnz	r6, 8006870 <_printf_i+0x114>
 800686c:	2d00      	cmp	r5, #0
 800686e:	d04b      	beq.n	8006908 <_printf_i+0x1ac>
 8006870:	4615      	mov	r5, r2
 8006872:	fbb6 f1f3 	udiv	r1, r6, r3
 8006876:	fb03 6711 	mls	r7, r3, r1, r6
 800687a:	5dc7      	ldrb	r7, [r0, r7]
 800687c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006880:	4637      	mov	r7, r6
 8006882:	42bb      	cmp	r3, r7
 8006884:	460e      	mov	r6, r1
 8006886:	d9f4      	bls.n	8006872 <_printf_i+0x116>
 8006888:	2b08      	cmp	r3, #8
 800688a:	d10b      	bne.n	80068a4 <_printf_i+0x148>
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	07de      	lsls	r6, r3, #31
 8006890:	d508      	bpl.n	80068a4 <_printf_i+0x148>
 8006892:	6923      	ldr	r3, [r4, #16]
 8006894:	6861      	ldr	r1, [r4, #4]
 8006896:	4299      	cmp	r1, r3
 8006898:	bfde      	ittt	le
 800689a:	2330      	movle	r3, #48	; 0x30
 800689c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068a4:	1b52      	subs	r2, r2, r5
 80068a6:	6122      	str	r2, [r4, #16]
 80068a8:	f8cd a000 	str.w	sl, [sp]
 80068ac:	464b      	mov	r3, r9
 80068ae:	aa03      	add	r2, sp, #12
 80068b0:	4621      	mov	r1, r4
 80068b2:	4640      	mov	r0, r8
 80068b4:	f7ff fee4 	bl	8006680 <_printf_common>
 80068b8:	3001      	adds	r0, #1
 80068ba:	d14a      	bne.n	8006952 <_printf_i+0x1f6>
 80068bc:	f04f 30ff 	mov.w	r0, #4294967295
 80068c0:	b004      	add	sp, #16
 80068c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	f043 0320 	orr.w	r3, r3, #32
 80068cc:	6023      	str	r3, [r4, #0]
 80068ce:	4833      	ldr	r0, [pc, #204]	; (800699c <_printf_i+0x240>)
 80068d0:	2778      	movs	r7, #120	; 0x78
 80068d2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	6829      	ldr	r1, [r5, #0]
 80068da:	061f      	lsls	r7, r3, #24
 80068dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80068e0:	d402      	bmi.n	80068e8 <_printf_i+0x18c>
 80068e2:	065f      	lsls	r7, r3, #25
 80068e4:	bf48      	it	mi
 80068e6:	b2b6      	uxthmi	r6, r6
 80068e8:	07df      	lsls	r7, r3, #31
 80068ea:	bf48      	it	mi
 80068ec:	f043 0320 	orrmi.w	r3, r3, #32
 80068f0:	6029      	str	r1, [r5, #0]
 80068f2:	bf48      	it	mi
 80068f4:	6023      	strmi	r3, [r4, #0]
 80068f6:	b91e      	cbnz	r6, 8006900 <_printf_i+0x1a4>
 80068f8:	6823      	ldr	r3, [r4, #0]
 80068fa:	f023 0320 	bic.w	r3, r3, #32
 80068fe:	6023      	str	r3, [r4, #0]
 8006900:	2310      	movs	r3, #16
 8006902:	e7a7      	b.n	8006854 <_printf_i+0xf8>
 8006904:	4824      	ldr	r0, [pc, #144]	; (8006998 <_printf_i+0x23c>)
 8006906:	e7e4      	b.n	80068d2 <_printf_i+0x176>
 8006908:	4615      	mov	r5, r2
 800690a:	e7bd      	b.n	8006888 <_printf_i+0x12c>
 800690c:	682b      	ldr	r3, [r5, #0]
 800690e:	6826      	ldr	r6, [r4, #0]
 8006910:	6961      	ldr	r1, [r4, #20]
 8006912:	1d18      	adds	r0, r3, #4
 8006914:	6028      	str	r0, [r5, #0]
 8006916:	0635      	lsls	r5, r6, #24
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	d501      	bpl.n	8006920 <_printf_i+0x1c4>
 800691c:	6019      	str	r1, [r3, #0]
 800691e:	e002      	b.n	8006926 <_printf_i+0x1ca>
 8006920:	0670      	lsls	r0, r6, #25
 8006922:	d5fb      	bpl.n	800691c <_printf_i+0x1c0>
 8006924:	8019      	strh	r1, [r3, #0]
 8006926:	2300      	movs	r3, #0
 8006928:	6123      	str	r3, [r4, #16]
 800692a:	4615      	mov	r5, r2
 800692c:	e7bc      	b.n	80068a8 <_printf_i+0x14c>
 800692e:	682b      	ldr	r3, [r5, #0]
 8006930:	1d1a      	adds	r2, r3, #4
 8006932:	602a      	str	r2, [r5, #0]
 8006934:	681d      	ldr	r5, [r3, #0]
 8006936:	6862      	ldr	r2, [r4, #4]
 8006938:	2100      	movs	r1, #0
 800693a:	4628      	mov	r0, r5
 800693c:	f7f9 fc58 	bl	80001f0 <memchr>
 8006940:	b108      	cbz	r0, 8006946 <_printf_i+0x1ea>
 8006942:	1b40      	subs	r0, r0, r5
 8006944:	6060      	str	r0, [r4, #4]
 8006946:	6863      	ldr	r3, [r4, #4]
 8006948:	6123      	str	r3, [r4, #16]
 800694a:	2300      	movs	r3, #0
 800694c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006950:	e7aa      	b.n	80068a8 <_printf_i+0x14c>
 8006952:	6923      	ldr	r3, [r4, #16]
 8006954:	462a      	mov	r2, r5
 8006956:	4649      	mov	r1, r9
 8006958:	4640      	mov	r0, r8
 800695a:	47d0      	blx	sl
 800695c:	3001      	adds	r0, #1
 800695e:	d0ad      	beq.n	80068bc <_printf_i+0x160>
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	079b      	lsls	r3, r3, #30
 8006964:	d413      	bmi.n	800698e <_printf_i+0x232>
 8006966:	68e0      	ldr	r0, [r4, #12]
 8006968:	9b03      	ldr	r3, [sp, #12]
 800696a:	4298      	cmp	r0, r3
 800696c:	bfb8      	it	lt
 800696e:	4618      	movlt	r0, r3
 8006970:	e7a6      	b.n	80068c0 <_printf_i+0x164>
 8006972:	2301      	movs	r3, #1
 8006974:	4632      	mov	r2, r6
 8006976:	4649      	mov	r1, r9
 8006978:	4640      	mov	r0, r8
 800697a:	47d0      	blx	sl
 800697c:	3001      	adds	r0, #1
 800697e:	d09d      	beq.n	80068bc <_printf_i+0x160>
 8006980:	3501      	adds	r5, #1
 8006982:	68e3      	ldr	r3, [r4, #12]
 8006984:	9903      	ldr	r1, [sp, #12]
 8006986:	1a5b      	subs	r3, r3, r1
 8006988:	42ab      	cmp	r3, r5
 800698a:	dcf2      	bgt.n	8006972 <_printf_i+0x216>
 800698c:	e7eb      	b.n	8006966 <_printf_i+0x20a>
 800698e:	2500      	movs	r5, #0
 8006990:	f104 0619 	add.w	r6, r4, #25
 8006994:	e7f5      	b.n	8006982 <_printf_i+0x226>
 8006996:	bf00      	nop
 8006998:	08006b79 	.word	0x08006b79
 800699c:	08006b8a 	.word	0x08006b8a

080069a0 <memmove>:
 80069a0:	4288      	cmp	r0, r1
 80069a2:	b510      	push	{r4, lr}
 80069a4:	eb01 0402 	add.w	r4, r1, r2
 80069a8:	d902      	bls.n	80069b0 <memmove+0x10>
 80069aa:	4284      	cmp	r4, r0
 80069ac:	4623      	mov	r3, r4
 80069ae:	d807      	bhi.n	80069c0 <memmove+0x20>
 80069b0:	1e43      	subs	r3, r0, #1
 80069b2:	42a1      	cmp	r1, r4
 80069b4:	d008      	beq.n	80069c8 <memmove+0x28>
 80069b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069be:	e7f8      	b.n	80069b2 <memmove+0x12>
 80069c0:	4402      	add	r2, r0
 80069c2:	4601      	mov	r1, r0
 80069c4:	428a      	cmp	r2, r1
 80069c6:	d100      	bne.n	80069ca <memmove+0x2a>
 80069c8:	bd10      	pop	{r4, pc}
 80069ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069d2:	e7f7      	b.n	80069c4 <memmove+0x24>

080069d4 <_sbrk_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	4d06      	ldr	r5, [pc, #24]	; (80069f0 <_sbrk_r+0x1c>)
 80069d8:	2300      	movs	r3, #0
 80069da:	4604      	mov	r4, r0
 80069dc:	4608      	mov	r0, r1
 80069de:	602b      	str	r3, [r5, #0]
 80069e0:	f7fb fa8c 	bl	8001efc <_sbrk>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d102      	bne.n	80069ee <_sbrk_r+0x1a>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	b103      	cbz	r3, 80069ee <_sbrk_r+0x1a>
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	20000ae4 	.word	0x20000ae4

080069f4 <memcpy>:
 80069f4:	440a      	add	r2, r1
 80069f6:	4291      	cmp	r1, r2
 80069f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80069fc:	d100      	bne.n	8006a00 <memcpy+0xc>
 80069fe:	4770      	bx	lr
 8006a00:	b510      	push	{r4, lr}
 8006a02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a0a:	4291      	cmp	r1, r2
 8006a0c:	d1f9      	bne.n	8006a02 <memcpy+0xe>
 8006a0e:	bd10      	pop	{r4, pc}

08006a10 <_realloc_r>:
 8006a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a14:	4680      	mov	r8, r0
 8006a16:	4614      	mov	r4, r2
 8006a18:	460e      	mov	r6, r1
 8006a1a:	b921      	cbnz	r1, 8006a26 <_realloc_r+0x16>
 8006a1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a20:	4611      	mov	r1, r2
 8006a22:	f7ff bc49 	b.w	80062b8 <_malloc_r>
 8006a26:	b92a      	cbnz	r2, 8006a34 <_realloc_r+0x24>
 8006a28:	f7ff fbda 	bl	80061e0 <_free_r>
 8006a2c:	4625      	mov	r5, r4
 8006a2e:	4628      	mov	r0, r5
 8006a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a34:	f000 f81b 	bl	8006a6e <_malloc_usable_size_r>
 8006a38:	4284      	cmp	r4, r0
 8006a3a:	4607      	mov	r7, r0
 8006a3c:	d802      	bhi.n	8006a44 <_realloc_r+0x34>
 8006a3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a42:	d812      	bhi.n	8006a6a <_realloc_r+0x5a>
 8006a44:	4621      	mov	r1, r4
 8006a46:	4640      	mov	r0, r8
 8006a48:	f7ff fc36 	bl	80062b8 <_malloc_r>
 8006a4c:	4605      	mov	r5, r0
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	d0ed      	beq.n	8006a2e <_realloc_r+0x1e>
 8006a52:	42bc      	cmp	r4, r7
 8006a54:	4622      	mov	r2, r4
 8006a56:	4631      	mov	r1, r6
 8006a58:	bf28      	it	cs
 8006a5a:	463a      	movcs	r2, r7
 8006a5c:	f7ff ffca 	bl	80069f4 <memcpy>
 8006a60:	4631      	mov	r1, r6
 8006a62:	4640      	mov	r0, r8
 8006a64:	f7ff fbbc 	bl	80061e0 <_free_r>
 8006a68:	e7e1      	b.n	8006a2e <_realloc_r+0x1e>
 8006a6a:	4635      	mov	r5, r6
 8006a6c:	e7df      	b.n	8006a2e <_realloc_r+0x1e>

08006a6e <_malloc_usable_size_r>:
 8006a6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a72:	1f18      	subs	r0, r3, #4
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	bfbc      	itt	lt
 8006a78:	580b      	ldrlt	r3, [r1, r0]
 8006a7a:	18c0      	addlt	r0, r0, r3
 8006a7c:	4770      	bx	lr
	...

08006a80 <sqrtf>:
 8006a80:	b508      	push	{r3, lr}
 8006a82:	ed2d 8b02 	vpush	{d8}
 8006a86:	eeb0 8a40 	vmov.f32	s16, s0
 8006a8a:	f000 f817 	bl	8006abc <__ieee754_sqrtf>
 8006a8e:	eeb4 8a48 	vcmp.f32	s16, s16
 8006a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a96:	d60c      	bvs.n	8006ab2 <sqrtf+0x32>
 8006a98:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006ab8 <sqrtf+0x38>
 8006a9c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa4:	d505      	bpl.n	8006ab2 <sqrtf+0x32>
 8006aa6:	f7ff fb6f 	bl	8006188 <__errno>
 8006aaa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006aae:	2321      	movs	r3, #33	; 0x21
 8006ab0:	6003      	str	r3, [r0, #0]
 8006ab2:	ecbd 8b02 	vpop	{d8}
 8006ab6:	bd08      	pop	{r3, pc}
 8006ab8:	00000000 	.word	0x00000000

08006abc <__ieee754_sqrtf>:
 8006abc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006ac0:	4770      	bx	lr
	...

08006ac4 <_init>:
 8006ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac6:	bf00      	nop
 8006ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aca:	bc08      	pop	{r3}
 8006acc:	469e      	mov	lr, r3
 8006ace:	4770      	bx	lr

08006ad0 <_fini>:
 8006ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad2:	bf00      	nop
 8006ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad6:	bc08      	pop	{r3}
 8006ad8:	469e      	mov	lr, r3
 8006ada:	4770      	bx	lr
